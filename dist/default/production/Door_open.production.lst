

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jan 05 16:41:05 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F1526 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018F                     	;# 
   133  0190                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0197                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  020D                     	;# 
   167  020F                     	;# 
   168  0210                     	;# 
   169  0211                     	;# 
   170  0211                     	;# 
   171  0212                     	;# 
   172  0212                     	;# 
   173  0213                     	;# 
   174  0213                     	;# 
   175  0214                     	;# 
   176  0214                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021E                     	;# 
   190  021F                     	;# 
   191  028C                     	;# 
   192  028D                     	;# 
   193  0291                     	;# 
   194  0291                     	;# 
   195  0292                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029D                     	;# 
   202  029E                     	;# 
   203  029F                     	;# 
   204  030C                     	;# 
   205  030D                     	;# 
   206  0311                     	;# 
   207  0311                     	;# 
   208  0312                     	;# 
   209  0313                     	;# 
   210  0318                     	;# 
   211  0318                     	;# 
   212  0319                     	;# 
   213  031A                     	;# 
   214  031C                     	;# 
   215  031C                     	;# 
   216  031D                     	;# 
   217  031E                     	;# 
   218  038C                     	;# 
   219  038D                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  040C                     	;# 
   224  040D                     	;# 
   225  0411                     	;# 
   226  0411                     	;# 
   227  0412                     	;# 
   228  0413                     	;# 
   229  0414                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  0418                     	;# 
   234  0418                     	;# 
   235  0419                     	;# 
   236  041A                     	;# 
   237  041B                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  048D                     	;# 
   242  0491                     	;# 
   243  0491                     	;# 
   244  0492                     	;# 
   245  0492                     	;# 
   246  0493                     	;# 
   247  0493                     	;# 
   248  0493                     	;# 
   249  0494                     	;# 
   250  0494                     	;# 
   251  0495                     	;# 
   252  0495                     	;# 
   253  0496                     	;# 
   254  0496                     	;# 
   255  0497                     	;# 
   256  0497                     	;# 
   257  0595                     	;# 
   258  0596                     	;# 
   259  0597                     	;# 
   260  059C                     	;# 
   261  059D                     	;# 
   262  059E                     	;# 
   263  0611                     	;# 
   264  0611                     	;# 
   265  0612                     	;# 
   266  0613                     	;# 
   267  0614                     	;# 
   268  0614                     	;# 
   269  0615                     	;# 
   270  0616                     	;# 
   271  0617                     	;# 
   272  0617                     	;# 
   273  0618                     	;# 
   274  0619                     	;# 
   275  061A                     	;# 
   276  061A                     	;# 
   277  061B                     	;# 
   278  061C                     	;# 
   279  061D                     	;# 
   280  061D                     	;# 
   281  061E                     	;# 
   282  061F                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294                           
   295                           	psect	idataBANK0
   296  07CD                     __pidataBANK0:	
   297                           
   298                           ;initializer for _man
   299  07CD  3401               	retlw	1
   300  07CE  3400               	retlw	0
   301                           
   302                           	psect	idataBANK1
   303  06AE                     __pidataBANK1:	
   304                           
   305                           ;initializer for _st
   306  06AE  3454               	retlw	84
   307  06AF  3454               	retlw	84
   308  06B0  3454               	retlw	84
   309  06B1  3454               	retlw	84
   310  06B2  3454               	retlw	84
   311  06B3  3454               	retlw	84
   312  06B4  3454               	retlw	84
   313  06B5  3454               	retlw	84
   314  06B6  3454               	retlw	84
   315  06B7  3454               	retlw	84
   316  06B8  3454               	retlw	84
   317  06B9  3454               	retlw	84
   318  06BA  3454               	retlw	84
   319  06BB  3454               	retlw	84
   320  06BC  3454               	retlw	84
   321  06BD  3454               	retlw	84
   322  06BE  3454               	retlw	84
   323  06BF  3454               	retlw	84
   324  06C0  3454               	retlw	84
   325  06C1  3454               	retlw	84
   326  06C2  3454               	retlw	84
   327  06C3  3454               	retlw	84
   328  06C4  3454               	retlw	84
   329  06C5  3454               	retlw	84
   330  06C6  3454               	retlw	84
   331  06C7  3454               	retlw	84
   332  06C8  3454               	retlw	84
   333  06C9  3454               	retlw	84
   334  06CA  3454               	retlw	84
   335  06CB  3454               	retlw	84
   336  06CC  3454               	retlw	84
   337  06CD  3454               	retlw	84
   338  06CE  3454               	retlw	84
   339  06CF  3454               	retlw	84
   340  06D0  3454               	retlw	84
   341  06D1  3454               	retlw	84
   342  06D2  3454               	retlw	84
   343  06D3  3454               	retlw	84
   344  06D4  3454               	retlw	84
   345  06D5  3454               	retlw	84
   346  06D6  3454               	retlw	84
   347  06D7  3400               	retlw	0
   348  06D8  3400               	retlw	0
   349  06D9  3400               	retlw	0
   350  06DA  3400               	retlw	0
   351  06DB  3400               	retlw	0
   352  06DC  3400               	retlw	0
   353  06DD  3400               	retlw	0
   354  06DE  3400               	retlw	0
   355  06DF  3400               	retlw	0
   356                           
   357                           	psect	idataBANK2
   358  05EE                     __pidataBANK2:	
   359                           
   360                           ;initializer for _copy
   361  05EE  3424               	retlw	36
   362  05EF  3400               	retlw	0
   363  05F0  3400               	retlw	0
   364  05F1  3400               	retlw	0
   365  05F2  3400               	retlw	0
   366  05F3  3400               	retlw	0
   367  05F4  3400               	retlw	0
   368  05F5  3400               	retlw	0
   369  05F6  3400               	retlw	0
   370  05F7  3400               	retlw	0
   371  05F8  3400               	retlw	0
   372  05F9  3400               	retlw	0
   373  05FA  3400               	retlw	0
   374  05FB  3400               	retlw	0
   375  05FC  3400               	retlw	0
   376  05FD  3400               	retlw	0
   377  05FE  3400               	retlw	0
   378  05FF  3400               	retlw	0
   379  0600  3400               	retlw	0
   380  0601  3400               	retlw	0
   381  0602  3400               	retlw	0
   382  0603  3400               	retlw	0
   383  0604  3400               	retlw	0
   384  0605  3400               	retlw	0
   385  0606  3400               	retlw	0
   386  0607  3400               	retlw	0
   387  0608  3400               	retlw	0
   388  0609  3400               	retlw	0
   389  060A  3400               	retlw	0
   390  060B  3400               	retlw	0
   391  060C  3400               	retlw	0
   392  060D  3400               	retlw	0
   393  060E  3400               	retlw	0
   394  060F  3400               	retlw	0
   395  0610  3400               	retlw	0
   396  0611  3400               	retlw	0
   397                           
   398                           ;initializer for _name
   399  0612  3461               	retlw	97
   400  0613  3400               	retlw	0
   401  0614  3400               	retlw	0
   402  0615  3400               	retlw	0
   403  0616  3400               	retlw	0
   404  0617  3400               	retlw	0
   405  0618  3400               	retlw	0
   406  0619  3400               	retlw	0
   407  061A  3400               	retlw	0
   408  061B  3400               	retlw	0
   409  061C  3400               	retlw	0
   410  061D  3400               	retlw	0
   411  061E  3400               	retlw	0
   412  061F  3400               	retlw	0
   413  0620  3400               	retlw	0
   414  0621  3400               	retlw	0
   415  0622  3400               	retlw	0
   416  0623  3400               	retlw	0
   417  0624  3400               	retlw	0
   418  0625  3400               	retlw	0
   419  0626  3400               	retlw	0
   420  0627  3400               	retlw	0
   421  0628  3400               	retlw	0
   422  0629  3400               	retlw	0
   423  062A  3400               	retlw	0
   424  062B  3400               	retlw	0
   425  062C  3400               	retlw	0
   426  062D  3400               	retlw	0
   427  062E  3400               	retlw	0
   428  062F  3400               	retlw	0
   429  0630  3400               	retlw	0
   430  0631  3400               	retlw	0
   431  0632  3400               	retlw	0
   432  0633  3400               	retlw	0
   433  0634  3400               	retlw	0
   434  0635  3400               	retlw	0
   435                           
   436                           	psect	idataBANK3
   437  0636                     __pidataBANK3:	
   438                           
   439                           ;initializer for _child_LOCK
   440  0636  3405               	retlw	low (STR_1| (0+32768))
   441  0637  3487               	retlw	high (STR_1| (0+32768))
   442  0638  3400               	retlw	0
   443  0639  3400               	retlw	0
   444  063A  3400               	retlw	0
   445  063B  3400               	retlw	0
   446  063C  3400               	retlw	0
   447  063D  3400               	retlw	0
   448  063E  3400               	retlw	0
   449  063F  3400               	retlw	0
   450  0640  3400               	retlw	0
   451  0641  3400               	retlw	0
   452  0642  3400               	retlw	0
   453  0643  3400               	retlw	0
   454  0644  3400               	retlw	0
   455  0645  3400               	retlw	0
   456  0646  3400               	retlw	0
   457  0647  3400               	retlw	0
   458  0648  3400               	retlw	0
   459  0649  3400               	retlw	0
   460  064A  3400               	retlw	0
   461  064B  3400               	retlw	0
   462  064C  3400               	retlw	0
   463  064D  3400               	retlw	0
   464  064E  3400               	retlw	0
   465  064F  3400               	retlw	0
   466  0650  3400               	retlw	0
   467  0651  3400               	retlw	0
   468  0652  3400               	retlw	0
   469  0653  3400               	retlw	0
   470  0654  3400               	retlw	0
   471  0655  3400               	retlw	0
   472  0656  3400               	retlw	0
   473  0657  3400               	retlw	0
   474  0658  3400               	retlw	0
   475  0659  3400               	retlw	0
   476  065A  3400               	retlw	0
   477  065B  3400               	retlw	0
   478  065C  3400               	retlw	0
   479  065D  3400               	retlw	0
   480  065E  3400               	retlw	0
   481  065F  3400               	retlw	0
   482  0660  3400               	retlw	0
   483  0661  3400               	retlw	0
   484  0662  3400               	retlw	0
   485  0663  3400               	retlw	0
   486  0664  3400               	retlw	0
   487  0665  3400               	retlw	0
   488  0666  3400               	retlw	0
   489  0667  3400               	retlw	0
   490  0668  3400               	retlw	0
   491  0669  3400               	retlw	0
   492  066A  3400               	retlw	0
   493  066B  3400               	retlw	0
   494  066C  3400               	retlw	0
   495  066D  3400               	retlw	0
   496  066E  3400               	retlw	0
   497  066F  3400               	retlw	0
   498  0670  3400               	retlw	0
   499  0671  3400               	retlw	0
   500  0672  3400               	retlw	0
   501  0673  3400               	retlw	0
   502  0674  3400               	retlw	0
   503  0675  3400               	retlw	0
   504  0013                     _PIR3bits	set	19
   505  0019                     _T1GCON	set	25
   506  0018                     _T1CON	set	24
   507  0016                     _TMR1L	set	22
   508  0017                     _TMR1H	set	23
   509  0018                     _T1CONbits	set	24
   510  0011                     _PIR1bits	set	17
   511  005E                     _PEIE	set	94
   512  005F                     _GIE	set	95
   513  0063                     _RA3	set	99
   514  008D                     _RC1IF	set	141
   515  008E                     _TRISCbits	set	142
   516  008C                     _TRISAbits	set	140
   517  008F                     _TRISD	set	143
   518  0093                     _PIE3bits	set	147
   519  0091                     _PIE1bits	set	145
   520  018C                     _ANSELA	set	396
   521  018D                     _ANSELB	set	397
   522  018F                     _ANSELD	set	399
   523  0190                     _ANSELE	set	400
   524  019C                     _SP1BRGH	set	412
   525  019B                     _SP1BRGL	set	411
   526  019E                     _TX1STA	set	414
   527  019D                     _RC1STA	set	413
   528  019F                     _BAUD1CON	set	415
   529  019E                     _TX1STAbits	set	414
   530  0199                     _RC1REG	set	409
   531  019A                     _TX1REG	set	410
   532  019D                     _RC1STAbits	set	413
   533  020D                     _WPUB	set	525
   534  020F                     _WPUD	set	527
   535  0210                     _WPUE	set	528
   536  1463                     _RF3	set	5219
   537  1465                     _RF5	set	5221
   538  1467                     _RF7	set	5223
   539  1460                     _RF0	set	5216
   540  1461                     _RF1	set	5217
   541  030C                     _TRISFbits	set	780
   542  040C                     _ANSELF	set	1036
   543  040D                     _ANSELG	set	1037
   544  0411                     _TMR3L	set	1041
   545  0412                     _TMR3H	set	1042
   546  0414                     _T3GCON	set	1044
   547  0413                     _T3CON	set	1043
   548  048D                     _WPUG	set	1165
   549                           
   550                           	psect	stringtext1
   551  0705                     __pstringtext1:	
   552  0705                     STR_1:	
   553  0705  3430               	retlw	48	;'0'
   554  0706  3430               	retlw	48	;'0'
   555  0707  3430               	retlw	48	;'0'
   556  0708  3430               	retlw	48	;'0'
   557  0709  3430               	retlw	48	;'0'
   558  070A  3430               	retlw	48	;'0'
   559  070B  3430               	retlw	48	;'0'
   560  070C  3430               	retlw	48	;'0'
   561  070D  3430               	retlw	48	;'0'
   562  070E  3430               	retlw	48	;'0'
   563  070F  3430               	retlw	48	;'0'
   564  0710  3430               	retlw	48	;'0'
   565  0711  3430               	retlw	48	;'0'
   566  0712  3430               	retlw	48	;'0'
   567  0713  3430               	retlw	48	;'0'
   568  0714  3430               	retlw	48	;'0'
   569  0715  3430               	retlw	48	;'0'
   570  0716  3430               	retlw	48	;'0'
   571  0717  3430               	retlw	48	;'0'
   572  0718  3430               	retlw	48	;'0'
   573  0719  3430               	retlw	48	;'0'
   574  071A  3430               	retlw	48	;'0'
   575  071B  3430               	retlw	48	;'0'
   576  071C  3430               	retlw	48	;'0'
   577  071D  3430               	retlw	48	;'0'
   578  071E  3430               	retlw	48	;'0'
   579  071F  3430               	retlw	48	;'0'
   580  0720  3430               	retlw	48	;'0'
   581  0721  3430               	retlw	48	;'0'
   582  0722  3430               	retlw	48	;'0'
   583  0723  3430               	retlw	48	;'0'
   584  0724  3430               	retlw	48	;'0'
   585  0725  3400               	retlw	0
   586                           
   587                           	psect	stringtext2
   588  0000                     __pstringtext2:	
   589                           
   590                           ; #config settings
   591  0000                     
   592                           	psect	cinit
   593  00B1                     start_initialization:	
   594  00B1                     __initialization:	
   595                           
   596                           ; Initialize objects allocated to BANK0
   597  00B1  3187  27CD  3180   	fcall	__pidataBANK0	;fetch initializer
   598  00B4  00DB               	movwf	__pdataBANK0& (0+127)
   599  00B5  3187  27CE  3180   	fcall	__pidataBANK0+1	;fetch initializer
   600  00B8  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   601                           
   602                           ; Initialize objects allocated to BANK1
   603  00B9  30AE               	movlw	low __pidataBANK1
   604  00BA  0084               	movwf	4
   605  00BB  3086               	movlw	(high __pidataBANK1)| (0+128)
   606  00BC  0085               	movwf	5
   607  00BD  30A0               	movlw	low __pdataBANK1
   608  00BE  0086               	movwf	6
   609  00BF  3000               	movlw	high __pdataBANK1
   610  00C0  0087               	movwf	7
   611  00C1  3032               	movlw	50
   612  00C2  3187  27C1  3180   	fcall	init_ram
   613                           
   614                           ; Initialize objects allocated to BANK2
   615  00C5  30EE               	movlw	low __pidataBANK2
   616  00C6  0084               	movwf	4
   617  00C7  3085               	movlw	(high __pidataBANK2)| (0+128)
   618  00C8  0085               	movwf	5
   619  00C9  3020               	movlw	low __pdataBANK2
   620  00CA  0086               	movwf	6
   621  00CB  3001               	movlw	high __pdataBANK2
   622  00CC  0087               	movwf	7
   623  00CD  3048               	movlw	72
   624  00CE  3187  27C1  3180   	fcall	init_ram
   625                           
   626                           ; Initialize objects allocated to BANK3
   627  00D1  3036               	movlw	low __pidataBANK3
   628  00D2  0084               	movwf	4
   629  00D3  3086               	movlw	(high __pidataBANK3)| (0+128)
   630  00D4  0085               	movwf	5
   631  00D5  30A0               	movlw	low __pdataBANK3
   632  00D6  0086               	movwf	6
   633  00D7  3001               	movlw	high __pdataBANK3
   634  00D8  0087               	movwf	7
   635  00D9  3040               	movlw	64
   636  00DA  3187  27C1  3180   	fcall	init_ram
   637                           
   638                           ; Clear objects allocated to COMMON
   639  00DD  01F0               	clrf	__pbssCOMMON& (0+127)
   640  00DE  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   641  00DF  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   642  00E0  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   643  00E1  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   644  00E2  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   645                           
   646                           ; Clear objects allocated to BANK0
   647  00E3  304D               	movlw	low __pbssBANK0
   648  00E4  0084               	movwf	4
   649  00E5  3000               	movlw	high __pbssBANK0
   650  00E6  0085               	movwf	5
   651  00E7  300E               	movlw	14
   652  00E8  3187  27C7  3180   	fcall	clear_ram0
   653                           
   654                           ; Clear objects allocated to BANK1
   655  00EB  30D2               	movlw	low __pbssBANK1
   656  00EC  0084               	movwf	4
   657  00ED  3000               	movlw	high __pbssBANK1
   658  00EE  0085               	movwf	5
   659  00EF  3018               	movlw	24
   660  00F0  3187  27C7         	fcall	clear_ram0
   661  00F2                     end_of_initialization:	
   662                           ;End of C runtime variable initialization code
   663                           
   664  00F2                     __end_of__initialization:	
   665  00F2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   666  00F3  0020               	movlb	0
   667  00F4  3180  28F6         	ljmp	_main	;jump to C main() function
   668                           
   669                           	psect	bssCOMMON
   670  0070                     __pbssCOMMON:	
   671  0070                     _TimerCounter1:	
   672  0070                     	ds	2
   673  0072                     _i:	
   674  0072                     	ds	2
   675  0074                     _curtFlag1:	
   676  0074                     	ds	2
   677                           
   678                           	psect	bssBANK0
   679  004D                     __pbssBANK0:	
   680  004D                     _M3:	
   681  004D                     	ds	2
   682  004F                     _M2:	
   683  004F                     	ds	2
   684  0051                     _M1:	
   685  0051                     	ds	2
   686  0053                     _COPY_FLAG:	
   687  0053                     	ds	2
   688  0055                     _sw:	
   689  0055                     	ds	2
   690  0057                     _k:	
   691  0057                     	ds	2
   692  0059                     _TX_FLAG:	
   693  0059                     	ds	2
   694                           
   695                           	psect	dataBANK0
   696  005B                     __pdataBANK0:	
   697  005B                     _man:	
   698  005B                     	ds	2
   699                           
   700                           	psect	bssBANK1
   701  00D2                     __pbssBANK1:	
   702  00D2                     _TimerCounter2:	
   703  00D2                     	ds	2
   704  00D4                     _M4:	
   705  00D4                     	ds	2
   706  00D6                     _sum:	
   707  00D6                     	ds	2
   708  00D8                     _len1:	
   709  00D8                     	ds	2
   710  00DA                     _len2:	
   711  00DA                     	ds	2
   712  00DC                     _FAN_FLAG:	
   713  00DC                     	ds	2
   714  00DE                     _FAN_SPEED1:	
   715  00DE                     	ds	2
   716  00E0                     _FAN_SPEED:	
   717  00E0                     	ds	2
   718  00E2                     _cnt:	
   719  00E2                     	ds	2
   720  00E4                     _j:	
   721  00E4                     	ds	2
   722  00E6                     _curtFlag:	
   723  00E6                     	ds	2
   724  00E8                     _curtFlag2:	
   725  00E8                     	ds	2
   726                           
   727                           	psect	dataBANK1
   728  00A0                     __pdataBANK1:	
   729  00A0                     _st:	
   730  00A0                     	ds	50
   731                           
   732                           	psect	dataBANK2
   733  0120                     __pdataBANK2:	
   734  0120                     _copy:	
   735  0120                     	ds	36
   736  0144                     _name:	
   737  0144                     	ds	36
   738                           
   739                           	psect	dataBANK3
   740  01A0                     __pdataBANK3:	
   741  01A0                     _child_LOCK:	
   742  01A0                     	ds	64
   743                           
   744                           	psect	inittext
   745  07C1                     init_ram:	
   746  07C1  00FE               	movwf	126
   747  07C2                     initloop:	
   748  07C2  0012               	moviw fsr0++
   749  07C3  001E               	movwi fsr1++
   750  07C4  0BFE               	decfsz	126,f
   751  07C5  2FC2               	goto	initloop
   752  07C6  3400               	retlw	0
   753                           
   754                           	psect	clrtext
   755  07C7                     clear_ram0:	
   756                           ;	Called with FSR0 containing the base address, and
   757                           ;	WREG with the size to clear
   758                           
   759  07C7  0064               	clrwdt	;clear the watchdog before getting into this loop
   760  07C8                     clrloop0:	
   761  07C8  0180               	clrf	0	;clear RAM location pointed to by FSR
   762  07C9  3101               	addfsr 0,1
   763  07CA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   764  07CB  2FC8               	goto	clrloop0	;have we reached the end yet?
   765  07CC  3400               	retlw	0	;all done for this memory range, return
   766                           
   767                           	psect	cstackBANK4
   768  0220                     __pcstackBANK4:	
   769  0220                     main@frame_start:	
   770                           
   771                           ; 2 bytes @ 0x0
   772  0220                     	ds	2
   773  0222                     main@frame_end:	
   774                           
   775                           ; 2 bytes @ 0x2
   776  0222                     	ds	2
   777  0224                     main@cnt1:	
   778                           
   779                           ; 2 bytes @ 0x4
   780  0224                     	ds	2
   781  0226                     main@cnt2:	
   782                           
   783                           ; 2 bytes @ 0x6
   784  0226                     	ds	2
   785  0228                     main@RX_CHK_FLAG_start1:	
   786                           
   787                           ; 2 bytes @ 0x8
   788  0228                     	ds	2
   789  022A                     main@RX_CHK_FLAG_start2:	
   790                           
   791                           ; 2 bytes @ 0xA
   792  022A                     	ds	2
   793  022C                     main@RX_CHK_FLAG_end1:	
   794                           
   795                           ; 2 bytes @ 0xC
   796  022C                     	ds	2
   797  022E                     main@RX_CHK_FLAG_end2:	
   798                           
   799                           ; 2 bytes @ 0xE
   800  022E                     	ds	2
   801  0230                     main@start_flag:	
   802                           
   803                           ; 2 bytes @ 0x10
   804  0230                     	ds	2
   805  0232                     main@end_flag:	
   806                           
   807                           ; 2 bytes @ 0x12
   808  0232                     	ds	2
   809                           
   810                           	psect	cstackCOMMON
   811  0076                     __pcstackCOMMON:	
   812  0076                     ?_isdigit:	
   813  0076                     ?_writeUART:	
   814                           ; 1 bit 
   815                           
   816  0076                     ?_EUSART_Initialize:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0076                     ?_TMR1_Initialize:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0076                     ?_TMR3_Initialize:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0076                     ?_pin_manager:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0076                     ?_isr:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0076                     ?_periperal_init:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0076                     ?_main:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0076                     ?i1_writeUART:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0076                     ??i1_writeUART:	
   841                           ; 1 bytes @ 0x0
   842                           
   843                           
   844                           ; 1 bytes @ 0x0
   845  0076                     	ds	1
   846  0077                     i1writeUART@str2Write:	
   847                           
   848                           ; 1 bytes @ 0x1
   849  0077                     	ds	1
   850  0078                     i1writeUART@Tx_count:	
   851                           
   852                           ; 2 bytes @ 0x2
   853  0078                     	ds	2
   854  007A                     ??_isr:	
   855                           
   856                           ; 1 bytes @ 0x4
   857  007A                     	ds	2
   858                           
   859                           	psect	cstackBANK0
   860  0020                     __pcstackBANK0:	
   861  0020                     ??_writeUART:	
   862  0020                     ??_EUSART_Initialize:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0020                     ??_TMR1_Initialize:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0020                     ??_TMR3_Initialize:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0020                     ??_pin_manager:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0020                     ?_copy_frame:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0020                     ??_isdigit:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0020                     ??_periperal_init:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0020                     ?___wmul:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0020                     _isdigit$642:	
   887                           ; 2 bytes @ 0x0
   888                           
   889  0020                     copy_frame@start:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0020                     ___wmul@multiplier:	
   893                           ; 2 bytes @ 0x0
   894                           
   895                           
   896                           ; 2 bytes @ 0x0
   897  0020                     	ds	1
   898  0021                     isdigit@c:	
   899  0021                     writeUART@Tx_count:	
   900                           ; 1 bytes @ 0x1
   901                           
   902                           
   903                           ; 2 bytes @ 0x1
   904  0021                     	ds	1
   905  0022                     copy_frame@end:	
   906  0022                     ___wmul@multiplicand:	
   907                           ; 2 bytes @ 0x2
   908                           
   909                           
   910                           ; 2 bytes @ 0x2
   911  0022                     	ds	1
   912  0023                     writeUART@str2Write:	
   913                           
   914                           ; 1 bytes @ 0x3
   915  0023                     	ds	1
   916  0024                     ??_copy_frame:	
   917  0024                     ??___wmul:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0024                     ___wmul@product:	
   921                           ; 1 bytes @ 0x4
   922                           
   923                           
   924                           ; 2 bytes @ 0x4
   925  0024                     	ds	2
   926  0026                     ?_atoi:	
   927                           
   928                           ; 2 bytes @ 0x6
   929  0026                     	ds	2
   930  0028                     ??_atoi:	
   931                           
   932                           ; 1 bytes @ 0x8
   933  0028                     	ds	2
   934  002A                     atoi@sign:	
   935                           
   936                           ; 1 bytes @ 0xA
   937  002A                     	ds	1
   938  002B                     atoi@a:	
   939                           
   940                           ; 2 bytes @ 0xB
   941  002B                     	ds	2
   942  002D                     atoi@s:	
   943                           
   944                           ; 1 bytes @ 0xD
   945  002D                     	ds	1
   946  002E                     ?_ACTION:	
   947  002E                     ACTION@Switch_Num_1s:	
   948                           ; 1 bytes @ 0xE
   949                           
   950                           
   951                           ; 1 bytes @ 0xE
   952  002E                     	ds	1
   953  002F                     ACTION@sw_status:	
   954                           
   955                           ; 1 bytes @ 0xF
   956  002F                     	ds	1
   957  0030                     ACTION@speed_bit1:	
   958                           
   959                           ; 1 bytes @ 0x10
   960  0030                     	ds	1
   961  0031                     ACTION@speed_bit2:	
   962                           
   963                           ; 1 bytes @ 0x11
   964  0031                     	ds	1
   965  0032                     ACTION@parent:	
   966                           
   967                           ; 1 bytes @ 0x12
   968  0032                     	ds	1
   969  0033                     ACTION@finalFrameStat:	
   970                           
   971                           ; 1 bytes @ 0x13
   972  0033                     	ds	1
   973  0034                     ??_ACTION:	
   974                           
   975                           ; 1 bytes @ 0x14
   976  0034                     	ds	2
   977  0036                     ACTION@FanSpeed:	
   978                           
   979                           ; 2 bytes @ 0x16
   980  0036                     	ds	2
   981  0038                     ACTION@children:	
   982                           
   983                           ; 2 bytes @ 0x18
   984  0038                     	ds	2
   985  003A                     ACTION@child_lock_num:	
   986                           
   987                           ; 2 bytes @ 0x1A
   988  003A                     	ds	2
   989  003C                     ACTION@Switch_Num_10s:	
   990                           
   991                           ; 1 bytes @ 0x1C
   992  003C                     	ds	1
   993  003D                     ACTION@FanSpeedString:	
   994                           
   995                           ; 2 bytes @ 0x1D
   996  003D                     	ds	2
   997  003F                     ACTION@SwNumString:	
   998                           
   999                           ; 2 bytes @ 0x1F
  1000  003F                     	ds	2
  1001  0041                     ACTION@SwNum:	
  1002                           
  1003                           ; 2 bytes @ 0x21
  1004  0041                     	ds	2
  1005  0043                     ACTION@switch_status:	
  1006                           
  1007                           ; 2 bytes @ 0x23
  1008  0043                     	ds	2
  1009  0045                     ACTION@response_starts:	
  1010                           
  1011                           ; 2 bytes @ 0x25
  1012  0045                     	ds	2
  1013  0047                     ??_main:	
  1014                           
  1015                           ; 1 bytes @ 0x27
  1016  0047                     	ds	6
  1017                           
  1018                           	psect	maintext
  1019  00F6                     __pmaintext:	
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 135 in file "blynd.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  end_flag        2   18[BANK4 ] int 
  1030 ;;  start_flag      2   16[BANK4 ] int 
  1031 ;;  RX_CHK_FLAG_    2   14[BANK4 ] int 
  1032 ;;  RX_CHK_FLAG_    2   12[BANK4 ] int 
  1033 ;;  RX_CHK_FLAG_    2   10[BANK4 ] int 
  1034 ;;  RX_CHK_FLAG_    2    8[BANK4 ] int 
  1035 ;;  cnt2            2    6[BANK4 ] unsigned int 
  1036 ;;  cnt1            2    4[BANK4 ] unsigned int 
  1037 ;;  frame_end       2    2[BANK4 ] unsigned int 
  1038 ;;  frame_start     2    0[BANK4 ] unsigned int 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : B1F/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  1048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  1049 ;;      Locals:         0       0       0       0       0      20       0       0       0       0       0
  1050 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0
  1051 ;;      Totals:         0       6       0       0       0      20       0       0       0       0       0
  1052 ;;Total ram usage:       26 bytes
  1053 ;; Hardware stack levels required when called:    5
  1054 ;; This function calls:
  1055 ;;		_ACTION
  1056 ;;		_copy_frame
  1057 ;;		_periperal_init
  1058 ;;		_pin_manager
  1059 ;;		_writeUART
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           
  1066                           ;psect for function _main
  1067  00F6                     _main:	
  1068                           
  1069                           ;blynd.c: 136: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1070                           
  1071                           ;incstack = 0
  1072                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1073  00F6  3029               	movlw	41
  1074  00F7  0020               	movlb	0	; select bank0
  1075  00F8  00C8               	movwf	??_main+1
  1076  00F9  3096               	movlw	150
  1077  00FA  00C7               	movwf	??_main
  1078  00FB  307F               	movlw	127
  1079  00FC                     u2357:	
  1080  00FC  0B89               	decfsz	9,f
  1081  00FD  28FC               	goto	u2357
  1082  00FE  0BC7               	decfsz	??_main,f
  1083  00FF  28FC               	goto	u2357
  1084  0100  0BC8               	decfsz	??_main+1,f
  1085  0101  28FC               	goto	u2357
  1086                           
  1087                           ;blynd.c: 138: unsigned int frame_start = 0, frame_end = 0,cnt1=0,cnt2=0;
  1088  0102  0024               	movlb	4	; select bank4
  1089  0103  01A0               	clrf	main@frame_start^(0+512)
  1090  0104  01A1               	clrf	(main@frame_start+1)^(0+512)
  1091  0105  01A2               	clrf	main@frame_end^(0+512)
  1092  0106  01A3               	clrf	(main@frame_end+1)^(0+512)
  1093  0107  01A4               	clrf	main@cnt1^(0+512)
  1094  0108  01A5               	clrf	(main@cnt1+1)^(0+512)
  1095  0109  01A6               	clrf	main@cnt2^(0+512)
  1096  010A  01A7               	clrf	(main@cnt2+1)^(0+512)
  1097                           
  1098                           ;blynd.c: 140: int RX_CHK_FLAG_start1 = 0 ,RX_CHK_FLAG_start2 = 0, start_flag=0, RX_CHK_
      +                          FLAG_end1 = 0, RX_CHK_FLAG_end2 = 0, end_flag=0;
  1099  010B  01A8               	clrf	main@RX_CHK_FLAG_start1^(0+512)
  1100  010C  01A9               	clrf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1101  010D  01AA               	clrf	main@RX_CHK_FLAG_start2^(0+512)
  1102  010E  01AB               	clrf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1103  010F  01B0               	clrf	main@start_flag^(0+512)
  1104  0110  01B1               	clrf	(main@start_flag+1)^(0+512)
  1105  0111  01AC               	clrf	main@RX_CHK_FLAG_end1^(0+512)
  1106  0112  01AD               	clrf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1107  0113  01AE               	clrf	main@RX_CHK_FLAG_end2^(0+512)
  1108  0114  01AF               	clrf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1109  0115  01B2               	clrf	main@end_flag^(0+512)
  1110  0116  01B3               	clrf	(main@end_flag+1)^(0+512)
  1111                           
  1112                           ;blynd.c: 142: pin_manager();
  1113  0117  3186  26E0  3180   	fcall	_pin_manager
  1114                           
  1115                           ;blynd.c: 143: periperal_init();
  1116  011A  3187  27B8  3180   	fcall	_periperal_init
  1117                           
  1118                           ;blynd.c: 145: RF1 = 0; RF0 = 0;
  1119  011D  0025               	movlb	5	; select bank5
  1120  011E  108C               	bcf	12,1	;volatile
  1121  011F  100C               	bcf	12,0	;volatile
  1122                           
  1123                           ;blynd.c: 146: M1=1; M2=1; M3=1; M4=1;
  1124  0120  3001               	movlw	1
  1125  0121  0020               	movlb	0	; select bank0
  1126  0122  00D1               	movwf	_M1
  1127  0123  3000               	movlw	0
  1128  0124  00D2               	movwf	_M1+1
  1129  0125  3001               	movlw	1
  1130  0126  00CF               	movwf	_M2
  1131  0127  3000               	movlw	0
  1132  0128  00D0               	movwf	_M2+1
  1133  0129  3001               	movlw	1
  1134  012A  00CD               	movwf	_M3
  1135  012B  3000               	movlw	0
  1136  012C  00CE               	movwf	_M3+1
  1137  012D  3001               	movlw	1
  1138  012E  0021               	movlb	1	; select bank1
  1139  012F  00D4               	movwf	_M4^(0+128)
  1140  0130  3000               	movlw	0
  1141  0131  00D5               	movwf	(_M4^(0+128)+1)
  1142                           
  1143                           ;blynd.c: 147: st[0]='%'; st[10]='@';
  1144  0132  3025               	movlw	37
  1145  0133  0020               	movlb	0	; select bank0
  1146  0134  00C7               	movwf	??_main
  1147  0135  0847               	movf	??_main,w
  1148  0136  0021               	movlb	1	; select bank1
  1149  0137  00A0               	movwf	_st^(0+128)
  1150  0138  3040               	movlw	64
  1151  0139  0020               	movlb	0	; select bank0
  1152  013A  00C7               	movwf	??_main
  1153  013B  0847               	movf	??_main,w
  1154  013C  0021               	movlb	1	; select bank1
  1155  013D  00AA               	movwf	(_st^(0+128)+10)
  1156  013E                     l2275:	
  1157                           ;blynd.c: 149: while(1){
  1158                           
  1159                           
  1160                           ;blynd.c: 150: if(TX_FLAG==1)
  1161  013E  0020               	movlb	0	; select bank0
  1162  013F  0359               	decf	_TX_FLAG,w
  1163  0140  045A               	iorwf	_TX_FLAG+1,w
  1164  0141  1D03               	btfss	3,2
  1165  0142  2AAD               	goto	l2365
  1166                           
  1167                           ;blynd.c: 151: {
  1168                           ;blynd.c: 153: TX_FLAG=0;
  1169  0143  01D9               	clrf	_TX_FLAG
  1170  0144  01DA               	clrf	_TX_FLAG+1
  1171                           
  1172                           ;blynd.c: 154: start_flag = 0;
  1173  0145  0024               	movlb	4	; select bank4
  1174  0146  01B0               	clrf	main@start_flag^(0+512)
  1175  0147  01B1               	clrf	(main@start_flag+1)^(0+512)
  1176                           
  1177                           ;blynd.c: 155: end_flag = 0;
  1178  0148  01B2               	clrf	main@end_flag^(0+512)
  1179  0149  01B3               	clrf	(main@end_flag+1)^(0+512)
  1180                           
  1181                           ;blynd.c: 157: if(name[0]=='%' && name[1]=='%' && name[14]=='@' && name[15]=='@')
  1182  014A  3025               	movlw	37
  1183  014B  0022               	movlb	2	; select bank2
  1184  014C  0644               	xorwf	_name^(0+256),w
  1185  014D  1D03               	btfss	3,2
  1186  014E  2A05               	goto	l2329
  1187  014F  3025               	movlw	37
  1188  0150  0645               	xorwf	(_name^(0+256)+1),w
  1189  0151  1D03               	btfss	3,2
  1190  0152  2A05               	goto	l2329
  1191  0153  3040               	movlw	64
  1192  0154  0652               	xorwf	(_name^(0+256)+14),w
  1193  0155  1D03               	btfss	3,2
  1194  0156  2A05               	goto	l2329
  1195  0157  3040               	movlw	64
  1196  0158  0653               	xorwf	(_name^(0+256)+15),w
  1197  0159  1D03               	btfss	3,2
  1198  015A  2A05               	goto	l2329
  1199                           
  1200                           ;blynd.c: 158: {
  1201                           ;blynd.c: 159: for(k=0;k<16;k++)
  1202  015B  0020               	movlb	0	; select bank0
  1203  015C  01D7               	clrf	_k
  1204  015D  01D8               	clrf	_k+1
  1205  015E                     L3:	
  1206  015E  0858               	movf	_k+1,w
  1207  015F  3A80               	xorlw	128
  1208  0160  00C7               	movwf	??_main
  1209  0161  3080               	movlw	128
  1210  0162  0247               	subwf	??_main,w
  1211  0163  1D03               	skipz
  1212  0164  2967               	goto	u1935
  1213  0165  3010               	movlw	16
  1214  0166  0257               	subwf	_k,w
  1215  0167                     u1935:	
  1216  0167  1803               	btfsc	3,0
  1217  0168  2A57               	goto	l2353
  1218                           
  1219                           ;blynd.c: 160: {
  1220                           ;blynd.c: 161: if(name[k] == '%' && name[k+1] == '%' && start_flag == 0)
  1221  0169  0020               	movlb	0	; select bank0
  1222  016A  0857               	movf	_k,w
  1223  016B  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1224  016C  0086               	movwf	6
  1225  016D  3001               	movlw	1	; select bank2/3
  1226  016E  0087               	movwf	7
  1227  016F  3025               	movlw	37
  1228  0170  0601               	xorwf	1,w
  1229  0171  1D03               	btfss	3,2
  1230  0172  298F               	goto	l2301
  1231  0173  0857               	movf	_k,w
  1232  0174  3E01               	addlw	1
  1233  0175  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1234  0176  0086               	movwf	6
  1235  0177  3001               	movlw	1	; select bank2/3
  1236  0178  0087               	movwf	7
  1237  0179  3025               	movlw	37
  1238  017A  0601               	xorwf	1,w
  1239  017B  1D03               	btfss	3,2
  1240  017C  298F               	goto	l2301
  1241  017D  0024               	movlb	4	; select bank4
  1242  017E  0830               	movf	main@start_flag^(0+512),w
  1243  017F  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1244  0180  1D03               	btfss	3,2
  1245  0181  298F               	goto	l2301
  1246                           
  1247                           ;blynd.c: 162: {
  1248                           ;blynd.c: 163: RX_CHK_FLAG_start1 = k;
  1249  0182  0020               	movlb	0	; select bank0
  1250  0183  0858               	movf	_k+1,w
  1251  0184  0024               	movlb	4	; select bank4
  1252  0185  00A9               	movwf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1253  0186  0020               	movlb	0	; select bank0
  1254  0187  0857               	movf	_k,w
  1255  0188  0024               	movlb	4	; select bank4
  1256  0189  00A8               	movwf	main@RX_CHK_FLAG_start1^(0+512)
  1257                           
  1258                           ;blynd.c: 164: start_flag = 1;
  1259  018A  3001               	movlw	1
  1260  018B  00B0               	movwf	main@start_flag^(0+512)
  1261  018C  3000               	movlw	0
  1262  018D  00B1               	movwf	(main@start_flag^(0+512)+1)
  1263                           
  1264                           ;blynd.c: 165: }
  1265  018E  29FF               	goto	l2327
  1266  018F                     l2301:	
  1267                           
  1268                           ;blynd.c: 166: else if(name[k] == '%' && name[k+1] == '%' && start_flag == 1)
  1269  018F  0020               	movlb	0	; select bank0
  1270  0190  0857               	movf	_k,w
  1271  0191  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1272  0192  0086               	movwf	6
  1273  0193  3001               	movlw	1	; select bank2/3
  1274  0194  0087               	movwf	7
  1275  0195  3025               	movlw	37
  1276  0196  0601               	xorwf	1,w
  1277  0197  1D03               	btfss	3,2
  1278  0198  29B1               	goto	l2309
  1279  0199  0857               	movf	_k,w
  1280  019A  3E01               	addlw	1
  1281  019B  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1282  019C  0086               	movwf	6
  1283  019D  3001               	movlw	1	; select bank2/3
  1284  019E  0087               	movwf	7
  1285  019F  3025               	movlw	37
  1286  01A0  0601               	xorwf	1,w
  1287  01A1  1D03               	btfss	3,2
  1288  01A2  29B1               	goto	l2309
  1289  01A3  0024               	movlb	4	; select bank4
  1290  01A4  0330               	decf	main@start_flag^(0+512),w
  1291  01A5  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1292  01A6  1D03               	btfss	3,2
  1293  01A7  29B1               	goto	l2309
  1294                           
  1295                           ;blynd.c: 167: {
  1296                           ;blynd.c: 168: RX_CHK_FLAG_start2 = k;
  1297  01A8  0020               	movlb	0	; select bank0
  1298  01A9  0858               	movf	_k+1,w
  1299  01AA  0024               	movlb	4	; select bank4
  1300  01AB  00AB               	movwf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1301  01AC  0020               	movlb	0	; select bank0
  1302  01AD  0857               	movf	_k,w
  1303  01AE  0024               	movlb	4	; select bank4
  1304  01AF  00AA               	movwf	main@RX_CHK_FLAG_start2^(0+512)
  1305                           
  1306                           ;blynd.c: 169: }
  1307  01B0  29FF               	goto	l2327
  1308  01B1                     l2309:	
  1309                           
  1310                           ;blynd.c: 170: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 0)
  1311  01B1  0020               	movlb	0	; select bank0
  1312  01B2  0857               	movf	_k,w
  1313  01B3  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1314  01B4  0086               	movwf	6
  1315  01B5  3001               	movlw	1	; select bank2/3
  1316  01B6  0087               	movwf	7
  1317  01B7  3040               	movlw	64
  1318  01B8  0601               	xorwf	1,w
  1319  01B9  1D03               	btfss	3,2
  1320  01BA  29D8               	goto	l2319
  1321  01BB  0857               	movf	_k,w
  1322  01BC  3E01               	addlw	1
  1323  01BD  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1324  01BE  0086               	movwf	6
  1325  01BF  3001               	movlw	1	; select bank2/3
  1326  01C0  0087               	movwf	7
  1327  01C1  3040               	movlw	64
  1328  01C2  0601               	xorwf	1,w
  1329  01C3  1D03               	btfss	3,2
  1330  01C4  29D8               	goto	l2319
  1331  01C5  0024               	movlb	4	; select bank4
  1332  01C6  0832               	movf	main@end_flag^(0+512),w
  1333  01C7  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1334  01C8  1D03               	btfss	3,2
  1335  01C9  29D8               	goto	l2319
  1336                           
  1337                           ;blynd.c: 171: {
  1338                           ;blynd.c: 172: RX_CHK_FLAG_end1 = k;
  1339  01CA  0020               	movlb	0	; select bank0
  1340  01CB  0858               	movf	_k+1,w
  1341  01CC  0024               	movlb	4	; select bank4
  1342  01CD  00AD               	movwf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1343  01CE  0020               	movlb	0	; select bank0
  1344  01CF  0857               	movf	_k,w
  1345  01D0  0024               	movlb	4	; select bank4
  1346  01D1  00AC               	movwf	main@RX_CHK_FLAG_end1^(0+512)
  1347                           
  1348                           ;blynd.c: 173: end_flag = 1;
  1349  01D2  3001               	movlw	1
  1350  01D3  00B2               	movwf	main@end_flag^(0+512)
  1351  01D4  3000               	movlw	0
  1352  01D5  00B3               	movwf	(main@end_flag^(0+512)+1)
  1353                           
  1354                           ;blynd.c: 174: COPY_FLAG=1;
  1355  01D6  3001               	movlw	1
  1356  01D7  29FA               	goto	L1
  1357  01D8                     l2319:	
  1358                           ;blynd.c: 176: }
  1359                           
  1360                           ;blynd.c: 175: break;
  1361                           
  1362                           
  1363                           ;blynd.c: 177: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 1)
  1364  01D8  0020               	movlb	0	; select bank0
  1365  01D9  0857               	movf	_k,w
  1366  01DA  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1367  01DB  0086               	movwf	6
  1368  01DC  3001               	movlw	1	; select bank2/3
  1369  01DD  0087               	movwf	7
  1370  01DE  3040               	movlw	64
  1371  01DF  0601               	xorwf	1,w
  1372  01E0  1D03               	btfss	3,2
  1373  01E1  29FF               	goto	l2327
  1374  01E2  0857               	movf	_k,w
  1375  01E3  3E01               	addlw	1
  1376  01E4  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1377  01E5  0086               	movwf	6
  1378  01E6  3001               	movlw	1	; select bank2/3
  1379  01E7  0087               	movwf	7
  1380  01E8  3040               	movlw	64
  1381  01E9  0601               	xorwf	1,w
  1382  01EA  1D03               	btfss	3,2
  1383  01EB  29FF               	goto	l2327
  1384  01EC  0024               	movlb	4	; select bank4
  1385  01ED  0332               	decf	main@end_flag^(0+512),w
  1386  01EE  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1387  01EF  1D03               	btfss	3,2
  1388  01F0  29FF               	goto	l2327
  1389                           
  1390                           ;blynd.c: 178: {
  1391                           ;blynd.c: 179: RX_CHK_FLAG_end2 = k;
  1392  01F1  0020               	movlb	0	; select bank0
  1393  01F2  0858               	movf	_k+1,w
  1394  01F3  0024               	movlb	4	; select bank4
  1395  01F4  00AF               	movwf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1396  01F5  0020               	movlb	0	; select bank0
  1397  01F6  0857               	movf	_k,w
  1398  01F7  0024               	movlb	4	; select bank4
  1399  01F8  00AE               	movwf	main@RX_CHK_FLAG_end2^(0+512)
  1400                           
  1401                           ;blynd.c: 180: COPY_FLAG=2;
  1402  01F9  3002               	movlw	2
  1403  01FA                     L1:	
  1404  01FA  0020               	movlb	0	; select bank0
  1405  01FB  00D3               	movwf	_COPY_FLAG
  1406  01FC  3000               	movlw	0
  1407  01FD  00D4               	movwf	_COPY_FLAG+1
  1408                           
  1409                           ;blynd.c: 181: break;
  1410  01FE  2A57               	goto	l2353
  1411  01FF                     l2327:	
  1412  01FF  3001               	movlw	1
  1413  0200  0020               	movlb	0	; select bank0
  1414  0201  07D7               	addwf	_k,f
  1415  0202  3000               	movlw	0
  1416  0203  3DD8               	addwfc	_k+1,f
  1417  0204  295E               	goto	L3
  1418  0205                     l2329:	
  1419                           ;blynd.c: 182: }
  1420                           ;blynd.c: 183: }
  1421                           ;blynd.c: 184: }
  1422                           
  1423                           
  1424                           ;blynd.c: 185: else
  1425                           ;blynd.c: 186: {
  1426                           ;blynd.c: 187: _delay((unsigned long)((10)*(16000000/4000.0))); TX1REG='P'; _delay((unsi
      +                          gned long)((1)*(16000000/4000.0))); TX1REG='K'; _delay((unsigned long)((1)*(16000000/400
      +                          0.0)));
  1427  0205  3034               	movlw	52
  1428  0206  0020               	movlb	0	; select bank0
  1429  0207  00C7               	movwf	??_main
  1430  0208  30F1               	movlw	241
  1431  0209                     u2367:	
  1432  0209  0B89               	decfsz	9,f
  1433  020A  2A09               	goto	u2367
  1434  020B  0BC7               	decfsz	??_main,f
  1435  020C  2A09               	goto	u2367
  1436  020D  3200               	nop2
  1437  020E  3050               	movlw	80
  1438  020F  0023               	movlb	3	; select bank3
  1439  0210  009A               	movwf	26	;volatile
  1440  0211  3006               	movlw	6
  1441  0212  0020               	movlb	0	; select bank0
  1442  0213  00C7               	movwf	??_main
  1443  0214  3030               	movlw	48
  1444  0215                     u2377:	
  1445  0215  0B89               	decfsz	9,f
  1446  0216  2A15               	goto	u2377
  1447  0217  0BC7               	decfsz	??_main,f
  1448  0218  2A15               	goto	u2377
  1449  0219  0000               	nop
  1450  021A  304B               	movlw	75
  1451  021B  0023               	movlb	3	; select bank3
  1452  021C  009A               	movwf	26	;volatile
  1453  021D  3006               	movlw	6
  1454  021E  0020               	movlb	0	; select bank0
  1455  021F  00C7               	movwf	??_main
  1456  0220  3030               	movlw	48
  1457  0221                     u2387:	
  1458  0221  0B89               	decfsz	9,f
  1459  0222  2A21               	goto	u2387
  1460  0223  0BC7               	decfsz	??_main,f
  1461  0224  2A21               	goto	u2387
  1462  0225  0000               	nop
  1463                           
  1464                           ;blynd.c: 188: i=0;
  1465  0226  01F2               	clrf	_i
  1466  0227  01F3               	clrf	_i+1
  1467                           
  1468                           ;blynd.c: 189: RC1STAbits.SPEN=0; RC1STAbits.SPEN=1;
  1469  0228  0023               	movlb	3	; select bank3
  1470  0229  139D               	bcf	29,7	;volatile
  1471  022A  179D               	bsf	29,7	;volatile
  1472                           
  1473                           ;blynd.c: 190: sw=0;
  1474  022B  0020               	movlb	0	; select bank0
  1475  022C  01D5               	clrf	_sw
  1476  022D  01D6               	clrf	_sw+1
  1477                           
  1478                           ;blynd.c: 191: for(k = 0; k< 15; k++)
  1479  022E  01D7               	clrf	_k
  1480  022F  01D8               	clrf	_k+1
  1481  0230  0858               	movf	_k+1,w
  1482  0231  3A80               	xorlw	128
  1483  0232  00C7               	movwf	??_main
  1484  0233  3080               	movlw	128
  1485  0234  0247               	subwf	??_main,w
  1486  0235  1D03               	skipz
  1487  0236  2A39               	goto	u2075
  1488  0237  300F               	movlw	15
  1489  0238  0257               	subwf	_k,w
  1490  0239                     u2075:	
  1491  0239  1803               	btfsc	3,0
  1492  023A  2A54               	goto	l2351
  1493  023B                     l2345:	
  1494                           
  1495                           ;blynd.c: 192: {
  1496                           ;blynd.c: 193: name[k] = '#';
  1497  023B  3023               	movlw	35
  1498  023C  0020               	movlb	0	; select bank0
  1499  023D  00C7               	movwf	??_main
  1500  023E  0857               	movf	_k,w
  1501  023F  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1502  0240  0086               	movwf	6
  1503  0241  3001               	movlw	1	; select bank2/3
  1504  0242  0087               	movwf	7
  1505  0243  0847               	movf	??_main,w
  1506  0244  0081               	movwf	1
  1507  0245  3001               	movlw	1
  1508  0246  07D7               	addwf	_k,f
  1509  0247  3000               	movlw	0
  1510  0248  3DD8               	addwfc	_k+1,f
  1511  0249  0858               	movf	_k+1,w
  1512  024A  3A80               	xorlw	128
  1513  024B  00C7               	movwf	??_main
  1514  024C  3080               	movlw	128
  1515  024D  0247               	subwf	??_main,w
  1516  024E  1D03               	skipz
  1517  024F  2A52               	goto	u2085
  1518  0250  300F               	movlw	15
  1519  0251  0257               	subwf	_k,w
  1520  0252                     u2085:	
  1521  0252  1C03               	skipc
  1522  0253  2A3B               	goto	l2345
  1523  0254                     l2351:	
  1524                           
  1525                           ;blynd.c: 194: }
  1526                           ;blynd.c: 195: COPY_FLAG=0;
  1527  0254  0020               	movlb	0	; select bank0
  1528  0255  01D3               	clrf	_COPY_FLAG
  1529  0256  01D4               	clrf	_COPY_FLAG+1
  1530  0257                     l2353:	
  1531                           
  1532                           ;blynd.c: 196: }
  1533                           ;blynd.c: 199: if(COPY_FLAG==1)
  1534  0257  0020               	movlb	0	; select bank0
  1535  0258  0353               	decf	_COPY_FLAG,w
  1536  0259  0454               	iorwf	_COPY_FLAG+1,w
  1537  025A  1D03               	btfss	3,2
  1538  025B  2A6B               	goto	l2359
  1539                           
  1540                           ;blynd.c: 200: {
  1541                           ;blynd.c: 201: copy_frame(RX_CHK_FLAG_start1,RX_CHK_FLAG_end1);
  1542  025C  0024               	movlb	4	; select bank4
  1543  025D  0829               	movf	(main@RX_CHK_FLAG_start1+1)^(0+512),w
  1544  025E  0020               	movlb	0	; select bank0
  1545  025F  00A1               	movwf	copy_frame@start+1
  1546  0260  0024               	movlb	4	; select bank4
  1547  0261  0828               	movf	main@RX_CHK_FLAG_start1^(0+512),w
  1548  0262  0020               	movlb	0	; select bank0
  1549  0263  00A0               	movwf	copy_frame@start
  1550  0264  0024               	movlb	4	; select bank4
  1551  0265  082D               	movf	(main@RX_CHK_FLAG_end1+1)^(0+512),w
  1552  0266  0020               	movlb	0	; select bank0
  1553  0267  00A3               	movwf	copy_frame@end+1
  1554  0268  0024               	movlb	4	; select bank4
  1555  0269  082C               	movf	main@RX_CHK_FLAG_end1^(0+512),w
  1556  026A  2A7F               	goto	L2
  1557  026B                     l2359:	
  1558                           ;blynd.c: 205: }
  1559                           
  1560                           ;blynd.c: 204: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1561                           
  1562                           
  1563                           ;blynd.c: 206: else if(COPY_FLAG==2)
  1564  026B  3002               	movlw	2
  1565  026C  0020               	movlb	0	; select bank0
  1566  026D  0653               	xorwf	_COPY_FLAG,w
  1567  026E  0454               	iorwf	_COPY_FLAG+1,w
  1568  026F  1D03               	btfss	3,2
  1569  0270  2AAD               	goto	l2365
  1570                           
  1571                           ;blynd.c: 207: {
  1572                           ;blynd.c: 208: copy_frame(RX_CHK_FLAG_start2,RX_CHK_FLAG_end2);
  1573  0271  0024               	movlb	4	; select bank4
  1574  0272  082B               	movf	(main@RX_CHK_FLAG_start2+1)^(0+512),w
  1575  0273  0020               	movlb	0	; select bank0
  1576  0274  00A1               	movwf	copy_frame@start+1
  1577  0275  0024               	movlb	4	; select bank4
  1578  0276  082A               	movf	main@RX_CHK_FLAG_start2^(0+512),w
  1579  0277  0020               	movlb	0	; select bank0
  1580  0278  00A0               	movwf	copy_frame@start
  1581  0279  0024               	movlb	4	; select bank4
  1582  027A  082F               	movf	(main@RX_CHK_FLAG_end2+1)^(0+512),w
  1583  027B  0020               	movlb	0	; select bank0
  1584  027C  00A3               	movwf	copy_frame@end+1
  1585  027D  0024               	movlb	4	; select bank4
  1586  027E  082E               	movf	main@RX_CHK_FLAG_end2^(0+512),w
  1587  027F                     L2:	
  1588  027F  0020               	movlb	0	; select bank0
  1589  0280  00A2               	movwf	copy_frame@end
  1590  0281  3186  2676  3180   	fcall	_copy_frame
  1591                           
  1592                           ;blynd.c: 209: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1593  0284  0022               	movlb	2	; select bank2
  1594  0285  0823               	movf	(_copy^(0+256)+3),w
  1595  0286  0020               	movlb	0	; select bank0
  1596  0287  00C7               	movwf	??_main
  1597  0288  0847               	movf	??_main,w
  1598  0289  00AE               	movwf	ACTION@Switch_Num_1s
  1599  028A  0022               	movlb	2	; select bank2
  1600  028B  0824               	movf	(_copy^(0+256)+4),w
  1601  028C  0020               	movlb	0	; select bank0
  1602  028D  00C8               	movwf	??_main+1
  1603  028E  0848               	movf	??_main+1,w
  1604  028F  00AF               	movwf	ACTION@sw_status
  1605  0290  0022               	movlb	2	; select bank2
  1606  0291  0825               	movf	(_copy^(0+256)+5),w
  1607  0292  0020               	movlb	0	; select bank0
  1608  0293  00C9               	movwf	??_main+2
  1609  0294  0849               	movf	??_main+2,w
  1610  0295  00B0               	movwf	ACTION@speed_bit1
  1611  0296  0022               	movlb	2	; select bank2
  1612  0297  0826               	movf	(_copy^(0+256)+6),w
  1613  0298  0020               	movlb	0	; select bank0
  1614  0299  00CA               	movwf	??_main+3
  1615  029A  084A               	movf	??_main+3,w
  1616  029B  00B1               	movwf	ACTION@speed_bit2
  1617  029C  0022               	movlb	2	; select bank2
  1618  029D  0827               	movf	(_copy^(0+256)+7),w
  1619  029E  0020               	movlb	0	; select bank0
  1620  029F  00CB               	movwf	??_main+4
  1621  02A0  084B               	movf	??_main+4,w
  1622  02A1  00B2               	movwf	ACTION@parent
  1623  02A2  0022               	movlb	2	; select bank2
  1624  02A3  0828               	movf	(_copy^(0+256)+8),w
  1625  02A4  0020               	movlb	0	; select bank0
  1626  02A5  00CC               	movwf	??_main+5
  1627  02A6  084C               	movf	??_main+5,w
  1628  02A7  00B3               	movwf	ACTION@finalFrameStat
  1629  02A8  0022               	movlb	2	; select bank2
  1630  02A9  0822               	movf	(_copy^(0+256)+2),w
  1631  02AA  3184  244E  3180   	fcall	_ACTION
  1632  02AD                     l2365:	
  1633                           
  1634                           ;blynd.c: 211: }
  1635                           ;blynd.c: 213: }
  1636                           ;blynd.c: 218: if(child_LOCK[1]==0 && RF7==0 && M1==0)
  1637  02AD  0023               	movlb	3	; select bank3
  1638  02AE  0822               	movf	(_child_LOCK^(0+384)+2),w
  1639  02AF  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1640  02B0  1D03               	btfss	3,2
  1641  02B1  2AE9               	goto	l2389
  1642  02B2  0025               	movlb	5	; select bank5
  1643  02B3  1B8C               	btfsc	12,7	;volatile
  1644  02B4  2AE9               	goto	l2389
  1645  02B5  0020               	movlb	0	; select bank0
  1646  02B6  0851               	movf	_M1,w
  1647  02B7  0452               	iorwf	_M1+1,w
  1648  02B8  1D03               	btfss	3,2
  1649  02B9  2AE9               	goto	l2389
  1650                           
  1651                           ;blynd.c: 219: {
  1652                           ;blynd.c: 220: if(man==1)
  1653  02BA  035B               	decf	_man,w
  1654  02BB  045C               	iorwf	_man+1,w
  1655  02BC  1D03               	btfss	3,2
  1656  02BD  2AE0               	goto	l2385
  1657                           
  1658                           ;blynd.c: 221: {
  1659                           ;blynd.c: 222: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1660  02BE  3052               	movlw	82
  1661  02BF  00C7               	movwf	??_main
  1662  02C0  0847               	movf	??_main,w
  1663  02C1  0021               	movlb	1	; select bank1
  1664  02C2  00A1               	movwf	(_st^(0+128)+1)
  1665  02C3  3030               	movlw	48
  1666  02C4  0020               	movlb	0	; select bank0
  1667  02C5  00C7               	movwf	??_main
  1668  02C6  0847               	movf	??_main,w
  1669  02C7  0021               	movlb	1	; select bank1
  1670  02C8  00A2               	movwf	(_st^(0+128)+2)
  1671  02C9  3030               	movlw	48
  1672  02CA  0020               	movlb	0	; select bank0
  1673  02CB  00C7               	movwf	??_main
  1674  02CC  0847               	movf	??_main,w
  1675  02CD  0021               	movlb	1	; select bank1
  1676  02CE  00A3               	movwf	(_st^(0+128)+3)
  1677  02CF  3031               	movlw	49
  1678  02D0  0020               	movlb	0	; select bank0
  1679  02D1  00C7               	movwf	??_main
  1680  02D2  0847               	movf	??_main,w
  1681  02D3  0021               	movlb	1	; select bank1
  1682  02D4  00A4               	movwf	(_st^(0+128)+4)
  1683  02D5  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1684  02D6  3187  2726  3180   	fcall	_writeUART
  1685                           
  1686                           ;blynd.c: 223: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1687  02D9  0025               	movlb	5	; select bank5
  1688  02DA  100C               	bcf	12,0	;volatile
  1689  02DB  108C               	bcf	12,1	;volatile
  1690  02DC  01F4               	clrf	_curtFlag1
  1691  02DD  01F5               	clrf	_curtFlag1+1
  1692  02DE  01F0               	clrf	_TimerCounter1
  1693  02DF  01F1               	clrf	_TimerCounter1+1
  1694  02E0                     l2385:	
  1695                           
  1696                           ;blynd.c: 224: }
  1697                           ;blynd.c: 225: M1=1; man=1;
  1698  02E0  3001               	movlw	1
  1699  02E1  0020               	movlb	0	; select bank0
  1700  02E2  00D1               	movwf	_M1
  1701  02E3  3000               	movlw	0
  1702  02E4  00D2               	movwf	_M1+1
  1703  02E5  3001               	movlw	1
  1704  02E6  00DB               	movwf	_man
  1705  02E7  3000               	movlw	0
  1706  02E8  00DC               	movwf	_man+1
  1707  02E9                     l2389:	
  1708                           
  1709                           ;blynd.c: 226: }
  1710                           ;blynd.c: 228: if(child_LOCK[1]==0 && RF7==1 && M1==1)
  1711  02E9  0023               	movlb	3	; select bank3
  1712  02EA  0822               	movf	(_child_LOCK^(0+384)+2),w
  1713  02EB  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1714  02EC  1D03               	btfss	3,2
  1715  02ED  2B48               	goto	l2427
  1716  02EE  0025               	movlb	5	; select bank5
  1717  02EF  1F8C               	btfss	12,7	;volatile
  1718  02F0  2B48               	goto	l2427
  1719  02F1  0020               	movlb	0	; select bank0
  1720  02F2  0351               	decf	_M1,w
  1721  02F3  0452               	iorwf	_M1+1,w
  1722  02F4  1D03               	btfss	3,2
  1723  02F5  2B48               	goto	l2427
  1724                           
  1725                           ;blynd.c: 229: {
  1726                           ;blynd.c: 230: if(man==1)
  1727  02F6  035B               	decf	_man,w
  1728  02F7  045C               	iorwf	_man+1,w
  1729  02F8  1D03               	btfss	3,2
  1730  02F9  2B42               	goto	l2425
  1731                           
  1732                           ;blynd.c: 231: {
  1733                           ;blynd.c: 232: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1734  02FA  3052               	movlw	82
  1735  02FB  00C7               	movwf	??_main
  1736  02FC  0847               	movf	??_main,w
  1737  02FD  0021               	movlb	1	; select bank1
  1738  02FE  00A5               	movwf	(_st^(0+128)+5)
  1739  02FF  3030               	movlw	48
  1740  0300  0020               	movlb	0	; select bank0
  1741  0301  00C7               	movwf	??_main
  1742  0302  0847               	movf	??_main,w
  1743  0303  0021               	movlb	1	; select bank1
  1744  0304  00A6               	movwf	(_st^(0+128)+6)
  1745  0305  3030               	movlw	48
  1746  0306  0020               	movlb	0	; select bank0
  1747  0307  00C7               	movwf	??_main
  1748  0308  0847               	movf	??_main,w
  1749  0309  0021               	movlb	1	; select bank1
  1750  030A  00A7               	movwf	(_st^(0+128)+7)
  1751  030B  3032               	movlw	50
  1752  030C  0020               	movlb	0	; select bank0
  1753  030D  00C7               	movwf	??_main
  1754  030E  0847               	movf	??_main,w
  1755  030F  0021               	movlb	1	; select bank1
  1756  0310  00A8               	movwf	(_st^(0+128)+8)
  1757  0311  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1758  0312  3187  2726  3180   	fcall	_writeUART
  1759                           
  1760                           ;blynd.c: 233: RF0=0;
  1761  0315  0025               	movlb	5	; select bank5
  1762  0316  100C               	bcf	12,0	;volatile
  1763                           
  1764                           ;blynd.c: 234: st[1]='R'; st[2]='1'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1765  0317  3052               	movlw	82
  1766  0318  0020               	movlb	0	; select bank0
  1767  0319  00C7               	movwf	??_main
  1768  031A  0847               	movf	??_main,w
  1769  031B  0021               	movlb	1	; select bank1
  1770  031C  00A1               	movwf	(_st^(0+128)+1)
  1771  031D  3031               	movlw	49
  1772  031E  0020               	movlb	0	; select bank0
  1773  031F  00C7               	movwf	??_main
  1774  0320  0847               	movf	??_main,w
  1775  0321  0021               	movlb	1	; select bank1
  1776  0322  00A2               	movwf	(_st^(0+128)+2)
  1777  0323  3030               	movlw	48
  1778  0324  0020               	movlb	0	; select bank0
  1779  0325  00C7               	movwf	??_main
  1780  0326  0847               	movf	??_main,w
  1781  0327  0021               	movlb	1	; select bank1
  1782  0328  00A3               	movwf	(_st^(0+128)+3)
  1783  0329  3031               	movlw	49
  1784  032A  0020               	movlb	0	; select bank0
  1785  032B  00C7               	movwf	??_main
  1786  032C  0847               	movf	??_main,w
  1787  032D  0021               	movlb	1	; select bank1
  1788  032E  00A4               	movwf	(_st^(0+128)+4)
  1789  032F  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1790  0330  3187  2726  3180   	fcall	_writeUART
  1791                           
  1792                           ;blynd.c: 235: RF1=1; curtFlag1=1; TimerCounter1=0;
  1793  0333  0025               	movlb	5	; select bank5
  1794  0334  148C               	bsf	12,1	;volatile
  1795  0335  3001               	movlw	1
  1796  0336  00F4               	movwf	_curtFlag1
  1797  0337  3000               	movlw	0
  1798  0338  00F5               	movwf	_curtFlag1+1
  1799  0339  01F0               	clrf	_TimerCounter1
  1800  033A  01F1               	clrf	_TimerCounter1+1
  1801                           
  1802                           ;blynd.c: 236: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1803  033B  300B               	movlw	11
  1804  033C  0020               	movlb	0	; select bank0
  1805  033D  0097               	movwf	23	;volatile
  1806  033E  30DC               	movlw	220
  1807  033F  0096               	movwf	22	;volatile
  1808  0340  1011               	bcf	17,0	;volatile
  1809  0341  1418               	bsf	24,0	;volatile
  1810  0342                     l2425:	
  1811                           
  1812                           ;blynd.c: 237: }
  1813                           ;blynd.c: 238: M1=0; man=1;
  1814  0342  01D1               	clrf	_M1
  1815  0343  01D2               	clrf	_M1+1
  1816  0344  3001               	movlw	1
  1817  0345  00DB               	movwf	_man
  1818  0346  3000               	movlw	0
  1819  0347  00DC               	movwf	_man+1
  1820  0348                     l2427:	
  1821                           
  1822                           ;blynd.c: 239: }
  1823                           ;blynd.c: 242: if(child_LOCK[3]==0 && RF5==0 && M2==0)
  1824  0348  0023               	movlb	3	; select bank3
  1825  0349  0826               	movf	(_child_LOCK^(0+384)+6),w
  1826  034A  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1827  034B  1D03               	btfss	3,2
  1828  034C  2B84               	goto	l2451
  1829  034D  0025               	movlb	5	; select bank5
  1830  034E  1A8C               	btfsc	12,5	;volatile
  1831  034F  2B84               	goto	l2451
  1832  0350  0020               	movlb	0	; select bank0
  1833  0351  084F               	movf	_M2,w
  1834  0352  0450               	iorwf	_M2+1,w
  1835  0353  1D03               	btfss	3,2
  1836  0354  2B84               	goto	l2451
  1837                           
  1838                           ;blynd.c: 243: {
  1839                           ;blynd.c: 244: if(man==1){
  1840  0355  035B               	decf	_man,w
  1841  0356  045C               	iorwf	_man+1,w
  1842  0357  1D03               	btfss	3,2
  1843  0358  2B7B               	goto	l2447
  1844                           
  1845                           ;blynd.c: 245: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2';
  1846  0359  3052               	movlw	82
  1847  035A  00C7               	movwf	??_main
  1848  035B  0847               	movf	??_main,w
  1849  035C  0021               	movlb	1	; select bank1
  1850  035D  00A5               	movwf	(_st^(0+128)+5)
  1851  035E  3030               	movlw	48
  1852  035F  0020               	movlb	0	; select bank0
  1853  0360  00C7               	movwf	??_main
  1854  0361  0847               	movf	??_main,w
  1855  0362  0021               	movlb	1	; select bank1
  1856  0363  00A6               	movwf	(_st^(0+128)+6)
  1857  0364  3030               	movlw	48
  1858  0365  0020               	movlb	0	; select bank0
  1859  0366  00C7               	movwf	??_main
  1860  0367  0847               	movf	??_main,w
  1861  0368  0021               	movlb	1	; select bank1
  1862  0369  00A7               	movwf	(_st^(0+128)+7)
  1863  036A  3032               	movlw	50
  1864  036B  0020               	movlb	0	; select bank0
  1865  036C  00C7               	movwf	??_main
  1866  036D  0847               	movf	??_main,w
  1867  036E  0021               	movlb	1	; select bank1
  1868  036F  00A8               	movwf	(_st^(0+128)+8)
  1869                           
  1870                           ;blynd.c: 246: writeUART(st+5);
  1871  0370  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1872  0371  3187  2726  3180   	fcall	_writeUART
  1873                           
  1874                           ;blynd.c: 247: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1875  0374  0025               	movlb	5	; select bank5
  1876  0375  100C               	bcf	12,0	;volatile
  1877  0376  108C               	bcf	12,1	;volatile
  1878  0377  01F4               	clrf	_curtFlag1
  1879  0378  01F5               	clrf	_curtFlag1+1
  1880  0379  01F0               	clrf	_TimerCounter1
  1881  037A  01F1               	clrf	_TimerCounter1+1
  1882  037B                     l2447:	
  1883                           
  1884                           ;blynd.c: 248: }
  1885                           ;blynd.c: 249: M2=1; man=1;
  1886  037B  3001               	movlw	1
  1887  037C  0020               	movlb	0	; select bank0
  1888  037D  00CF               	movwf	_M2
  1889  037E  3000               	movlw	0
  1890  037F  00D0               	movwf	_M2+1
  1891  0380  3001               	movlw	1
  1892  0381  00DB               	movwf	_man
  1893  0382  3000               	movlw	0
  1894  0383  00DC               	movwf	_man+1
  1895  0384                     l2451:	
  1896                           
  1897                           ;blynd.c: 250: }
  1898                           ;blynd.c: 252: if(child_LOCK[3]==0 && RF5==1 && M2==1)
  1899  0384  0023               	movlb	3	; select bank3
  1900  0385  0826               	movf	(_child_LOCK^(0+384)+6),w
  1901  0386  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1902  0387  1D03               	btfss	3,2
  1903  0388  2BE3               	goto	l2489
  1904  0389  0025               	movlb	5	; select bank5
  1905  038A  1E8C               	btfss	12,5	;volatile
  1906  038B  2BE3               	goto	l2489
  1907  038C  0020               	movlb	0	; select bank0
  1908  038D  034F               	decf	_M2,w
  1909  038E  0450               	iorwf	_M2+1,w
  1910  038F  1D03               	btfss	3,2
  1911  0390  2BE3               	goto	l2489
  1912                           
  1913                           ;blynd.c: 253: {
  1914                           ;blynd.c: 254: if(man==1){
  1915  0391  035B               	decf	_man,w
  1916  0392  045C               	iorwf	_man+1,w
  1917  0393  1D03               	btfss	3,2
  1918  0394  2BDD               	goto	l2487
  1919                           
  1920                           ;blynd.c: 255: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1921  0395  3052               	movlw	82
  1922  0396  00C7               	movwf	??_main
  1923  0397  0847               	movf	??_main,w
  1924  0398  0021               	movlb	1	; select bank1
  1925  0399  00A1               	movwf	(_st^(0+128)+1)
  1926  039A  3030               	movlw	48
  1927  039B  0020               	movlb	0	; select bank0
  1928  039C  00C7               	movwf	??_main
  1929  039D  0847               	movf	??_main,w
  1930  039E  0021               	movlb	1	; select bank1
  1931  039F  00A2               	movwf	(_st^(0+128)+2)
  1932  03A0  3030               	movlw	48
  1933  03A1  0020               	movlb	0	; select bank0
  1934  03A2  00C7               	movwf	??_main
  1935  03A3  0847               	movf	??_main,w
  1936  03A4  0021               	movlb	1	; select bank1
  1937  03A5  00A3               	movwf	(_st^(0+128)+3)
  1938  03A6  3031               	movlw	49
  1939  03A7  0020               	movlb	0	; select bank0
  1940  03A8  00C7               	movwf	??_main
  1941  03A9  0847               	movf	??_main,w
  1942  03AA  0021               	movlb	1	; select bank1
  1943  03AB  00A4               	movwf	(_st^(0+128)+4)
  1944  03AC  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1945  03AD  3187  2726  3180   	fcall	_writeUART
  1946                           
  1947                           ;blynd.c: 256: RF1=0;
  1948  03B0  0025               	movlb	5	; select bank5
  1949  03B1  108C               	bcf	12,1	;volatile
  1950                           
  1951                           ;blynd.c: 257: st[5]='R'; st[6]='1'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1952  03B2  3052               	movlw	82
  1953  03B3  0020               	movlb	0	; select bank0
  1954  03B4  00C7               	movwf	??_main
  1955  03B5  0847               	movf	??_main,w
  1956  03B6  0021               	movlb	1	; select bank1
  1957  03B7  00A5               	movwf	(_st^(0+128)+5)
  1958  03B8  3031               	movlw	49
  1959  03B9  0020               	movlb	0	; select bank0
  1960  03BA  00C7               	movwf	??_main
  1961  03BB  0847               	movf	??_main,w
  1962  03BC  0021               	movlb	1	; select bank1
  1963  03BD  00A6               	movwf	(_st^(0+128)+6)
  1964  03BE  3030               	movlw	48
  1965  03BF  0020               	movlb	0	; select bank0
  1966  03C0  00C7               	movwf	??_main
  1967  03C1  0847               	movf	??_main,w
  1968  03C2  0021               	movlb	1	; select bank1
  1969  03C3  00A7               	movwf	(_st^(0+128)+7)
  1970  03C4  3032               	movlw	50
  1971  03C5  0020               	movlb	0	; select bank0
  1972  03C6  00C7               	movwf	??_main
  1973  03C7  0847               	movf	??_main,w
  1974  03C8  0021               	movlb	1	; select bank1
  1975  03C9  00A8               	movwf	(_st^(0+128)+8)
  1976  03CA  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1977  03CB  3187  2726  3180   	fcall	_writeUART
  1978                           
  1979                           ;blynd.c: 258: RF0=1; curtFlag1=1; TimerCounter1=0;
  1980  03CE  0025               	movlb	5	; select bank5
  1981  03CF  140C               	bsf	12,0	;volatile
  1982  03D0  3001               	movlw	1
  1983  03D1  00F4               	movwf	_curtFlag1
  1984  03D2  3000               	movlw	0
  1985  03D3  00F5               	movwf	_curtFlag1+1
  1986  03D4  01F0               	clrf	_TimerCounter1
  1987  03D5  01F1               	clrf	_TimerCounter1+1
  1988                           
  1989                           ;blynd.c: 259: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1990  03D6  300B               	movlw	11
  1991  03D7  0020               	movlb	0	; select bank0
  1992  03D8  0097               	movwf	23	;volatile
  1993  03D9  30DC               	movlw	220
  1994  03DA  0096               	movwf	22	;volatile
  1995  03DB  1011               	bcf	17,0	;volatile
  1996  03DC  1418               	bsf	24,0	;volatile
  1997  03DD                     l2487:	
  1998                           
  1999                           ;blynd.c: 260: }
  2000                           ;blynd.c: 261: M2=0; man=1;
  2001  03DD  01CF               	clrf	_M2
  2002  03DE  01D0               	clrf	_M2+1
  2003  03DF  3001               	movlw	1
  2004  03E0  00DB               	movwf	_man
  2005  03E1  3000               	movlw	0
  2006  03E2  00DC               	movwf	_man+1
  2007  03E3                     l2489:	
  2008                           
  2009                           ;blynd.c: 262: }
  2010                           ;blynd.c: 264: if(child_LOCK[5]==0 && RF3==0 && M3==0)
  2011  03E3  0023               	movlb	3	; select bank3
  2012  03E4  082A               	movf	(_child_LOCK^(0+384)+10),w
  2013  03E5  042B               	iorwf	((_child_LOCK+1)^(0+384)+10),w
  2014  03E6  1D03               	btfss	3,2
  2015  03E7  2C19               	goto	l2507
  2016  03E8  0025               	movlb	5	; select bank5
  2017  03E9  198C               	btfsc	12,3	;volatile
  2018  03EA  2C19               	goto	l2507
  2019  03EB  0020               	movlb	0	; select bank0
  2020  03EC  084D               	movf	_M3,w
  2021  03ED  044E               	iorwf	_M3+1,w
  2022  03EE  1D03               	btfss	3,2
  2023  03EF  2C19               	goto	l2507
  2024                           
  2025                           ;blynd.c: 265: {
  2026                           ;blynd.c: 266: if(man==1){
  2027  03F0  035B               	decf	_man,w
  2028  03F1  045C               	iorwf	_man+1,w
  2029  03F2  1D03               	btfss	3,2
  2030  03F3  2C11               	goto	l2503
  2031                           
  2032                           ;blynd.c: 267: st[9]='R'; st[10]='0'; st[11]='0'; st[12]='3';
  2033  03F4  3052               	movlw	82
  2034  03F5  00C7               	movwf	??_main
  2035  03F6  0847               	movf	??_main,w
  2036  03F7  0021               	movlb	1	; select bank1
  2037  03F8  00A9               	movwf	(_st^(0+128)+9)
  2038  03F9  3030               	movlw	48
  2039  03FA  0020               	movlb	0	; select bank0
  2040  03FB  00C7               	movwf	??_main
  2041  03FC  0847               	movf	??_main,w
  2042  03FD  0021               	movlb	1	; select bank1
  2043  03FE  00AA               	movwf	(_st^(0+128)+10)
  2044  03FF  3030               	movlw	48
  2045  0400  0020               	movlb	0	; select bank0
  2046  0401  00C7               	movwf	??_main
  2047  0402  0847               	movf	??_main,w
  2048  0403  0021               	movlb	1	; select bank1
  2049  0404  00AB               	movwf	(_st^(0+128)+11)
  2050  0405  3033               	movlw	51
  2051  0406  0020               	movlb	0	; select bank0
  2052  0407  00C7               	movwf	??_main
  2053  0408  0847               	movf	??_main,w
  2054  0409  0021               	movlb	1	; select bank1
  2055  040A  00AC               	movwf	(_st^(0+128)+12)
  2056                           
  2057                           ;blynd.c: 268: writeUART(st+9);
  2058  040B  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  2059  040C  3187  2726  3180   	fcall	_writeUART
  2060                           
  2061                           ;blynd.c: 269: RA3 = 0;
  2062  040F  0020               	movlb	0	; select bank0
  2063  0410  118C               	bcf	12,3	;volatile
  2064  0411                     l2503:	
  2065                           
  2066                           ;blynd.c: 270: }
  2067                           ;blynd.c: 271: M3=1; man=1;
  2068  0411  3001               	movlw	1
  2069  0412  00CD               	movwf	_M3
  2070  0413  3000               	movlw	0
  2071  0414  00CE               	movwf	_M3+1
  2072  0415  3001               	movlw	1
  2073  0416  00DB               	movwf	_man
  2074  0417  3000               	movlw	0
  2075  0418  00DC               	movwf	_man+1
  2076  0419                     l2507:	
  2077                           
  2078                           ;blynd.c: 272: }
  2079                           ;blynd.c: 274: if(child_LOCK[5]==0 && RF3==1 && M3==1)
  2080  0419  0023               	movlb	3	; select bank3
  2081  041A  082A               	movf	(_child_LOCK^(0+384)+10),w
  2082  041B  042B               	iorwf	((_child_LOCK+1)^(0+384)+10),w
  2083  041C  1D03               	btfss	3,2
  2084  041D  293E               	goto	l2275
  2085  041E  0025               	movlb	5	; select bank5
  2086  041F  1D8C               	btfss	12,3	;volatile
  2087  0420  293E               	goto	l2275
  2088  0421  0020               	movlb	0	; select bank0
  2089  0422  034D               	decf	_M3,w
  2090  0423  044E               	iorwf	_M3+1,w
  2091  0424  1D03               	btfss	3,2
  2092  0425  293E               	goto	l2275
  2093                           
  2094                           ;blynd.c: 275: {
  2095                           ;blynd.c: 276: if(man==1){
  2096  0426  035B               	decf	_man,w
  2097  0427  045C               	iorwf	_man+1,w
  2098  0428  1D03               	btfss	3,2
  2099  0429  2C47               	goto	l2521
  2100                           
  2101                           ;blynd.c: 277: st[9]='R'; st[10]='1'; st[11]='0'; st[12]='3';
  2102  042A  3052               	movlw	82
  2103  042B  00C7               	movwf	??_main
  2104  042C  0847               	movf	??_main,w
  2105  042D  0021               	movlb	1	; select bank1
  2106  042E  00A9               	movwf	(_st^(0+128)+9)
  2107  042F  3031               	movlw	49
  2108  0430  0020               	movlb	0	; select bank0
  2109  0431  00C7               	movwf	??_main
  2110  0432  0847               	movf	??_main,w
  2111  0433  0021               	movlb	1	; select bank1
  2112  0434  00AA               	movwf	(_st^(0+128)+10)
  2113  0435  3030               	movlw	48
  2114  0436  0020               	movlb	0	; select bank0
  2115  0437  00C7               	movwf	??_main
  2116  0438  0847               	movf	??_main,w
  2117  0439  0021               	movlb	1	; select bank1
  2118  043A  00AB               	movwf	(_st^(0+128)+11)
  2119  043B  3033               	movlw	51
  2120  043C  0020               	movlb	0	; select bank0
  2121  043D  00C7               	movwf	??_main
  2122  043E  0847               	movf	??_main,w
  2123  043F  0021               	movlb	1	; select bank1
  2124  0440  00AC               	movwf	(_st^(0+128)+12)
  2125                           
  2126                           ;blynd.c: 278: writeUART(st+9);
  2127  0441  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  2128  0442  3187  2726  3180   	fcall	_writeUART
  2129                           
  2130                           ;blynd.c: 279: RA3 =1;
  2131  0445  0020               	movlb	0	; select bank0
  2132  0446  158C               	bsf	12,3	;volatile
  2133  0447                     l2521:	
  2134                           
  2135                           ;blynd.c: 281: }
  2136                           ;blynd.c: 282: M3=0; man=1;
  2137  0447  01CD               	clrf	_M3
  2138  0448  01CE               	clrf	_M3+1
  2139  0449  3001               	movlw	1
  2140  044A  00DB               	movwf	_man
  2141  044B  3000               	movlw	0
  2142  044C  00DC               	movwf	_man+1
  2143  044D  293E               	goto	l2275
  2144  044E                     __end_of_main:	
  2145                           
  2146                           	psect	text1
  2147  06E0                     __ptext1:	
  2148 ;; *************** function _pin_manager *****************
  2149 ;; Defined at:
  2150 ;;		line 491 in file "blynd.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, status,2
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2168 ;;Total ram usage:        0 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    2
  2171 ;; This function calls:
  2172 ;;		Nothing
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           
  2179                           ;psect for function _pin_manager
  2180  06E0                     _pin_manager:	
  2181                           
  2182                           ;blynd.c: 495: ANSELG=0x00;
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _pin_manager: [wreg+status,2]
  2186  06E0  0028               	movlb	8	; select bank8
  2187  06E1  018D               	clrf	13	;volatile
  2188                           
  2189                           ;blynd.c: 497: WPUG = 0;
  2190  06E2  0029               	movlb	9	; select bank9
  2191  06E3  018D               	clrf	13	;volatile
  2192                           
  2193                           ;blynd.c: 500: ANSELF=0x00;
  2194  06E4  0028               	movlb	8	; select bank8
  2195  06E5  018C               	clrf	12	;volatile
  2196                           
  2197                           ;blynd.c: 501: TRISFbits.TRISF0=0;
  2198  06E6  0026               	movlb	6	; select bank6
  2199  06E7  100C               	bcf	12,0	;volatile
  2200                           
  2201                           ;blynd.c: 502: TRISFbits.TRISF1=0;
  2202  06E8  108C               	bcf	12,1	;volatile
  2203                           
  2204                           ;blynd.c: 503: TRISFbits.TRISF2=1;
  2205  06E9  150C               	bsf	12,2	;volatile
  2206                           
  2207                           ;blynd.c: 504: TRISFbits.TRISF3=1;
  2208  06EA  158C               	bsf	12,3	;volatile
  2209                           
  2210                           ;blynd.c: 505: TRISFbits.TRISF4=1;
  2211  06EB  160C               	bsf	12,4	;volatile
  2212                           
  2213                           ;blynd.c: 506: TRISFbits.TRISF5=1;
  2214  06EC  168C               	bsf	12,5	;volatile
  2215                           
  2216                           ;blynd.c: 507: TRISFbits.TRISF6=1;
  2217  06ED  170C               	bsf	12,6	;volatile
  2218                           
  2219                           ;blynd.c: 508: TRISFbits.TRISF7=1;
  2220  06EE  178C               	bsf	12,7	;volatile
  2221                           
  2222                           ;blynd.c: 511: WPUE=0x00;
  2223  06EF  0024               	movlb	4	; select bank4
  2224  06F0  0190               	clrf	16	;volatile
  2225                           
  2226                           ;blynd.c: 512: ANSELE=0x00;
  2227  06F1  0023               	movlb	3	; select bank3
  2228  06F2  0190               	clrf	16	;volatile
  2229                           
  2230                           ;blynd.c: 517: WPUD=0x00;
  2231  06F3  0024               	movlb	4	; select bank4
  2232  06F4  018F               	clrf	15	;volatile
  2233                           
  2234                           ;blynd.c: 518: ANSELD=0x00;
  2235  06F5  0023               	movlb	3	; select bank3
  2236  06F6  018F               	clrf	15	;volatile
  2237                           
  2238                           ;blynd.c: 519: TRISD=0xFF;
  2239  06F7  30FF               	movlw	255
  2240  06F8  0021               	movlb	1	; select bank1
  2241  06F9  008F               	movwf	15	;volatile
  2242                           
  2243                           ;blynd.c: 526: ANSELB=0x00;
  2244  06FA  0023               	movlb	3	; select bank3
  2245  06FB  018D               	clrf	13	;volatile
  2246                           
  2247                           ;blynd.c: 529: WPUB = 0x00;
  2248  06FC  0024               	movlb	4	; select bank4
  2249  06FD  018D               	clrf	13	;volatile
  2250                           
  2251                           ;blynd.c: 532: ANSELA = 0x00;
  2252  06FE  0023               	movlb	3	; select bank3
  2253  06FF  018C               	clrf	12	;volatile
  2254                           
  2255                           ;blynd.c: 536: TRISAbits.TRISA3=0;
  2256  0700  0021               	movlb	1	; select bank1
  2257  0701  118C               	bcf	12,3	;volatile
  2258                           
  2259                           ;blynd.c: 546: TRISCbits.TRISC6 = 0;
  2260  0702  130E               	bcf	14,6	;volatile
  2261                           
  2262                           ;blynd.c: 547: TRISCbits.TRISC7 = 1;
  2263  0703  178E               	bsf	14,7	;volatile
  2264  0704  0008               	return
  2265  0705                     __end_of_pin_manager:	
  2266                           
  2267                           	psect	text2
  2268  07B8                     __ptext2:	
  2269 ;; *************** function _periperal_init *****************
  2270 ;; Defined at:
  2271 ;;		line 129 in file "blynd.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0, pclath, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2289 ;;Total ram usage:        0 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    3
  2292 ;; This function calls:
  2293 ;;		_EUSART_Initialize
  2294 ;;		_TMR1_Initialize
  2295 ;;		_TMR3_Initialize
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _periperal_init
  2303  07B8                     _periperal_init:	
  2304                           
  2305                           ;blynd.c: 130: EUSART_Initialize();
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _periperal_init: [wreg+status,2+status,0+pclath+cstack]
  2309  07B8  3187  2778  3187   	fcall	_EUSART_Initialize
  2310                           
  2311                           ;blynd.c: 131: TMR1_Initialize();
  2312  07BB  3187  27AC  3187   	fcall	_TMR1_Initialize
  2313                           
  2314                           ;blynd.c: 132: TMR3_Initialize();
  2315  07BE  3187  278E         	fcall	_TMR3_Initialize
  2316  07C0  0008               	return
  2317  07C1                     __end_of_periperal_init:	
  2318                           
  2319                           	psect	text3
  2320  078E                     __ptext3:	
  2321 ;; *************** function _TMR3_Initialize *****************
  2322 ;; Defined at:
  2323 ;;		line 460 in file "blynd.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        0 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    2
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_periperal_init
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _TMR3_Initialize
  2353  078E                     _TMR3_Initialize:	
  2354                           
  2355                           ;blynd.c: 464: T3CON = 0x30;
  2356                           
  2357                           ;incstack = 0
  2358                           ; Regs used in _TMR3_Initialize: [wreg+status,2]
  2359  078E  3030               	movlw	48
  2360  078F  0028               	movlb	8	; select bank8
  2361  0790  0093               	movwf	19	;volatile
  2362                           
  2363                           ;blynd.c: 467: T3GCON = 0x00;
  2364  0791  0194               	clrf	20	;volatile
  2365                           
  2366                           ;blynd.c: 470: TMR3H = 0x00;
  2367  0792  0192               	clrf	18	;volatile
  2368                           
  2369                           ;blynd.c: 473: TMR3L = 0x00;
  2370  0793  0191               	clrf	17	;volatile
  2371                           
  2372                           ;blynd.c: 476: PIR3bits.TMR3IF = 0;
  2373  0794  0020               	movlb	0	; select bank0
  2374  0795  1013               	bcf	19,0	;volatile
  2375                           
  2376                           ;blynd.c: 479: PIE3bits.TMR3IE = 1;
  2377  0796  0021               	movlb	1	; select bank1
  2378  0797  1413               	bsf	19,0	;volatile
  2379                           
  2380                           ;blynd.c: 482: T1CONbits.TMR1ON = 1;
  2381  0798  0020               	movlb	0	; select bank0
  2382  0799  1418               	bsf	24,0	;volatile
  2383                           
  2384                           ;blynd.c: 485: GIE = 1;
  2385  079A  178B               	bsf	11,7	;volatile
  2386                           
  2387                           ;blynd.c: 488: PEIE = 1;
  2388  079B  170B               	bsf	11,6	;volatile
  2389  079C  0008               	return
  2390  079D                     __end_of_TMR3_Initialize:	
  2391                           
  2392                           	psect	text4
  2393  07AC                     __ptext4:	
  2394 ;; *************** function _TMR1_Initialize *****************
  2395 ;; Defined at:
  2396 ;;		line 429 in file "blynd.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;		None
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2414 ;;Total ram usage:        0 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    2
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_periperal_init
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _TMR1_Initialize
  2426  07AC                     _TMR1_Initialize:	
  2427                           
  2428                           ;blynd.c: 433: T1CON = 0x30;
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _TMR1_Initialize: [wreg+status,2]
  2432  07AC  3030               	movlw	48
  2433  07AD  0020               	movlb	0	; select bank0
  2434  07AE  0098               	movwf	24	;volatile
  2435                           
  2436                           ;blynd.c: 436: T1GCON = 0x00;
  2437  07AF  0199               	clrf	25	;volatile
  2438                           
  2439                           ;blynd.c: 439: TMR1H = 0x00;
  2440  07B0  0197               	clrf	23	;volatile
  2441                           
  2442                           ;blynd.c: 442: TMR1L = 0x00;
  2443  07B1  0196               	clrf	22	;volatile
  2444                           
  2445                           ;blynd.c: 445: PIR1bits.TMR1IF = 0;
  2446  07B2  1011               	bcf	17,0	;volatile
  2447                           
  2448                           ;blynd.c: 448: PIE1bits.TMR1IE = 1;
  2449  07B3  0021               	movlb	1	; select bank1
  2450  07B4  1411               	bsf	17,0	;volatile
  2451                           
  2452                           ;blynd.c: 451: T1CONbits.TMR1ON = 1;
  2453  07B5  0020               	movlb	0	; select bank0
  2454  07B6  1418               	bsf	24,0	;volatile
  2455  07B7  0008               	return
  2456  07B8                     __end_of_TMR1_Initialize:	
  2457                           
  2458                           	psect	text5
  2459  0778                     __ptext5:	
  2460 ;; *************** function _EUSART_Initialize *****************
  2461 ;; Defined at:
  2462 ;;		line 390 in file "blynd.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;		None
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2480 ;;Total ram usage:        0 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    2
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_periperal_init
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function _EUSART_Initialize
  2492  0778                     _EUSART_Initialize:	
  2493                           
  2494                           ;blynd.c: 392: PIE1bits.RC1IE = 0;
  2495                           
  2496                           ;incstack = 0
  2497                           ; Regs used in _EUSART_Initialize: [wreg]
  2498  0778  0021               	movlb	1	; select bank1
  2499  0779  1291               	bcf	17,5	;volatile
  2500                           
  2501                           ;blynd.c: 393: PIE1bits.TX1IE = 0;
  2502  077A  1211               	bcf	17,4	;volatile
  2503                           
  2504                           ;blynd.c: 398: BAUD1CON = 0x0A;
  2505  077B  300A               	movlw	10
  2506  077C  0023               	movlb	3	; select bank3
  2507  077D  009F               	movwf	31	;volatile
  2508                           
  2509                           ;blynd.c: 401: RC1STA = 0x90;
  2510  077E  3090               	movlw	144
  2511  077F  009D               	movwf	29	;volatile
  2512                           
  2513                           ;blynd.c: 404: TX1STA = 0x24;
  2514  0780  3024               	movlw	36
  2515  0781  009E               	movwf	30	;volatile
  2516                           
  2517                           ;blynd.c: 409: SP1BRGL = 0xA0;
  2518  0782  30A0               	movlw	160
  2519  0783  009B               	movwf	27	;volatile
  2520                           
  2521                           ;blynd.c: 411: SP1BRGH = 0x01;
  2522  0784  3001               	movlw	1
  2523  0785  009C               	movwf	28	;volatile
  2524                           
  2525                           ;blynd.c: 414: GIE = 1;
  2526  0786  178B               	bsf	11,7	;volatile
  2527                           
  2528                           ;blynd.c: 417: PEIE = 1;
  2529  0787  170B               	bsf	11,6	;volatile
  2530                           
  2531                           ;blynd.c: 420: PIE1bits.RC1IE = 1;
  2532  0788  0021               	movlb	1	; select bank1
  2533  0789  1691               	bsf	17,5	;volatile
  2534                           
  2535                           ;blynd.c: 423: TX1STAbits.TXEN = 1;
  2536  078A  0023               	movlb	3	; select bank3
  2537  078B  169E               	bsf	30,5	;volatile
  2538                           
  2539                           ;blynd.c: 426: RC1STAbits.SPEN = 1;
  2540  078C  179D               	bsf	29,7	;volatile
  2541  078D  0008               	return
  2542  078E                     __end_of_EUSART_Initialize:	
  2543                           
  2544                           	psect	text6
  2545  0676                     __ptext6:	
  2546 ;; *************** function _copy_frame *****************
  2547 ;; Defined at:
  2548 ;;		line 289 in file "blynd.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  start           2    0[BANK0 ] int 
  2551 ;;  end             2    2[BANK0 ] int 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2566 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2567 ;;Total ram usage:        5 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    2
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           
  2578                           ;psect for function _copy_frame
  2579  0676                     _copy_frame:	
  2580                           
  2581                           ;blynd.c: 290: sw=0;
  2582                           
  2583                           ;incstack = 0
  2584                           ; Regs used in _copy_frame: [wreg+fsr1l+fsr1h+status,2+status,0]
  2585  0676  0020               	movlb	0	; select bank0
  2586  0677  01D5               	clrf	_sw
  2587  0678  01D6               	clrf	_sw+1
  2588                           
  2589                           ;blynd.c: 291: for(k = start; k< end; k++)
  2590  0679  0821               	movf	copy_frame@start+1,w
  2591  067A  00D8               	movwf	_k+1
  2592  067B  0820               	movf	copy_frame@start,w
  2593  067C  00D7               	movwf	_k
  2594  067D                     l234:	
  2595  067D  0858               	movf	_k+1,w
  2596  067E  3A80               	xorlw	128
  2597  067F  00A4               	movwf	??_copy_frame
  2598  0680  0823               	movf	copy_frame@end+1,w
  2599  0681  3A80               	xorlw	128
  2600  0682  0224               	subwf	??_copy_frame,w
  2601  0683  1D03               	skipz
  2602  0684  2E87               	goto	u1815
  2603  0685  0822               	movf	copy_frame@end,w
  2604  0686  0257               	subwf	_k,w
  2605  0687                     u1815:	
  2606  0687  1803               	btfsc	3,0
  2607  0688  2EAA               	goto	l2133
  2608                           
  2609                           ;blynd.c: 292: {
  2610                           ;blynd.c: 293: copy[sw]=name[k];
  2611  0689  0020               	movlb	0	; select bank0
  2612  068A  0857               	movf	_k,w
  2613  068B  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2614  068C  0086               	movwf	6
  2615  068D  3001               	movlw	1	; select bank2/3
  2616  068E  0087               	movwf	7
  2617  068F  0801               	movf	1,w
  2618  0690  00A4               	movwf	??_copy_frame
  2619  0691  0855               	movf	_sw,w
  2620  0692  3E20               	addlw	(low (_copy| (0+256)))& (0+255)
  2621  0693  0086               	movwf	6
  2622  0694  3001               	movlw	1	; select bank2/3
  2623  0695  0087               	movwf	7
  2624  0696  0824               	movf	??_copy_frame,w
  2625  0697  0081               	movwf	1
  2626                           
  2627                           ;blynd.c: 294: sw++;
  2628  0698  3001               	movlw	1
  2629  0699  07D5               	addwf	_sw,f
  2630  069A  3000               	movlw	0
  2631  069B  3DD6               	addwfc	_sw+1,f
  2632                           
  2633                           ;blynd.c: 295: name[k] = '#';
  2634  069C  3023               	movlw	35
  2635  069D  00A4               	movwf	??_copy_frame
  2636  069E  0857               	movf	_k,w
  2637  069F  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2638  06A0  0086               	movwf	6
  2639  06A1  3001               	movlw	1	; select bank2/3
  2640  06A2  0087               	movwf	7
  2641  06A3  0824               	movf	??_copy_frame,w
  2642  06A4  0081               	movwf	1
  2643  06A5  3001               	movlw	1
  2644  06A6  07D7               	addwf	_k,f
  2645  06A7  3000               	movlw	0
  2646  06A8  3DD8               	addwfc	_k+1,f
  2647  06A9  2E7D               	goto	l234
  2648  06AA                     l2133:	
  2649                           
  2650                           ;blynd.c: 296: }
  2651                           ;blynd.c: 301: COPY_FLAG=0;
  2652  06AA  0020               	movlb	0	; select bank0
  2653  06AB  01D3               	clrf	_COPY_FLAG
  2654  06AC  01D4               	clrf	_COPY_FLAG+1
  2655  06AD  0008               	return
  2656  06AE                     __end_of_copy_frame:	
  2657                           
  2658                           	psect	text7
  2659  044E                     __ptext7:	
  2660 ;; *************** function _ACTION *****************
  2661 ;; Defined at:
  2662 ;;		line 304 in file "blynd.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  Switch_Num_1    1    wreg     unsigned char 
  2665 ;;  Switch_Num_1    1   14[BANK0 ] unsigned char 
  2666 ;;  sw_status       1   15[BANK0 ] unsigned char 
  2667 ;;  speed_bit1      1   16[BANK0 ] unsigned char 
  2668 ;;  speed_bit2      1   17[BANK0 ] unsigned char 
  2669 ;;  parent          1   18[BANK0 ] unsigned char 
  2670 ;;  finalFrameSt    1   19[BANK0 ] unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  Switch_Num_1    1   28[BANK0 ] unsigned char 
  2673 ;;  SwNumString     2   31[BANK0 ] unsigned char [2]
  2674 ;;  FanSpeedStri    2   29[BANK0 ] unsigned char [2]
  2675 ;;  child_lock_n    2   26[BANK0 ] int 
  2676 ;;  children        2   24[BANK0 ] int 
  2677 ;;  FanSpeed        2   22[BANK0 ] int 
  2678 ;;  response_sta    2   37[BANK0 ] int 
  2679 ;;  switch_statu    2   35[BANK0 ] int 
  2680 ;;  SwNum           2   33[BANK0 ] int 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      void 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2690 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  2691 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0
  2692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  2693 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0
  2694 ;;Total ram usage:       25 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    4
  2697 ;; This function calls:
  2698 ;;		_atoi
  2699 ;;		_writeUART
  2700 ;; This function is called by:
  2701 ;;		_main
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           
  2706                           ;psect for function _ACTION
  2707  044E                     _ACTION:	
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _ACTION: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2711                           ;ACTION@Switch_Num_10s stored from wreg
  2712  044E  0020               	movlb	0	; select bank0
  2713  044F  00BC               	movwf	ACTION@Switch_Num_10s
  2714                           
  2715                           ;blynd.c: 306: int response_starts=0;
  2716  0450  01C5               	clrf	ACTION@response_starts
  2717  0451  01C6               	clrf	ACTION@response_starts+1
  2718                           
  2719                           ;blynd.c: 307: int switch_status=0;
  2720  0452  01C3               	clrf	ACTION@switch_status
  2721  0453  01C4               	clrf	ACTION@switch_status+1
  2722                           
  2723                           ;blynd.c: 308: int SwNum=0;
  2724  0454  01C1               	clrf	ACTION@SwNum
  2725  0455  01C2               	clrf	ACTION@SwNum+1
  2726                           
  2727                           ;blynd.c: 310: if(Switch_Num_1s != 'T')
  2728  0456  3054               	movlw	84
  2729  0457  062E               	xorwf	ACTION@Switch_Num_1s,w
  2730  0458  1903               	btfsc	3,2
  2731  0459  2D72               	goto	l2239
  2732                           
  2733                           ;blynd.c: 311: {
  2734                           ;blynd.c: 312: unsigned char FanSpeedString[2], SwNumString[2];
  2735                           ;blynd.c: 313: int FanSpeed=0;
  2736  045A  01B6               	clrf	ACTION@FanSpeed
  2737  045B  01B7               	clrf	ACTION@FanSpeed+1
  2738                           
  2739                           ;blynd.c: 315: switch_status=sw_status - '0';
  2740  045C  082F               	movf	ACTION@sw_status,w
  2741  045D  3ED0               	addlw	208
  2742  045E  00C3               	movwf	ACTION@switch_status
  2743  045F  30FF               	movlw	255
  2744  0460  1803               	skipnc
  2745  0461  3000               	movlw	0
  2746  0462  00C4               	movwf	ACTION@switch_status+1
  2747                           
  2748                           ;blynd.c: 317: SwNumString[0]=Switch_Num_10s;
  2749  0463  083C               	movf	ACTION@Switch_Num_10s,w
  2750  0464  00B4               	movwf	??_ACTION
  2751  0465  0834               	movf	??_ACTION,w
  2752  0466  00BF               	movwf	ACTION@SwNumString
  2753                           
  2754                           ;blynd.c: 318: SwNumString[1]=Switch_Num_1s;
  2755  0467  082E               	movf	ACTION@Switch_Num_1s,w
  2756  0468  00B4               	movwf	??_ACTION
  2757  0469  0834               	movf	??_ACTION,w
  2758  046A  00C0               	movwf	ACTION@SwNumString+1
  2759                           
  2760                           ;blynd.c: 319: SwNum=atoi(SwNumString);
  2761  046B  303F               	movlw	(low (ACTION@SwNumString| 0))& (0+255)
  2762  046C  3185  2583  3184   	fcall	_atoi
  2763  046F  0020               	movlb	0	; select bank0
  2764  0470  0827               	movf	?_atoi+1,w
  2765  0471  00C2               	movwf	ACTION@SwNum+1
  2766  0472  0826               	movf	?_atoi,w
  2767  0473  00C1               	movwf	ACTION@SwNum
  2768                           
  2769                           ;blynd.c: 321: FanSpeedString[0] = speed_bit1;
  2770  0474  0830               	movf	ACTION@speed_bit1,w
  2771  0475  00B4               	movwf	??_ACTION
  2772  0476  0834               	movf	??_ACTION,w
  2773  0477  00BD               	movwf	ACTION@FanSpeedString
  2774                           
  2775                           ;blynd.c: 322: FanSpeedString[1] = speed_bit2;
  2776  0478  0831               	movf	ACTION@speed_bit2,w
  2777  0479  00B4               	movwf	??_ACTION
  2778  047A  0834               	movf	??_ACTION,w
  2779  047B  00BE               	movwf	ACTION@FanSpeedString+1
  2780                           
  2781                           ;blynd.c: 323: FanSpeed = atoi(FanSpeedString);
  2782  047C  303D               	movlw	(low (ACTION@FanSpeedString| 0))& (0+255)
  2783  047D  3185  2583  3184   	fcall	_atoi
  2784  0480  0020               	movlb	0	; select bank0
  2785  0481  0827               	movf	?_atoi+1,w
  2786  0482  00B7               	movwf	ACTION@FanSpeed+1
  2787  0483  0826               	movf	?_atoi,w
  2788  0484  00B6               	movwf	ACTION@FanSpeed
  2789                           
  2790                           ;blynd.c: 325: int children=parent - '0';
  2791  0485  0832               	movf	ACTION@parent,w
  2792  0486  3ED0               	addlw	208
  2793  0487  00B8               	movwf	ACTION@children
  2794  0488  30FF               	movlw	255
  2795  0489  1803               	skipnc
  2796  048A  3000               	movlw	0
  2797  048B  00B9               	movwf	ACTION@children+1
  2798                           
  2799                           ;blynd.c: 326: int child_lock_num=(2*(SwNum)-1);
  2800  048C  0842               	movf	ACTION@SwNum+1,w
  2801  048D  00B5               	movwf	??_ACTION+1
  2802  048E  0841               	movf	ACTION@SwNum,w
  2803  048F  00B4               	movwf	??_ACTION
  2804  0490  35B4               	lslf	??_ACTION,f
  2805  0491  0DB5               	rlf	??_ACTION+1,f
  2806  0492  0834               	movf	??_ACTION,w
  2807  0493  3EFF               	addlw	255
  2808  0494  00BA               	movwf	ACTION@child_lock_num
  2809  0495  30FF               	movlw	255
  2810  0496  3D35               	addwfc	??_ACTION+1,w
  2811  0497  00BB               	movwf	ACTION@child_lock_num+1
  2812                           
  2813                           ;blynd.c: 327: child_LOCK[child_lock_num]=children;
  2814  0498  353A               	lslf	ACTION@child_lock_num,w
  2815  0499  3EA0               	addlw	(low (_child_LOCK| (0+256)))& (0+255)
  2816  049A  0086               	movwf	6
  2817  049B  3001               	movlw	1	; select bank3/4
  2818  049C  0087               	movwf	7
  2819  049D  0838               	movf	ACTION@children,w
  2820  049E  3FC0               	movwi [0]fsr1
  2821  049F  0839               	movf	ACTION@children+1,w
  2822  04A0  3FC1               	movwi [1]fsr1
  2823                           
  2824                           ;blynd.c: 329: response_starts=((1+4*(SwNum))-4);
  2825  04A1  0842               	movf	ACTION@SwNum+1,w
  2826  04A2  00B5               	movwf	??_ACTION+1
  2827  04A3  0841               	movf	ACTION@SwNum,w
  2828  04A4  00B4               	movwf	??_ACTION
  2829  04A5  35B4               	lslf	??_ACTION,f
  2830  04A6  0DB5               	rlf	??_ACTION+1,f
  2831  04A7  35B4               	lslf	??_ACTION,f
  2832  04A8  0DB5               	rlf	??_ACTION+1,f
  2833  04A9  0834               	movf	??_ACTION,w
  2834  04AA  3EFD               	addlw	253
  2835  04AB  00C5               	movwf	ACTION@response_starts
  2836  04AC  30FF               	movlw	255
  2837  04AD  3D35               	addwfc	??_ACTION+1,w
  2838  04AE  00C6               	movwf	ACTION@response_starts+1
  2839                           
  2840                           ;blynd.c: 330: st[response_starts++]='G';
  2841  04AF  3047               	movlw	71
  2842  04B0  00B4               	movwf	??_ACTION
  2843  04B1  0845               	movf	ACTION@response_starts,w
  2844  04B2  3EA0               	addlw	(low (_st| 0))& (0+255)
  2845  04B3  0086               	movwf	6
  2846  04B4  0187               	clrf	7
  2847  04B5  0834               	movf	??_ACTION,w
  2848  04B6  0081               	movwf	1
  2849  04B7  3001               	movlw	1
  2850  04B8  07C5               	addwf	ACTION@response_starts,f
  2851  04B9  3000               	movlw	0
  2852  04BA  3DC6               	addwfc	ACTION@response_starts+1,f
  2853                           
  2854                           ;blynd.c: 331: st[response_starts++]=sw_status;
  2855  04BB  082F               	movf	ACTION@sw_status,w
  2856  04BC  00B4               	movwf	??_ACTION
  2857  04BD  0845               	movf	ACTION@response_starts,w
  2858  04BE  3EA0               	addlw	(low (_st| 0))& (0+255)
  2859  04BF  0086               	movwf	6
  2860  04C0  0187               	clrf	7
  2861  04C1  0834               	movf	??_ACTION,w
  2862  04C2  0081               	movwf	1
  2863  04C3  3001               	movlw	1
  2864  04C4  07C5               	addwf	ACTION@response_starts,f
  2865  04C5  3000               	movlw	0
  2866  04C6  3DC6               	addwfc	ACTION@response_starts+1,f
  2867                           
  2868                           ;blynd.c: 332: st[response_starts++]=Switch_Num_10s;
  2869  04C7  083C               	movf	ACTION@Switch_Num_10s,w
  2870  04C8  00B4               	movwf	??_ACTION
  2871  04C9  0845               	movf	ACTION@response_starts,w
  2872  04CA  3EA0               	addlw	(low (_st| 0))& (0+255)
  2873  04CB  0086               	movwf	6
  2874  04CC  0187               	clrf	7
  2875  04CD  0834               	movf	??_ACTION,w
  2876  04CE  0081               	movwf	1
  2877  04CF  3001               	movlw	1
  2878  04D0  07C5               	addwf	ACTION@response_starts,f
  2879  04D1  3000               	movlw	0
  2880  04D2  3DC6               	addwfc	ACTION@response_starts+1,f
  2881                           
  2882                           ;blynd.c: 333: st[response_starts]=Switch_Num_1s;
  2883  04D3  082E               	movf	ACTION@Switch_Num_1s,w
  2884  04D4  00B4               	movwf	??_ACTION
  2885  04D5  0845               	movf	ACTION@response_starts,w
  2886  04D6  3EA0               	addlw	(low (_st| 0))& (0+255)
  2887  04D7  0086               	movwf	6
  2888  04D8  0187               	clrf	7
  2889  04D9  0834               	movf	??_ACTION,w
  2890  04DA  0081               	movwf	1
  2891                           
  2892                           ;blynd.c: 335: response_starts-=3;
  2893  04DB  30FD               	movlw	253
  2894  04DC  07C5               	addwf	ACTION@response_starts,f
  2895  04DD  30FF               	movlw	255
  2896  04DE  3DC6               	addwfc	ACTION@response_starts+1,f
  2897                           
  2898                           ;blynd.c: 336: if(finalFrameStat=='1')
  2899  04DF  3031               	movlw	49
  2900  04E0  0633               	xorwf	ACTION@finalFrameStat,w
  2901  04E1  1D03               	btfss	3,2
  2902  04E2  2CE8               	goto	l2183
  2903                           
  2904                           ;blynd.c: 337: {
  2905                           ;blynd.c: 338: writeUART(st+response_starts);
  2906  04E3  0845               	movf	ACTION@response_starts,w
  2907  04E4  3EA0               	addlw	(low (_st| 0))& (0+255)
  2908  04E5  3187  2726  3184   	fcall	_writeUART
  2909  04E8                     l2183:	
  2910                           
  2911                           ;blynd.c: 339: }
  2912                           ;blynd.c: 340: man=0;
  2913  04E8  0020               	movlb	0	; select bank0
  2914  04E9  01DB               	clrf	_man
  2915  04EA  01DC               	clrf	_man+1
  2916                           
  2917                           ;blynd.c: 341: }
  2918                           ;blynd.c: 343: switch(SwNum)
  2919  04EB  2D72               	goto	l2239
  2920  04EC                     l2185:	
  2921                           ;blynd.c: 344: {
  2922                           ;blynd.c: 345: case 1:
  2923                           
  2924                           
  2925                           ;blynd.c: 346: M1=switch_status;
  2926  04EC  0844               	movf	ACTION@switch_status+1,w
  2927  04ED  00D2               	movwf	_M1+1
  2928  04EE  0843               	movf	ACTION@switch_status,w
  2929  04EF  00D1               	movwf	_M1
  2930                           
  2931                           ;blynd.c: 347: if(switch_status==1){
  2932  04F0  0343               	decf	ACTION@switch_status,w
  2933  04F1  0444               	iorwf	ACTION@switch_status+1,w
  2934  04F2  1D03               	btfss	3,2
  2935  04F3  2D21               	goto	l244
  2936                           
  2937                           ;blynd.c: 348: RF0=0;
  2938  04F4  0025               	movlb	5	; select bank5
  2939  04F5  100C               	bcf	12,0	;volatile
  2940                           
  2941                           ;blynd.c: 349: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  2942  04F6  3047               	movlw	71
  2943  04F7  0020               	movlb	0	; select bank0
  2944  04F8  00B4               	movwf	??_ACTION
  2945  04F9  0834               	movf	??_ACTION,w
  2946  04FA  0021               	movlb	1	; select bank1
  2947  04FB  00A5               	movwf	(_st^(0+128)+5)
  2948  04FC  3030               	movlw	48
  2949  04FD  0020               	movlb	0	; select bank0
  2950  04FE  00B4               	movwf	??_ACTION
  2951  04FF  0834               	movf	??_ACTION,w
  2952  0500  0021               	movlb	1	; select bank1
  2953  0501  00A6               	movwf	(_st^(0+128)+6)
  2954  0502  3030               	movlw	48
  2955  0503  0020               	movlb	0	; select bank0
  2956  0504  00B4               	movwf	??_ACTION
  2957  0505  0834               	movf	??_ACTION,w
  2958  0506  0021               	movlb	1	; select bank1
  2959  0507  00A7               	movwf	(_st^(0+128)+7)
  2960  0508  3032               	movlw	50
  2961  0509  0020               	movlb	0	; select bank0
  2962  050A  00B4               	movwf	??_ACTION
  2963  050B  0834               	movf	??_ACTION,w
  2964  050C  0021               	movlb	1	; select bank1
  2965  050D  00A8               	movwf	(_st^(0+128)+8)
  2966  050E  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  2967  050F  3187  2726         	fcall	_writeUART
  2968                           
  2969                           ;blynd.c: 350: RF1=1; curtFlag1=1; TimerCounter1=0;
  2970  0511  0025               	movlb	5	; select bank5
  2971  0512  148C               	bsf	12,1	;volatile
  2972  0513  3001               	movlw	1
  2973  0514  00F4               	movwf	_curtFlag1
  2974  0515  3000               	movlw	0
  2975  0516  00F5               	movwf	_curtFlag1+1
  2976  0517  01F0               	clrf	_TimerCounter1
  2977  0518  01F1               	clrf	_TimerCounter1+1
  2978                           
  2979                           ;blynd.c: 351: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  2980  0519  300B               	movlw	11
  2981  051A  0020               	movlb	0	; select bank0
  2982  051B  0097               	movwf	23	;volatile
  2983  051C  30DC               	movlw	220
  2984  051D  0096               	movwf	22	;volatile
  2985  051E  1011               	bcf	17,0	;volatile
  2986  051F  1418               	bsf	24,0	;volatile
  2987                           
  2988                           ;blynd.c: 352: }
  2989  0520  0008               	return
  2990  0521                     l244:	
  2991                           
  2992                           ;blynd.c: 353: else{
  2993                           ;blynd.c: 354: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  2994  0521  0025               	movlb	5	; select bank5
  2995  0522  100C               	bcf	12,0	;volatile
  2996  0523  108C               	bcf	12,1	;volatile
  2997  0524  0020               	movlb	0	; select bank0
  2998  0525  1018               	bcf	24,0	;volatile
  2999  0526  01F4               	clrf	_curtFlag1
  3000  0527  01F5               	clrf	_curtFlag1+1
  3001  0528  01F0               	clrf	_TimerCounter1
  3002  0529  01F1               	clrf	_TimerCounter1+1
  3003                           
  3004                           ;blynd.c: 355: }
  3005                           ;blynd.c: 356: break;
  3006  052A  0008               	return
  3007  052B                     l2211:	
  3008                           ;blynd.c: 357: case 2:
  3009                           
  3010                           
  3011                           ;blynd.c: 358: M2=switch_status;
  3012  052B  0844               	movf	ACTION@switch_status+1,w
  3013  052C  00D0               	movwf	_M2+1
  3014  052D  0843               	movf	ACTION@switch_status,w
  3015  052E  00CF               	movwf	_M2
  3016                           
  3017                           ;blynd.c: 359: if(switch_status==1){
  3018  052F  0343               	decf	ACTION@switch_status,w
  3019  0530  0444               	iorwf	ACTION@switch_status+1,w
  3020  0531  1D03               	btfss	3,2
  3021  0532  2D60               	goto	l248
  3022                           
  3023                           ;blynd.c: 360: RF1=0;
  3024  0533  0025               	movlb	5	; select bank5
  3025  0534  108C               	bcf	12,1	;volatile
  3026                           
  3027                           ;blynd.c: 361: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  3028  0535  3047               	movlw	71
  3029  0536  0020               	movlb	0	; select bank0
  3030  0537  00B4               	movwf	??_ACTION
  3031  0538  0834               	movf	??_ACTION,w
  3032  0539  0021               	movlb	1	; select bank1
  3033  053A  00A1               	movwf	(_st^(0+128)+1)
  3034  053B  3030               	movlw	48
  3035  053C  0020               	movlb	0	; select bank0
  3036  053D  00B4               	movwf	??_ACTION
  3037  053E  0834               	movf	??_ACTION,w
  3038  053F  0021               	movlb	1	; select bank1
  3039  0540  00A2               	movwf	(_st^(0+128)+2)
  3040  0541  3030               	movlw	48
  3041  0542  0020               	movlb	0	; select bank0
  3042  0543  00B4               	movwf	??_ACTION
  3043  0544  0834               	movf	??_ACTION,w
  3044  0545  0021               	movlb	1	; select bank1
  3045  0546  00A3               	movwf	(_st^(0+128)+3)
  3046  0547  3031               	movlw	49
  3047  0548  0020               	movlb	0	; select bank0
  3048  0549  00B4               	movwf	??_ACTION
  3049  054A  0834               	movf	??_ACTION,w
  3050  054B  0021               	movlb	1	; select bank1
  3051  054C  00A4               	movwf	(_st^(0+128)+4)
  3052  054D  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  3053  054E  3187  2726         	fcall	_writeUART
  3054                           
  3055                           ;blynd.c: 362: RF0=1; curtFlag1=1; TimerCounter1=0;
  3056  0550  0025               	movlb	5	; select bank5
  3057  0551  140C               	bsf	12,0	;volatile
  3058  0552  3001               	movlw	1
  3059  0553  00F4               	movwf	_curtFlag1
  3060  0554  3000               	movlw	0
  3061  0555  00F5               	movwf	_curtFlag1+1
  3062  0556  01F0               	clrf	_TimerCounter1
  3063  0557  01F1               	clrf	_TimerCounter1+1
  3064                           
  3065                           ;blynd.c: 363: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  3066  0558  300B               	movlw	11
  3067  0559  0020               	movlb	0	; select bank0
  3068  055A  0097               	movwf	23	;volatile
  3069  055B  30DC               	movlw	220
  3070  055C  0096               	movwf	22	;volatile
  3071  055D  1011               	bcf	17,0	;volatile
  3072  055E  1418               	bsf	24,0	;volatile
  3073                           
  3074                           ;blynd.c: 364: }
  3075  055F  0008               	return
  3076  0560                     l248:	
  3077                           
  3078                           ;blynd.c: 365: else{
  3079                           ;blynd.c: 366: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  3080  0560  0025               	movlb	5	; select bank5
  3081  0561  100C               	bcf	12,0	;volatile
  3082  0562  108C               	bcf	12,1	;volatile
  3083  0563  0020               	movlb	0	; select bank0
  3084  0564  1018               	bcf	24,0	;volatile
  3085  0565  01F4               	clrf	_curtFlag1
  3086  0566  01F5               	clrf	_curtFlag1+1
  3087  0567  01F0               	clrf	_TimerCounter1
  3088  0568  01F1               	clrf	_TimerCounter1+1
  3089                           
  3090                           ;blynd.c: 367: }
  3091                           ;blynd.c: 368: break;
  3092  0569  0008               	return
  3093  056A                     l250:	
  3094                           ;blynd.c: 369: case 3:
  3095                           
  3096                           
  3097                           ;blynd.c: 370: RA3 = switch_status;
  3098  056A  1C43               	btfss	ACTION@switch_status,0
  3099  056B  2D6F               	goto	u1860
  3100  056C  0020               	movlb	0	; select bank0
  3101  056D  158C               	bsf	12,3	;volatile
  3102  056E  0008               	return
  3103  056F                     u1860:	
  3104  056F  0020               	movlb	0	; select bank0
  3105  0570  118C               	bcf	12,3	;volatile
  3106                           
  3107                           ;blynd.c: 374: }
  3108                           
  3109                           ;blynd.c: 373: break;
  3110                           
  3111                           ;blynd.c: 372: default:
  3112                           
  3113                           ;blynd.c: 371: break;
  3114  0571  0008               	return
  3115  0572                     l2239:	
  3116                           
  3117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3118                           ; Switch size 1, requested type "space"
  3119                           ; Number of cases is 1, Range of values is 0 to 0
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte            4     3 (average)
  3123                           ; direct_byte            8     6 (fixed)
  3124                           ; jumptable            260     6 (fixed)
  3125                           ;	Chosen strategy is simple_byte
  3126  0572  0842               	movf	ACTION@SwNum+1,w
  3127  0573  3A00               	xorlw	0	; case 0
  3128  0574  1903               	skipnz
  3129  0575  2D77               	goto	l2545
  3130  0576  2D82               	goto	l252
  3131  0577                     l2545:	
  3132                           
  3133                           ; Switch size 1, requested type "space"
  3134                           ; Number of cases is 3, Range of values is 1 to 3
  3135                           ; switch strategies available:
  3136                           ; Name         Instructions Cycles
  3137                           ; simple_byte           10     6 (average)
  3138                           ; direct_byte           15     9 (fixed)
  3139                           ; jumptable            263     9 (fixed)
  3140                           ;	Chosen strategy is simple_byte
  3141  0577  0841               	movf	ACTION@SwNum,w
  3142  0578  3A01               	xorlw	1	; case 1
  3143  0579  1903               	skipnz
  3144  057A  2CEC               	goto	l2185
  3145  057B  3A03               	xorlw	3	; case 2
  3146  057C  1903               	skipnz
  3147  057D  2D2B               	goto	l2211
  3148  057E  3A01               	xorlw	1	; case 3
  3149  057F  1903               	skipnz
  3150  0580  2D6A               	goto	l250
  3151  0581  2D82               	goto	l252
  3152  0582                     l252:	
  3153  0582  0008               	return
  3154  0583                     __end_of_ACTION:	
  3155                           
  3156                           	psect	text8
  3157  0726                     __ptext8:	
  3158 ;; *************** function _writeUART *****************
  3159 ;; Defined at:
  3160 ;;		line 377 in file "blynd.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  str2Write       1    wreg     PTR unsigned char 
  3163 ;;		 -> st(50), 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  str2Write       1    3[BANK0 ] PTR unsigned char 
  3166 ;;		 -> st(50), 
  3167 ;;  Tx_count        2    1[BANK0 ] int 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3178 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  3180 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  3181 ;;Total ram usage:        4 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    2
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_main
  3188 ;;		_ACTION
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _writeUART
  3194  0726                     _writeUART:	
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  3198                           ;writeUART@str2Write stored from wreg
  3199  0726  0020               	movlb	0	; select bank0
  3200  0727  00A3               	movwf	writeUART@str2Write
  3201                           
  3202                           ;blynd.c: 378: int Tx_count=0;
  3203  0728  01A1               	clrf	writeUART@Tx_count
  3204  0729  01A2               	clrf	writeUART@Tx_count+1
  3205  072A                     l2007:	
  3206                           ;blynd.c: 380: while(Tx_count!=4)
  3207                           
  3208  072A  3004               	movlw	4
  3209  072B  0621               	xorwf	writeUART@Tx_count,w
  3210  072C  0422               	iorwf	writeUART@Tx_count+1,w
  3211  072D  1903               	btfsc	3,2
  3212  072E  0008               	return
  3213  072F                     l257:	
  3214                           ;blynd.c: 381: {
  3215                           ;blynd.c: 383: while (!TX1STAbits.TRMT);
  3216                           
  3217  072F  0023               	movlb	3	; select bank3
  3218  0730  1C9E               	btfss	30,1	;volatile
  3219  0731  2F2F               	goto	l257
  3220                           
  3221                           ;blynd.c: 384: TX1REG = *str2Write;
  3222  0732  0020               	movlb	0	; select bank0
  3223  0733  0823               	movf	writeUART@str2Write,w
  3224  0734  0086               	movwf	6
  3225  0735  0187               	clrf	7
  3226  0736  0801               	movf	1,w
  3227  0737  0023               	movlb	3	; select bank3
  3228  0738  009A               	movwf	26	;volatile
  3229                           
  3230                           ;blynd.c: 385: *str2Write++;
  3231  0739  3001               	movlw	1
  3232  073A  0020               	movlb	0	; select bank0
  3233  073B  00A0               	movwf	??_writeUART
  3234  073C  0820               	movf	??_writeUART,w
  3235  073D  07A3               	addwf	writeUART@str2Write,f
  3236                           
  3237                           ;blynd.c: 386: Tx_count++;
  3238  073E  3001               	movlw	1
  3239  073F  07A1               	addwf	writeUART@Tx_count,f
  3240  0740  3000               	movlw	0
  3241  0741  3DA2               	addwfc	writeUART@Tx_count+1,f
  3242  0742  2F2A               	goto	l2007
  3243  0743                     __end_of_writeUART:	
  3244                           
  3245                           	psect	text9
  3246  0583                     __ptext9:	
  3247 ;; *************** function _atoi *****************
  3248 ;; Defined at:
  3249 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  s               1    wreg     PTR const unsigned char 
  3252 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3255 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3256 ;;  a               2   11[BANK0 ] int 
  3257 ;;  sign            1   10[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2    6[BANK0 ] int 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3268 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
  3269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3270 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  3271 ;;Total ram usage:        8 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		___wmul
  3276 ;;		_isdigit
  3277 ;; This function is called by:
  3278 ;;		_ACTION
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           
  3283                           ;psect for function _atoi
  3284  0583                     _atoi:	
  3285                           
  3286                           ;incstack = 0
  3287                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3288                           ;atoi@s stored from wreg
  3289  0583  0020               	movlb	0	; select bank0
  3290  0584  00AD               	movwf	atoi@s
  3291  0585                     l2059:	
  3292  0585  082D               	movf	atoi@s,w
  3293  0586  0086               	movwf	6
  3294  0587  0187               	clrf	7
  3295  0588  3020               	movlw	32
  3296  0589  0601               	xorwf	1,w
  3297  058A  1D03               	btfss	3,2
  3298  058B  2D91               	goto	l2061
  3299  058C                     l2057:	
  3300  058C  3001               	movlw	1
  3301  058D  00A8               	movwf	??_atoi
  3302  058E  0828               	movf	??_atoi,w
  3303  058F  07AD               	addwf	atoi@s,f
  3304  0590  2D85               	goto	l2059
  3305  0591                     l2061:	
  3306  0591  082D               	movf	atoi@s,w
  3307  0592  0086               	movwf	6
  3308  0593  0187               	clrf	7
  3309  0594  3009               	movlw	9
  3310  0595  0601               	xorwf	1,w
  3311  0596  1903               	btfsc	3,2
  3312  0597  2D8C               	goto	l2057
  3313  0598  01AB               	clrf	atoi@a
  3314  0599  01AC               	clrf	atoi@a+1
  3315  059A  01AA               	clrf	atoi@sign
  3316  059B  082D               	movf	atoi@s,w
  3317  059C  0086               	movwf	6
  3318  059D  0187               	clrf	7
  3319  059E  302D               	movlw	45
  3320  059F  0601               	xorwf	1,w
  3321  05A0  1D03               	btfss	3,2
  3322  05A1  2DA7               	goto	l2069
  3323  05A2  3001               	movlw	1
  3324  05A3  00A8               	movwf	??_atoi
  3325  05A4  0828               	movf	??_atoi,w
  3326  05A5  07AA               	addwf	atoi@sign,f
  3327  05A6  2DAE               	goto	l2075
  3328  05A7                     l2069:	
  3329  05A7  082D               	movf	atoi@s,w
  3330  05A8  0086               	movwf	6
  3331  05A9  0187               	clrf	7
  3332  05AA  302B               	movlw	43
  3333  05AB  0601               	xorwf	1,w
  3334  05AC  1D03               	btfss	3,2
  3335  05AD  2DB2               	goto	l2077
  3336  05AE                     l2075:	
  3337  05AE  3001               	movlw	1
  3338  05AF  00A8               	movwf	??_atoi
  3339  05B0  0828               	movf	??_atoi,w
  3340  05B1  07AD               	addwf	atoi@s,f
  3341  05B2                     l2077:	
  3342  05B2  082D               	movf	atoi@s,w
  3343  05B3  0086               	movwf	6
  3344  05B4  0187               	clrf	7
  3345  05B5  0801               	movf	1,w
  3346  05B6  3187  279D  3185   	fcall	_isdigit
  3347  05B9  1C03               	btfss	3,0
  3348  05BA  2DD9               	goto	l2079
  3349  05BB  0020               	movlb	0	; select bank0
  3350  05BC  082C               	movf	atoi@a+1,w
  3351  05BD  00A1               	movwf	___wmul@multiplier+1
  3352  05BE  082B               	movf	atoi@a,w
  3353  05BF  00A0               	movwf	___wmul@multiplier
  3354  05C0  300A               	movlw	10
  3355  05C1  00A2               	movwf	___wmul@multiplicand
  3356  05C2  3000               	movlw	0
  3357  05C3  00A3               	movwf	___wmul@multiplicand+1
  3358  05C4  3187  2743  3185   	fcall	___wmul
  3359  05C7  0020               	movlb	0	; select bank0
  3360  05C8  082D               	movf	atoi@s,w
  3361  05C9  0086               	movwf	6
  3362  05CA  0187               	clrf	7
  3363  05CB  0801               	movf	1,w
  3364  05CC  0720               	addwf	?___wmul,w
  3365  05CD  00A8               	movwf	??_atoi
  3366  05CE  0821               	movf	?___wmul+1,w
  3367  05CF  1803               	skipnc
  3368  05D0  0A21               	incf	?___wmul+1,w
  3369  05D1  00A9               	movwf	??_atoi+1
  3370  05D2  0828               	movf	??_atoi,w
  3371  05D3  3ED0               	addlw	208
  3372  05D4  00AB               	movwf	atoi@a
  3373  05D5  30FF               	movlw	255
  3374  05D6  3D29               	addwfc	??_atoi+1,w
  3375  05D7  00AC               	movwf	atoi@a+1
  3376  05D8  2DAE               	goto	l2075
  3377  05D9                     l2079:	
  3378  05D9  0020               	movlb	0	; select bank0
  3379  05DA  082A               	movf	atoi@sign,w
  3380  05DB  1903               	btfsc	3,2
  3381  05DC  2DE9               	goto	l2085
  3382  05DD  092B               	comf	atoi@a,w
  3383  05DE  00A8               	movwf	??_atoi
  3384  05DF  092C               	comf	atoi@a+1,w
  3385  05E0  00A9               	movwf	??_atoi+1
  3386  05E1  0AA8               	incf	??_atoi,f
  3387  05E2  1903               	skipnz
  3388  05E3  0AA9               	incf	??_atoi+1,f
  3389  05E4  0828               	movf	??_atoi,w
  3390  05E5  00A6               	movwf	?_atoi
  3391  05E6  0829               	movf	??_atoi+1,w
  3392  05E7  00A7               	movwf	?_atoi+1
  3393  05E8  0008               	return
  3394  05E9                     l2085:	
  3395  05E9  082C               	movf	atoi@a+1,w
  3396  05EA  00A7               	movwf	?_atoi+1
  3397  05EB  082B               	movf	atoi@a,w
  3398  05EC  00A6               	movwf	?_atoi
  3399  05ED  0008               	return
  3400  05EE                     __end_of_atoi:	
  3401                           
  3402                           	psect	text10
  3403  079D                     __ptext10:	
  3404 ;; *************** function _isdigit *****************
  3405 ;; Defined at:
  3406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  c               1    wreg     unsigned char 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  c               1    1[BANK0 ] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  3424 ;;Total ram usage:        2 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    2
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_atoi
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _isdigit
  3436  079D                     _isdigit:	
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3440                           ;isdigit@c stored from wreg
  3441  079D  0020               	movlb	0	; select bank0
  3442  079E  00A1               	movwf	isdigit@c
  3443  079F  01A0               	clrf	_isdigit$642
  3444  07A0  303A               	movlw	58
  3445  07A1  0221               	subwf	isdigit@c,w
  3446  07A2  1803               	skipnc
  3447  07A3  2FAA               	goto	l1995
  3448  07A4  3030               	movlw	48
  3449  07A5  0221               	subwf	isdigit@c,w
  3450  07A6  1C03               	skipc
  3451  07A7  2FAA               	goto	l1995
  3452  07A8  01A0               	clrf	_isdigit$642
  3453  07A9  0AA0               	incf	_isdigit$642,f
  3454  07AA                     l1995:	
  3455  07AA  0C20               	rrf	_isdigit$642,w
  3456  07AB  0008               	return
  3457  07AC                     __end_of_isdigit:	
  3458                           
  3459                           	psect	text11
  3460  0743                     __ptext11:	
  3461 ;; *************** function ___wmul *****************
  3462 ;; Defined at:
  3463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3466 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  product         2    4[BANK0 ] unsigned int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  2    0[BANK0 ] unsigned int 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  3479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3481 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3482 ;;Total ram usage:        6 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    2
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_atoi
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function ___wmul
  3494  0743                     ___wmul:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3498  0743  0020               	movlb	0	; select bank0
  3499  0744  01A4               	clrf	___wmul@product
  3500  0745  01A5               	clrf	___wmul@product+1
  3501  0746                     l1975:	
  3502  0746  1C20               	btfss	___wmul@multiplier,0
  3503  0747  2F4C               	goto	l277
  3504  0748  0822               	movf	___wmul@multiplicand,w
  3505  0749  07A4               	addwf	___wmul@product,f
  3506  074A  0823               	movf	___wmul@multiplicand+1,w
  3507  074B  3DA5               	addwfc	___wmul@product+1,f
  3508  074C                     l277:	
  3509  074C  3001               	movlw	1
  3510  074D                     u1685:	
  3511  074D  35A2               	lslf	___wmul@multiplicand,f
  3512  074E  0DA3               	rlf	___wmul@multiplicand+1,f
  3513  074F  0B89               	decfsz	9,f
  3514  0750  2F4D               	goto	u1685
  3515  0751  3001               	movlw	1
  3516  0752                     u1695:	
  3517  0752  36A1               	lsrf	___wmul@multiplier+1,f
  3518  0753  0CA0               	rrf	___wmul@multiplier,f
  3519  0754  0B89               	decfsz	9,f
  3520  0755  2F52               	goto	u1695
  3521  0756  0820               	movf	___wmul@multiplier,w
  3522  0757  0421               	iorwf	___wmul@multiplier+1,w
  3523  0758  1D03               	btfss	3,2
  3524  0759  2F46               	goto	l1975
  3525  075A  0825               	movf	___wmul@product+1,w
  3526  075B  00A1               	movwf	?___wmul+1
  3527  075C  0824               	movf	___wmul@product,w
  3528  075D  00A0               	movwf	?___wmul
  3529  075E  0008               	return
  3530  075F                     __end_of___wmul:	
  3531                           
  3532                           	psect	intentry
  3533  0004                     __pintentry:	
  3534 ;; *************** function _isr *****************
  3535 ;; Defined at:
  3536 ;;		line 74 in file "blynd.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
  3553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
  3554 ;;Total ram usage:        2 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    1
  3557 ;; This function calls:
  3558 ;;		i1_writeUART
  3559 ;; This function is called by:
  3560 ;;		Interrupt level 1
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564  0004                     _isr:	
  3565                           
  3566                           ;incstack = 0
  3567  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3568                           
  3569                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3570  0005  3180               	pagesel	$
  3571  0006  0020               	movlb	0	; select bank0
  3572  0007  087F               	movf	127,w
  3573  0008  00FB               	movwf	??_isr+1
  3574                           
  3575                           ;blynd.c: 76: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
  3576  0009  0021               	movlb	1	; select bank1
  3577  000A  1C11               	btfss	17,0	;volatile
  3578  000B  285B               	goto	i1l1641
  3579  000C  0020               	movlb	0	; select bank0
  3580  000D  1C11               	btfss	17,0	;volatile
  3581  000E  285B               	goto	i1l1641
  3582                           
  3583                           ;blynd.c: 77: {
  3584                           ;blynd.c: 78: PIR1bits.TMR1IF=0;
  3585  000F  1011               	bcf	17,0	;volatile
  3586                           
  3587                           ;blynd.c: 79: if(TimerCounter1>=108){
  3588  0010  0871               	movf	_TimerCounter1+1,w
  3589  0011  3A80               	xorlw	128
  3590  0012  00FA               	movwf	??_isr
  3591  0013  3080               	movlw	128
  3592  0014  027A               	subwf	??_isr,w
  3593  0015  1D03               	skipz
  3594  0016  2819               	goto	u109_25
  3595  0017  306C               	movlw	108
  3596  0018  0270               	subwf	_TimerCounter1,w
  3597  0019                     u109_25:	
  3598  0019  1C03               	skipc
  3599  001A  284B               	goto	i1l1631
  3600                           
  3601                           ;blynd.c: 80: RF1=0; RF0=0;
  3602  001B  0025               	movlb	5	; select bank5
  3603  001C  108C               	bcf	12,1	;volatile
  3604  001D  100C               	bcf	12,0	;volatile
  3605                           
  3606                           ;blynd.c: 81: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  3607  001E  3047               	movlw	71
  3608  001F  00FA               	movwf	??_isr
  3609  0020  087A               	movf	??_isr,w
  3610  0021  0021               	movlb	1	; select bank1
  3611  0022  00A1               	movwf	(_st^(0+128)+1)
  3612  0023  3030               	movlw	48
  3613  0024  00FA               	movwf	??_isr
  3614  0025  087A               	movf	??_isr,w
  3615  0026  00A2               	movwf	(_st^(0+128)+2)
  3616  0027  3030               	movlw	48
  3617  0028  00FA               	movwf	??_isr
  3618  0029  087A               	movf	??_isr,w
  3619  002A  00A3               	movwf	(_st^(0+128)+3)
  3620  002B  3031               	movlw	49
  3621  002C  00FA               	movwf	??_isr
  3622  002D  087A               	movf	??_isr,w
  3623  002E  00A4               	movwf	(_st^(0+128)+4)
  3624  002F  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  3625  0030  3187  275F  3180   	fcall	i1_writeUART
  3626                           
  3627                           ;blynd.c: 82: T1CONbits.TMR1ON = 0;
  3628  0033  0020               	movlb	0	; select bank0
  3629  0034  1018               	bcf	24,0	;volatile
  3630                           
  3631                           ;blynd.c: 83: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  3632  0035  3047               	movlw	71
  3633  0036  00FA               	movwf	??_isr
  3634  0037  087A               	movf	??_isr,w
  3635  0038  0021               	movlb	1	; select bank1
  3636  0039  00A5               	movwf	(_st^(0+128)+5)
  3637  003A  3030               	movlw	48
  3638  003B  00FA               	movwf	??_isr
  3639  003C  087A               	movf	??_isr,w
  3640  003D  00A6               	movwf	(_st^(0+128)+6)
  3641  003E  3030               	movlw	48
  3642  003F  00FA               	movwf	??_isr
  3643  0040  087A               	movf	??_isr,w
  3644  0041  00A7               	movwf	(_st^(0+128)+7)
  3645  0042  3032               	movlw	50
  3646  0043  00FA               	movwf	??_isr
  3647  0044  087A               	movf	??_isr,w
  3648  0045  00A8               	movwf	(_st^(0+128)+8)
  3649  0046  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  3650  0047  3187  275F  3180   	fcall	i1_writeUART
  3651                           
  3652                           ;blynd.c: 84: }
  3653  004A  285B               	goto	i1l1641
  3654  004B                     i1l1631:	
  3655                           
  3656                           ;blynd.c: 85: else if(curtFlag1){
  3657  004B  0874               	movf	_curtFlag1,w
  3658  004C  0475               	iorwf	_curtFlag1+1,w
  3659  004D  1903               	btfsc	3,2
  3660  004E  285B               	goto	i1l1641
  3661                           
  3662                           ;blynd.c: 86: TimerCounter1=TimerCounter1+1;
  3663  004F  0870               	movf	_TimerCounter1,w
  3664  0050  3E01               	addlw	1
  3665  0051  00F0               	movwf	_TimerCounter1
  3666  0052  3000               	movlw	0
  3667  0053  3D71               	addwfc	_TimerCounter1+1,w
  3668  0054  00F1               	movwf	_TimerCounter1+1
  3669                           
  3670                           ;blynd.c: 87: TMR1H=0x0B; TMR1L=0xDC; T1CONbits.TMR1ON = 1;
  3671  0055  300B               	movlw	11
  3672  0056  0020               	movlb	0	; select bank0
  3673  0057  0097               	movwf	23	;volatile
  3674  0058  30DC               	movlw	220
  3675  0059  0096               	movwf	22	;volatile
  3676  005A  1418               	bsf	24,0	;volatile
  3677  005B                     i1l1641:	
  3678                           
  3679                           ;blynd.c: 89: }
  3680                           ;blynd.c: 90: }
  3681                           ;blynd.c: 93: if(RC1IF==1){
  3682  005B  0020               	movlb	0	; select bank0
  3683  005C  1E91               	btfss	17,5	;volatile
  3684  005D  28AA               	goto	i1l191
  3685                           
  3686                           ;blynd.c: 94: if(RC1STAbits.OERR)
  3687  005E  0023               	movlb	3	; select bank3
  3688  005F  1C9D               	btfss	29,1	;volatile
  3689  0060  286C               	goto	i1l1649
  3690                           
  3691                           ;blynd.c: 95: {
  3692                           ;blynd.c: 96: RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  3693  0061  121D               	bcf	29,4	;volatile
  3694  0062  161D               	bsf	29,4	;volatile
  3695  0063                     i1l173:	
  3696                           ;blynd.c: 97: while(PIR1bits.TXIF==0); TX1REG='F'; while(PIR1bits.TXIF==0);
  3697                           
  3698  0063  0020               	movlb	0	; select bank0
  3699  0064  1E11               	btfss	17,4	;volatile
  3700  0065  2863               	goto	i1l173
  3701  0066  3046               	movlw	70
  3702  0067  0023               	movlb	3	; select bank3
  3703  0068  009A               	movwf	26	;volatile
  3704  0069                     i1l176:	
  3705  0069  0020               	movlb	0	; select bank0
  3706  006A  1E11               	btfss	17,4	;volatile
  3707  006B  2869               	goto	i1l176
  3708  006C                     i1l1649:	
  3709                           
  3710                           ;blynd.c: 98: }
  3711                           ;blynd.c: 99: name[i]=RC1REG;
  3712  006C  0023               	movlb	3	; select bank3
  3713  006D  0819               	movf	25,w	;volatile
  3714  006E  00FA               	movwf	??_isr
  3715  006F  0872               	movf	_i,w
  3716  0070  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  3717  0071  0086               	movwf	6
  3718  0072  3001               	movlw	1	; select bank2/3
  3719  0073  0087               	movwf	7
  3720  0074  087A               	movf	??_isr,w
  3721  0075  0081               	movwf	1
  3722                           
  3723                           ;blynd.c: 101: if(name[0]=='%')
  3724  0076  3025               	movlw	37
  3725  0077  0022               	movlb	2	; select bank2
  3726  0078  0644               	xorwf	_name^(0+256),w
  3727  0079  1D03               	btfss	3,2
  3728  007A  2893               	goto	i1l1661
  3729                           
  3730                           ;blynd.c: 102: {
  3731                           ;blynd.c: 103: i++;
  3732  007B  3001               	movlw	1
  3733  007C  07F2               	addwf	_i,f
  3734  007D  3000               	movlw	0
  3735  007E  3DF3               	addwfc	_i+1,f
  3736                           
  3737                           ;blynd.c: 104: if(i>15)
  3738  007F  0873               	movf	_i+1,w
  3739  0080  3A80               	xorlw	128
  3740  0081  00FA               	movwf	??_isr
  3741  0082  3080               	movlw	128
  3742  0083  027A               	subwf	??_isr,w
  3743  0084  1D03               	skipz
  3744  0085  2888               	goto	u116_25
  3745  0086  3010               	movlw	16
  3746  0087  0272               	subwf	_i,w
  3747  0088                     u116_25:	
  3748  0088  1C03               	skipc
  3749  0089  28AA               	goto	i1l191
  3750                           
  3751                           ;blynd.c: 105: {
  3752                           ;blynd.c: 106: i=0; TX_FLAG = 1; RC1IF=0;
  3753  008A  01F2               	clrf	_i
  3754  008B  01F3               	clrf	_i+1
  3755  008C  3001               	movlw	1
  3756  008D  0020               	movlb	0	; select bank0
  3757  008E  00D9               	movwf	_TX_FLAG
  3758  008F  3000               	movlw	0
  3759  0090  00DA               	movwf	_TX_FLAG+1
  3760  0091  1291               	bcf	17,5	;volatile
  3761                           
  3762                           ;blynd.c: 107: }
  3763                           ;blynd.c: 108: }
  3764  0092  28AA               	goto	i1l191
  3765  0093                     i1l1661:	
  3766                           
  3767                           ;blynd.c: 109: else
  3768                           ;blynd.c: 110: {
  3769                           ;blynd.c: 111: i=0; RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  3770  0093  01F2               	clrf	_i
  3771  0094  01F3               	clrf	_i+1
  3772  0095  0023               	movlb	3	; select bank3
  3773  0096  121D               	bcf	29,4	;volatile
  3774  0097  161D               	bsf	29,4	;volatile
  3775  0098                     i1l182:	
  3776                           ;blynd.c: 112: while(PIR1bits.TX1IF==0); TX1REG='F';
  3777                           
  3778  0098  0020               	movlb	0	; select bank0
  3779  0099  1E11               	btfss	17,4	;volatile
  3780  009A  2898               	goto	i1l182
  3781  009B  3046               	movlw	70
  3782  009C  0023               	movlb	3	; select bank3
  3783  009D  009A               	movwf	26	;volatile
  3784  009E                     i1l185:	
  3785                           ;blynd.c: 113: while(PIR1bits.TX1IF==0); TX1REG='R';
  3786                           
  3787  009E  0020               	movlb	0	; select bank0
  3788  009F  1E11               	btfss	17,4	;volatile
  3789  00A0  289E               	goto	i1l185
  3790  00A1  3052               	movlw	82
  3791  00A2  0023               	movlb	3	; select bank3
  3792  00A3  009A               	movwf	26	;volatile
  3793  00A4                     i1l188:	
  3794                           ;blynd.c: 114: while(PIR1bits.TX1IF==0); TX1REG='R';
  3795                           
  3796  00A4  0020               	movlb	0	; select bank0
  3797  00A5  1E11               	btfss	17,4	;volatile
  3798  00A6  28A4               	goto	i1l188
  3799  00A7  3052               	movlw	82
  3800  00A8  0023               	movlb	3	; select bank3
  3801  00A9  009A               	movwf	26	;volatile
  3802  00AA                     i1l191:	
  3803  00AA  087B               	movf	??_isr+1,w
  3804  00AB  0020               	movlb	0	; select bank0
  3805  00AC  00FF               	movwf	127
  3806  00AD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3807  00AE  0009               	retfie
  3808  00AF                     __end_of_isr:	
  3809                           
  3810                           	psect	text13
  3811  075F                     __ptext13:	
  3812 ;; *************** function i1_writeUART *****************
  3813 ;; Defined at:
  3814 ;;		line 377 in file "blynd.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  str2Write       1    wreg     PTR unsigned char 
  3817 ;;		 -> st(50), 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  str2Write       1    1[COMMON] PTR unsigned char 
  3820 ;;		 -> st(50), 
  3821 ;;  writeUART       2    2[COMMON] int 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      void 
  3824 ;; Registers used:
  3825 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3832 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0
  3833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0
  3834 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
  3835 ;;Total ram usage:        4 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; This function calls:
  3838 ;;		Nothing
  3839 ;; This function is called by:
  3840 ;;		_isr
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function i1_writeUART
  3846  075F                     i1_writeUART:	
  3847                           
  3848                           ;incstack = 0
  3849                           ; Regs used in i1_writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  3850                           ;i1writeUART@str2Write stored from wreg
  3851  075F  00F7               	movwf	i1writeUART@str2Write
  3852                           
  3853                           ;blynd.c: 378: int Tx_count=0;
  3854  0760  01F8               	clrf	i1writeUART@Tx_count
  3855  0761  01F9               	clrf	i1writeUART@Tx_count+1
  3856  0762                     i1l1603:	
  3857                           ;blynd.c: 380: while(Tx_count!=4)
  3858                           
  3859  0762  3004               	movlw	4
  3860  0763  0678               	xorwf	i1writeUART@Tx_count,w
  3861  0764  0479               	iorwf	i1writeUART@Tx_count+1,w
  3862  0765  1903               	btfsc	3,2
  3863  0766  0008               	return
  3864  0767                     i1l257:	
  3865                           ;blynd.c: 381: {
  3866                           ;blynd.c: 383: while (!TX1STAbits.TRMT);
  3867                           
  3868  0767  0023               	movlb	3	; select bank3
  3869  0768  1C9E               	btfss	30,1	;volatile
  3870  0769  2F67               	goto	i1l257
  3871                           
  3872                           ;blynd.c: 384: TX1REG = *str2Write;
  3873  076A  0877               	movf	i1writeUART@str2Write,w
  3874  076B  0086               	movwf	6
  3875  076C  0187               	clrf	7
  3876  076D  0801               	movf	1,w
  3877  076E  009A               	movwf	26	;volatile
  3878                           
  3879                           ;blynd.c: 385: *str2Write++;
  3880  076F  3001               	movlw	1
  3881  0770  00F6               	movwf	??i1_writeUART
  3882  0771  0876               	movf	??i1_writeUART,w
  3883  0772  07F7               	addwf	i1writeUART@str2Write,f
  3884                           
  3885                           ;blynd.c: 386: Tx_count++;
  3886  0773  3001               	movlw	1
  3887  0774  07F8               	addwf	i1writeUART@Tx_count,f
  3888  0775  3000               	movlw	0
  3889  0776  3DF9               	addwfc	i1writeUART@Tx_count+1,f
  3890  0777  2F62               	goto	i1l1603
  3891  0778                     __end_ofi1_writeUART:	
  3892  007E                     btemp	set	126	;btemp
  3893  007E                     int$flags	set	126
  3894  007E                     wtemp0	set	126


Data Sizes:
    Strings     33
    Constant    0
    Data        188
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     45      61
    BANK1            80      0      74
    BANK2            80      0      72
    BANK3            80      0      64
    BANK4            80     20      20
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 2
		 -> ACTION@FanSpeedString(BANK0[2]), ACTION@SwNumString(BANK0[2]), 

    writeUART@str2Write	PTR unsigned char  size(1) Largest target is 50
		 -> st(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_writeUART

Critical Paths under _main in BANK0

    _main->_ACTION
    _ACTION->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    4111
                                             39 BANK0      6     6      0
                                              0 BANK4     20    20      0
                             _ACTION
                         _copy_frame
                     _periperal_init
                        _pin_manager
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _pin_manager                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _periperal_init                                       0     0      0       0
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copy_frame                                           5     1      4     322
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _ACTION                                              25    19      6    3026
                                             14 BANK0     25    19      6
                               _atoi
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _writeUART                                            4     4      0     461
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     759
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      47
                                              4 COMMON     2     2      0
                        i1_writeUART
 ---------------------------------------------------------------------------------
 (5) i1_writeUART                                          4     4      0      47
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACTION
     _atoi
       ___wmul
       _isdigit
     _writeUART
   _copy_frame
   _periperal_init
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR3_Initialize
   _pin_manager
   _writeUART

 _isr (ROOT)
   i1_writeUART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     12F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      48      10       90.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     14      14      14       25.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     12F      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jan 05 16:41:05 2019

   __size_of_periperal_init 0009                           _i 0072                           _j 00E4  
                         _k 0057                 __CFG_CP$OFF 0000                          _M1 0051  
                        _M2 004F                          _M3 004D                          _M4 00D4  
                        _st 00A0                          _sw 0055         ___wmul@multiplicand 0022  
                       l250 056A                         l234 067D                         l252 0582  
                       l244 0521                         l248 0560                         l257 072F  
                       l277 074C                         _GIE 005F                         _RA3 0063  
                       _RF0 1460                         _RF1 1461                         _RF3 1463  
                       _RF5 1465                         _RF7 1467                         _cnt 00E2  
                       _man 005B                         _isr 0004                         _sum 00D6  
              __CFG_BORV$LO 0000                         wreg 0009                __CFG_FOSC$HS 0000  
       __end_ofi1_writeUART 0778                __CFG_LVP$OFF 0000                        l2007 072A  
                      l2211 052B                        l2061 0591                        l2133 06AA  
                      l2301 018F                        l2057 058C                        l2075 05AE  
                      l2059 0585                        l2085 05E9                        l2077 05B2  
                      l2069 05A7                        l2309 01B1                        l2079 05D9  
                      l2183 04E8                        l2239 0572                        l2503 0411  
                      l2351 0254                        l2319 01D8                        l2327 01FF  
                      l2185 04EC                        l2521 0447                        l2425 0342  
                      l2345 023B                        l2353 0257                        l2329 0205  
                      l2507 0419                        l2451 0384                        l2427 0348  
                      l2275 013E                        l2365 02AD                        l2447 037B  
                      l2359 026B                        l2545 0577                        l2385 02E0  
                      l2389 02E9                        l2487 03DD                        l2489 03E3  
                      l1975 0746                        l1995 07AA                        ?_isr 0076  
                      STR_1 0705                        u2075 0239                        u2085 0252  
                      u2357 00FC                        u1815 0687                        u2367 0209  
                      u2377 0215                        u2387 0221                        u1860 056F  
                      u1685 074D                        u1695 0752                        u1935 0167  
                      _PEIE 005E                        _WPUB 020D                        _WPUD 020F  
                      _WPUE 0210                        _WPUG 048D                __CFG_WRT$OFF 0000  
         ACTION@SwNumString 003F                        _len1 00D8                        _len2 00DA  
                      _atoi 0583           writeUART@Tx_count 0021                        _main 00F6  
                      _copy 0120                        _name 0144                        fsr0h 0005  
                      fsr1h 0007                        indf0 0000                        fsr0l 0004  
                      indf1 0001                        fsr1l 0006                        btemp 007E  
                      start 00AF               __CFG_IESO$OFF 0000             _TMR3_Initialize 078E  
                     ??_isr 007A                main@end_flag 0232                       ?_atoi 0026  
                     ?_main 0076               __CFG_WDTE$OFF 0000                       _T1CON 0018  
                     _T3CON 0413                       _RC1IF 008D                       i1l173 0063  
                     i1l182 0098                       i1l191 00AA                       i1l176 0069  
                     i1l257 0767                       i1l185 009E                       i1l188 00A4  
                     _TMR1H 0017                       _TMR3H 0412                       _TMR1L 0016  
                     _TMR3L 0411                       _TRISD 008F              __CFG_FCMEN$OFF 0000  
           __end_of_isdigit 07AC                       atoi@a 002B                       atoi@s 002D  
   __end_of_TMR1_Initialize 07B8              __CFG_BOREN$OFF 0000                       status 0003  
                     wtemp0 007E              __CFG_MCLRE$OFF 0000             __initialization 00B1  
              __end_of_atoi 05EE                __end_of_main 044E              __CFG_LPBOR$OFF 0000  
                    ??_atoi 0028                      ??_main 0047                 i1_writeUART 075F  
              ?_pin_manager 0076             ACTION@sw_status 002F               main@frame_end 0222  
                    _ACTION 044E                      _ANSELA 018C                      _ANSELB 018D  
                    _ANSELD 018F                      _ANSELE 0190                      _ANSELF 040C  
                    _ANSELG 040D                      _T1GCON 0019                      _T3GCON 0414  
                    _RC1REG 0199                      _RC1STA 019D                      i1l1603 0762  
                    i1l1631 004B                      i1l1641 005B                      i1l1661 0093  
                    i1l1649 006C     __end_of_TMR3_Initialize 079D                      u116_25 0088  
                    u109_25 0019                      _TX1REG 019A                      _TX1STA 019E  
            __CFG_PWRTE$OFF 0000              _periperal_init 07B8                      ___wmul 0743  
    main@RX_CHK_FLAG_start1 0228      main@RX_CHK_FLAG_start2 022A          writeUART@str2Write 0023  
      ACTION@Switch_Num_10s 003C                   ??_isdigit 0020            ?_TMR1_Initialize 0076  
   __end_of__initialization 00F2      __end_of_periperal_init 07C1              __pcstackCOMMON 0076  
      ACTION@child_lock_num 003A                __pidataBANK0 07CD                __pidataBANK1 06AE  
              __pidataBANK2 05EE                __pidataBANK3 0636            ACTION@speed_bit1 0030  
          ACTION@speed_bit2 0031                     ?_ACTION 002E                  __pbssBANK0 004D  
                __pbssBANK1 00D2            ?_TMR3_Initialize 0076             __CFG_VCAPEN$OFF 0000  
                _child_LOCK 01A0             ?_periperal_init 0076                  __pmaintext 00F6  
     ACTION@response_starts 0045                     ?___wmul 0020                  __pintentry 0004  
                   _SP1BRGH 019C                     _SP1BRGL 019B        __size_of_pin_manager 0025  
           __size_of_ACTION 0135                     _TX_FLAG 0059                  _copy_frame 0676  
        __size_of_writeUART 001D                ACTION@parent 0032             __size_of___wmul 001C  
                 _FAN_SPEED 00E0             __CFG_STVREN$OFF 0000         i1writeUART@Tx_count 0078  
                   __ptext1 06E0                     __ptext2 07B8                     __ptext3 078E  
                   __ptext4 07AC                     __ptext5 0778                     __ptext6 0676  
                   __ptext7 044E                     __ptext8 0726                     __ptext9 0583  
              ?i1_writeUART 0076                   _T1CONbits 0018                     _isdigit 079D  
              __size_of_isr 00AB                   _COPY_FLAG 0053                     clrloop0 07C8  
      end_of_initialization 00F2               copy_frame@end 0022                     init_ram 07C1  
                   initloop 07C2           _EUSART_Initialize 0778              ACTION@FanSpeed 0036  
        ?_EUSART_Initialize 0076              main@start_flag 0230         ??_EUSART_Initialize 0020  
         __end_of_writeUART 0743                   _TRISAbits 008C                   _TRISCbits 008E  
                 _TRISFbits 030C              __end_of_ACTION 0583   __end_of_EUSART_Initialize 078E  
               ?_copy_frame 0020              ACTION@children 0038              __end_of___wmul 075F  
      main@RX_CHK_FLAG_end1 022C        main@RX_CHK_FLAG_end2 022E         start_initialization 00B1  
               __end_of_isr 00AF                    ??_ACTION 0034            ??_periperal_init 0020  
  __size_of_TMR1_Initialize 000C                    ??___wmul 0024                 __pdataBANK0 005B  
               __pdataBANK1 00A0                 __pdataBANK2 0120                 __pdataBANK3 01A0  
       ACTION@Switch_Num_1s 002E         __size_of_copy_frame 0038        __size_ofi1_writeUART 0019  
               __pbssCOMMON 0070                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK4 0220  __size_of_EUSART_Initialize 0016    __size_of_TMR3_Initialize 000F  
             _TimerCounter1 0070               _TimerCounter2 00D2               ??_pin_manager 0020  
               ACTION@SwNum 0041        ACTION@finalFrameStat 0033                    _BAUD1CON 019F  
                  ?_isdigit 0076                   _curtFlag1 0074                   _curtFlag2 00E8  
           main@frame_start 0220                    _FAN_FLAG 00DC        ACTION@FanSpeedString 003D  
            ___wmul@product 0024                   clear_ram0 07C7                    _PIE1bits 0091  
                  _PIE3bits 0093                    _PIR1bits 0011                    _PIR3bits 0013  
         ??_TMR1_Initialize 0020           ___wmul@multiplier 0020                   _writeUART 0726  
       __end_of_pin_manager 0705                ??_copy_frame 0024             copy_frame@start 0020  
       ACTION@switch_status 0043           ??_TMR3_Initialize 0020                 _isdigit$642 0020  
                _FAN_SPEED1 00DE          __end_of_copy_frame 06AE            __size_of_isdigit 000F  
                ?_writeUART 0076                    __ptext10 079D                    __ptext11 0743  
                  __ptext13 075F                    _curtFlag 00E6               __size_of_atoi 006B  
             __size_of_main 0358                  _RC1STAbits 019D                    int$flags 007E  
                  atoi@sign 002A                    main@cnt1 0224                    main@cnt2 0226  
               _pin_manager 06E0                    isdigit@c 0021                    intlevel1 0000  
         __CFG_CLKOUTEN$OFF 0000        i1writeUART@str2Write 0077               ??i1_writeUART 0076  
             __pstringtext1 0705               __pstringtext2 0000                 ??_writeUART 0020  
                _TX1STAbits 019E             _TMR1_Initialize 07AC  
