

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 24 14:21:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F1526 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018F                     	;# 
   133  0190                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0197                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  020D                     	;# 
   167  020F                     	;# 
   168  0210                     	;# 
   169  0211                     	;# 
   170  0211                     	;# 
   171  0212                     	;# 
   172  0212                     	;# 
   173  0213                     	;# 
   174  0213                     	;# 
   175  0214                     	;# 
   176  0214                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021E                     	;# 
   190  021F                     	;# 
   191  028C                     	;# 
   192  028D                     	;# 
   193  0291                     	;# 
   194  0291                     	;# 
   195  0292                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029D                     	;# 
   202  029E                     	;# 
   203  029F                     	;# 
   204  030C                     	;# 
   205  030D                     	;# 
   206  0311                     	;# 
   207  0311                     	;# 
   208  0312                     	;# 
   209  0313                     	;# 
   210  0318                     	;# 
   211  0318                     	;# 
   212  0319                     	;# 
   213  031A                     	;# 
   214  031C                     	;# 
   215  031C                     	;# 
   216  031D                     	;# 
   217  031E                     	;# 
   218  038C                     	;# 
   219  038D                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  040C                     	;# 
   224  040D                     	;# 
   225  0411                     	;# 
   226  0411                     	;# 
   227  0412                     	;# 
   228  0413                     	;# 
   229  0414                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  0418                     	;# 
   234  0418                     	;# 
   235  0419                     	;# 
   236  041A                     	;# 
   237  041B                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  048D                     	;# 
   242  0491                     	;# 
   243  0491                     	;# 
   244  0492                     	;# 
   245  0492                     	;# 
   246  0493                     	;# 
   247  0493                     	;# 
   248  0493                     	;# 
   249  0494                     	;# 
   250  0494                     	;# 
   251  0495                     	;# 
   252  0495                     	;# 
   253  0496                     	;# 
   254  0496                     	;# 
   255  0497                     	;# 
   256  0497                     	;# 
   257  0595                     	;# 
   258  0596                     	;# 
   259  0597                     	;# 
   260  059C                     	;# 
   261  059D                     	;# 
   262  059E                     	;# 
   263  0611                     	;# 
   264  0611                     	;# 
   265  0612                     	;# 
   266  0613                     	;# 
   267  0614                     	;# 
   268  0614                     	;# 
   269  0615                     	;# 
   270  0616                     	;# 
   271  0617                     	;# 
   272  0617                     	;# 
   273  0618                     	;# 
   274  0619                     	;# 
   275  061A                     	;# 
   276  061A                     	;# 
   277  061B                     	;# 
   278  061C                     	;# 
   279  061D                     	;# 
   280  061D                     	;# 
   281  061E                     	;# 
   282  061F                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294                           
   295                           	psect	idataBANK0
   296  0002                     __pidataBANK0:	
   297                           
   298                           ;initializer for _man
   299  0002  3401               	retlw	1
   300  0003  3400               	retlw	0
   301                           
   302                           	psect	idataBANK1
   303  0F51                     __pidataBANK1:	
   304                           
   305                           ;initializer for _st
   306  0F51  3454               	retlw	84
   307  0F52  3454               	retlw	84
   308  0F53  3454               	retlw	84
   309  0F54  3454               	retlw	84
   310  0F55  3454               	retlw	84
   311  0F56  3454               	retlw	84
   312  0F57  3454               	retlw	84
   313  0F58  3454               	retlw	84
   314  0F59  3454               	retlw	84
   315  0F5A  3454               	retlw	84
   316  0F5B  3454               	retlw	84
   317  0F5C  3454               	retlw	84
   318  0F5D  3454               	retlw	84
   319  0F5E  3454               	retlw	84
   320  0F5F  3454               	retlw	84
   321  0F60  3454               	retlw	84
   322  0F61  3454               	retlw	84
   323  0F62  3454               	retlw	84
   324  0F63  3454               	retlw	84
   325  0F64  3454               	retlw	84
   326  0F65  3454               	retlw	84
   327  0F66  3454               	retlw	84
   328  0F67  3454               	retlw	84
   329  0F68  3454               	retlw	84
   330  0F69  3454               	retlw	84
   331  0F6A  3454               	retlw	84
   332  0F6B  3454               	retlw	84
   333  0F6C  3454               	retlw	84
   334  0F6D  3454               	retlw	84
   335  0F6E  3454               	retlw	84
   336  0F6F  3454               	retlw	84
   337  0F70  3454               	retlw	84
   338  0F71  3454               	retlw	84
   339  0F72  3454               	retlw	84
   340  0F73  3454               	retlw	84
   341  0F74  3454               	retlw	84
   342  0F75  3454               	retlw	84
   343  0F76  3454               	retlw	84
   344  0F77  3454               	retlw	84
   345  0F78  3454               	retlw	84
   346  0F79  3454               	retlw	84
   347  0F7A  3400               	retlw	0
   348  0F7B  3400               	retlw	0
   349  0F7C  3400               	retlw	0
   350  0F7D  3400               	retlw	0
   351  0F7E  3400               	retlw	0
   352  0F7F  3400               	retlw	0
   353  0F80  3400               	retlw	0
   354  0F81  3400               	retlw	0
   355  0F82  3400               	retlw	0
   356                           
   357                           	psect	idataBANK2
   358  0791                     __pidataBANK2:	
   359                           
   360                           ;initializer for _copy
   361  0791  3424               	retlw	36
   362  0792  3400               	retlw	0
   363  0793  3400               	retlw	0
   364  0794  3400               	retlw	0
   365  0795  3400               	retlw	0
   366  0796  3400               	retlw	0
   367  0797  3400               	retlw	0
   368  0798  3400               	retlw	0
   369  0799  3400               	retlw	0
   370  079A  3400               	retlw	0
   371  079B  3400               	retlw	0
   372  079C  3400               	retlw	0
   373  079D  3400               	retlw	0
   374  079E  3400               	retlw	0
   375  079F  3400               	retlw	0
   376  07A0  3400               	retlw	0
   377  07A1  3400               	retlw	0
   378  07A2  3400               	retlw	0
   379  07A3  3400               	retlw	0
   380  07A4  3400               	retlw	0
   381  07A5  3400               	retlw	0
   382  07A6  3400               	retlw	0
   383  07A7  3400               	retlw	0
   384  07A8  3400               	retlw	0
   385  07A9  3400               	retlw	0
   386  07AA  3400               	retlw	0
   387  07AB  3400               	retlw	0
   388  07AC  3400               	retlw	0
   389  07AD  3400               	retlw	0
   390  07AE  3400               	retlw	0
   391  07AF  3400               	retlw	0
   392  07B0  3400               	retlw	0
   393  07B1  3400               	retlw	0
   394  07B2  3400               	retlw	0
   395  07B3  3400               	retlw	0
   396  07B4  3400               	retlw	0
   397                           
   398                           ;initializer for _name
   399  07B5  3461               	retlw	97
   400  07B6  3400               	retlw	0
   401  07B7  3400               	retlw	0
   402  07B8  3400               	retlw	0
   403  07B9  3400               	retlw	0
   404  07BA  3400               	retlw	0
   405  07BB  3400               	retlw	0
   406  07BC  3400               	retlw	0
   407  07BD  3400               	retlw	0
   408  07BE  3400               	retlw	0
   409  07BF  3400               	retlw	0
   410  07C0  3400               	retlw	0
   411  07C1  3400               	retlw	0
   412  07C2  3400               	retlw	0
   413  07C3  3400               	retlw	0
   414  07C4  3400               	retlw	0
   415  07C5  3400               	retlw	0
   416  07C6  3400               	retlw	0
   417  07C7  3400               	retlw	0
   418  07C8  3400               	retlw	0
   419  07C9  3400               	retlw	0
   420  07CA  3400               	retlw	0
   421  07CB  3400               	retlw	0
   422  07CC  3400               	retlw	0
   423  07CD  3400               	retlw	0
   424  07CE  3400               	retlw	0
   425  07CF  3400               	retlw	0
   426  07D0  3400               	retlw	0
   427  07D1  3400               	retlw	0
   428  07D2  3400               	retlw	0
   429  07D3  3400               	retlw	0
   430  07D4  3400               	retlw	0
   431  07D5  3400               	retlw	0
   432  07D6  3400               	retlw	0
   433  07D7  3400               	retlw	0
   434  07D8  3400               	retlw	0
   435                           
   436                           	psect	idataBANK3
   437  0FC0                     __pidataBANK3:	
   438                           
   439                           ;initializer for _child_LOCK
   440  0FC0  3400               	retlw	low (STR_1| (0+32768))
   441  0FC1  3490               	retlw	high (STR_1| (0+32768))
   442  0FC2  3400               	retlw	0
   443  0FC3  3400               	retlw	0
   444  0FC4  3400               	retlw	0
   445  0FC5  3400               	retlw	0
   446  0FC6  3400               	retlw	0
   447  0FC7  3400               	retlw	0
   448  0FC8  3400               	retlw	0
   449  0FC9  3400               	retlw	0
   450  0FCA  3400               	retlw	0
   451  0FCB  3400               	retlw	0
   452  0FCC  3400               	retlw	0
   453  0FCD  3400               	retlw	0
   454  0FCE  3400               	retlw	0
   455  0FCF  3400               	retlw	0
   456  0FD0  3400               	retlw	0
   457  0FD1  3400               	retlw	0
   458  0FD2  3400               	retlw	0
   459  0FD3  3400               	retlw	0
   460  0FD4  3400               	retlw	0
   461  0FD5  3400               	retlw	0
   462  0FD6  3400               	retlw	0
   463  0FD7  3400               	retlw	0
   464  0FD8  3400               	retlw	0
   465  0FD9  3400               	retlw	0
   466  0FDA  3400               	retlw	0
   467  0FDB  3400               	retlw	0
   468  0FDC  3400               	retlw	0
   469  0FDD  3400               	retlw	0
   470  0FDE  3400               	retlw	0
   471  0FDF  3400               	retlw	0
   472  0FE0  3400               	retlw	0
   473  0FE1  3400               	retlw	0
   474  0FE2  3400               	retlw	0
   475  0FE3  3400               	retlw	0
   476  0FE4  3400               	retlw	0
   477  0FE5  3400               	retlw	0
   478  0FE6  3400               	retlw	0
   479  0FE7  3400               	retlw	0
   480  0FE8  3400               	retlw	0
   481  0FE9  3400               	retlw	0
   482  0FEA  3400               	retlw	0
   483  0FEB  3400               	retlw	0
   484  0FEC  3400               	retlw	0
   485  0FED  3400               	retlw	0
   486  0FEE  3400               	retlw	0
   487  0FEF  3400               	retlw	0
   488  0FF0  3400               	retlw	0
   489  0FF1  3400               	retlw	0
   490  0FF2  3400               	retlw	0
   491  0FF3  3400               	retlw	0
   492  0FF4  3400               	retlw	0
   493  0FF5  3400               	retlw	0
   494  0FF6  3400               	retlw	0
   495  0FF7  3400               	retlw	0
   496  0FF8  3400               	retlw	0
   497  0FF9  3400               	retlw	0
   498  0FFA  3400               	retlw	0
   499  0FFB  3400               	retlw	0
   500  0FFC  3400               	retlw	0
   501  0FFD  3400               	retlw	0
   502  0FFE  3400               	retlw	0
   503  0FFF  3400               	retlw	0
   504  0019                     _T1GCON	set	25
   505  0018                     _T1CON	set	24
   506  0016                     _TMR1L	set	22
   507  0017                     _TMR1H	set	23
   508  0018                     _T1CONbits	set	24
   509  0011                     _PIR1bits	set	17
   510  0013                     _PIR3bits	set	19
   511  005E                     _PEIE	set	94
   512  005F                     _GIE	set	95
   513  008D                     _RC1IF	set	141
   514  0062                     _RA2	set	98
   515  0063                     _RA3	set	99
   516  008C                     _TRISAbits	set	140
   517  008D                     _TRISBbits	set	141
   518  008E                     _TRISCbits	set	142
   519  008F                     _TRISD	set	143
   520  0090                     _TRISEbits	set	144
   521  0091                     _PIE1bits	set	145
   522  0093                     _PIE3bits	set	147
   523  018C                     _ANSELA	set	396
   524  018D                     _ANSELB	set	397
   525  018F                     _ANSELD	set	399
   526  0190                     _ANSELE	set	400
   527  019C                     _SP1BRGH	set	412
   528  019B                     _SP1BRGL	set	411
   529  019E                     _TX1STA	set	414
   530  019D                     _RC1STA	set	413
   531  019F                     _BAUD1CON	set	415
   532  019E                     _TX1STAbits	set	414
   533  0199                     _RC1REG	set	409
   534  019A                     _TX1REG	set	410
   535  019D                     _RC1STAbits	set	413
   536  020D                     _WPUB	set	525
   537  020F                     _WPUD	set	527
   538  0210                     _WPUE	set	528
   539  1462                     _RF2	set	5218
   540  1463                     _RF3	set	5219
   541  1465                     _RF5	set	5221
   542  1467                     _RF7	set	5223
   543  1460                     _RF0	set	5216
   544  1461                     _RF1	set	5217
   545  030C                     _TRISFbits	set	780
   546  040C                     _ANSELF	set	1036
   547  040D                     _ANSELG	set	1037
   548  0414                     _T3GCON	set	1044
   549  0413                     _T3CON	set	1043
   550  0411                     _TMR3L	set	1041
   551  0412                     _TMR3H	set	1042
   552  0413                     _T3CONbits	set	1043
   553  048D                     _WPUG	set	1165
   554                           
   555                           	psect	stringtext1
   556  1000                     __pstringtext1:	
   557  1000                     STR_1:	
   558  1000  3430               	retlw	48	;'0'
   559  1001  3430               	retlw	48	;'0'
   560  1002  3430               	retlw	48	;'0'
   561  1003  3430               	retlw	48	;'0'
   562  1004  3430               	retlw	48	;'0'
   563  1005  3430               	retlw	48	;'0'
   564  1006  3430               	retlw	48	;'0'
   565  1007  3430               	retlw	48	;'0'
   566  1008  3430               	retlw	48	;'0'
   567  1009  3430               	retlw	48	;'0'
   568  100A  3430               	retlw	48	;'0'
   569  100B  3430               	retlw	48	;'0'
   570  100C  3430               	retlw	48	;'0'
   571  100D  3430               	retlw	48	;'0'
   572  100E  3430               	retlw	48	;'0'
   573  100F  3430               	retlw	48	;'0'
   574  1010  3430               	retlw	48	;'0'
   575  1011  3430               	retlw	48	;'0'
   576  1012  3430               	retlw	48	;'0'
   577  1013  3430               	retlw	48	;'0'
   578  1014  3430               	retlw	48	;'0'
   579  1015  3430               	retlw	48	;'0'
   580  1016  3430               	retlw	48	;'0'
   581  1017  3430               	retlw	48	;'0'
   582  1018  3430               	retlw	48	;'0'
   583  1019  3430               	retlw	48	;'0'
   584  101A  3430               	retlw	48	;'0'
   585  101B  3430               	retlw	48	;'0'
   586  101C  3430               	retlw	48	;'0'
   587  101D  3430               	retlw	48	;'0'
   588  101E  3430               	retlw	48	;'0'
   589  101F  3430               	retlw	48	;'0'
   590  1020  3400               	retlw	0
   591                           
   592                           	psect	stringtext2
   593  0000                     __pstringtext2:	
   594                           
   595                           ; #config settings
   596  0000                     
   597                           	psect	cinit
   598  0105                     start_initialization:	
   599  0105                     __initialization:	
   600                           
   601                           ; Initialize objects allocated to BANK0
   602  0105  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
   603  0108  00DB               	movwf	__pdataBANK0& (0+127)
   604  0109  3180  2003  3181   	fcall	__pidataBANK0+1	;fetch initializer
   605  010C  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   606                           
   607                           ; Initialize objects allocated to BANK1
   608  010D  3051               	movlw	low __pidataBANK1
   609  010E  0084               	movwf	4
   610  010F  308F               	movlw	(high __pidataBANK1)| (0+128)
   611  0110  0085               	movwf	5
   612  0111  30A0               	movlw	low __pdataBANK1
   613  0112  0086               	movwf	6
   614  0113  3000               	movlw	high __pdataBANK1
   615  0114  0087               	movwf	7
   616  0115  3032               	movlw	50
   617  0116  318E  26A5  3181   	fcall	init_ram
   618                           
   619                           ; Initialize objects allocated to BANK2
   620  0119  3091               	movlw	low __pidataBANK2
   621  011A  0084               	movwf	4
   622  011B  3087               	movlw	(high __pidataBANK2)| (0+128)
   623  011C  0085               	movwf	5
   624  011D  3020               	movlw	low __pdataBANK2
   625  011E  0086               	movwf	6
   626  011F  3001               	movlw	high __pdataBANK2
   627  0120  0087               	movwf	7
   628  0121  3048               	movlw	72
   629  0122  318E  26A5  3181   	fcall	init_ram
   630                           
   631                           ; Initialize objects allocated to BANK3
   632  0125  30C0               	movlw	low __pidataBANK3
   633  0126  0084               	movwf	4
   634  0127  308F               	movlw	(high __pidataBANK3)| (0+128)
   635  0128  0085               	movwf	5
   636  0129  30A0               	movlw	low __pdataBANK3
   637  012A  0086               	movwf	6
   638  012B  3001               	movlw	high __pdataBANK3
   639  012C  0087               	movwf	7
   640  012D  3040               	movlw	64
   641  012E  318E  26A5  3181   	fcall	init_ram
   642                           
   643                           ; Clear objects allocated to COMMON
   644  0131  01F0               	clrf	__pbssCOMMON& (0+127)
   645  0132  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   646  0133  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   647  0134  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   648  0135  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   649  0136  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   650                           
   651                           ; Clear objects allocated to BANK0
   652  0137  304D               	movlw	low __pbssBANK0
   653  0138  0084               	movwf	4
   654  0139  3000               	movlw	high __pbssBANK0
   655  013A  0085               	movwf	5
   656  013B  300E               	movlw	14
   657  013C  318E  269F  3181   	fcall	clear_ram0
   658                           
   659                           ; Clear objects allocated to BANK1
   660  013F  30D2               	movlw	low __pbssBANK1
   661  0140  0084               	movwf	4
   662  0141  3000               	movlw	high __pbssBANK1
   663  0142  0085               	movwf	5
   664  0143  3018               	movlw	24
   665  0144  318E  269F         	fcall	clear_ram0
   666  0146                     end_of_initialization:	
   667                           ;End of C runtime variable initialization code
   668                           
   669  0146                     __end_of__initialization:	
   670  0146  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   671  0147  0020               	movlb	0
   672  0148  3181  294A         	ljmp	_main	;jump to C main() function
   673                           
   674                           	psect	bssCOMMON
   675  0070                     __pbssCOMMON:	
   676  0070                     _TimerCounter2:	
   677  0070                     	ds	2
   678  0072                     _TimerCounter1:	
   679  0072                     	ds	2
   680  0074                     _i:	
   681  0074                     	ds	2
   682                           
   683                           	psect	bssBANK0
   684  004D                     __pbssBANK0:	
   685  004D                     _M4:	
   686  004D                     	ds	2
   687  004F                     _M3:	
   688  004F                     	ds	2
   689  0051                     _M2:	
   690  0051                     	ds	2
   691  0053                     _M1:	
   692  0053                     	ds	2
   693  0055                     _COPY_FLAG:	
   694  0055                     	ds	2
   695  0057                     _k:	
   696  0057                     	ds	2
   697  0059                     _curtFlag1:	
   698  0059                     	ds	2
   699                           
   700                           	psect	dataBANK0
   701  005B                     __pdataBANK0:	
   702  005B                     _man:	
   703  005B                     	ds	2
   704                           
   705                           	psect	bssBANK1
   706  00D2                     __pbssBANK1:	
   707  00D2                     _sw:	
   708  00D2                     	ds	2
   709  00D4                     _sum:	
   710  00D4                     	ds	2
   711  00D6                     _len1:	
   712  00D6                     	ds	2
   713  00D8                     _len2:	
   714  00D8                     	ds	2
   715  00DA                     _TX_FLAG:	
   716  00DA                     	ds	2
   717  00DC                     _FAN_FLAG:	
   718  00DC                     	ds	2
   719  00DE                     _FAN_SPEED1:	
   720  00DE                     	ds	2
   721  00E0                     _FAN_SPEED:	
   722  00E0                     	ds	2
   723  00E2                     _cnt:	
   724  00E2                     	ds	2
   725  00E4                     _j:	
   726  00E4                     	ds	2
   727  00E6                     _curtFlag:	
   728  00E6                     	ds	2
   729  00E8                     _curtFlag2:	
   730  00E8                     	ds	2
   731                           
   732                           	psect	dataBANK1
   733  00A0                     __pdataBANK1:	
   734  00A0                     _st:	
   735  00A0                     	ds	50
   736                           
   737                           	psect	dataBANK2
   738  0120                     __pdataBANK2:	
   739  0120                     _copy:	
   740  0120                     	ds	36
   741  0144                     _name:	
   742  0144                     	ds	36
   743                           
   744                           	psect	dataBANK3
   745  01A0                     __pdataBANK3:	
   746  01A0                     _child_LOCK:	
   747  01A0                     	ds	64
   748                           
   749                           	psect	inittext
   750  0EA5                     init_ram:	
   751  0EA5  00FE               	movwf	126
   752  0EA6                     initloop:	
   753  0EA6  0012               	moviw fsr0++
   754  0EA7  001E               	movwi fsr1++
   755  0EA8  0BFE               	decfsz	126,f
   756  0EA9  2EA6               	goto	initloop
   757  0EAA  3400               	retlw	0
   758                           
   759                           	psect	clrtext
   760  0E9F                     clear_ram0:	
   761                           ;	Called with FSR0 containing the base address, and
   762                           ;	WREG with the size to clear
   763                           
   764  0E9F  0064               	clrwdt	;clear the watchdog before getting into this loop
   765  0EA0                     clrloop0:	
   766  0EA0  0180               	clrf	0	;clear RAM location pointed to by FSR
   767  0EA1  3101               	addfsr 0,1
   768  0EA2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   769  0EA3  2EA0               	goto	clrloop0	;have we reached the end yet?
   770  0EA4  3400               	retlw	0	;all done for this memory range, return
   771                           
   772                           	psect	cstackBANK4
   773  0220                     __pcstackBANK4:	
   774  0220                     main@frame_start:	
   775                           
   776                           ; 2 bytes @ 0x0
   777  0220                     	ds	2
   778  0222                     main@frame_end:	
   779                           
   780                           ; 2 bytes @ 0x2
   781  0222                     	ds	2
   782  0224                     main@cnt1:	
   783                           
   784                           ; 2 bytes @ 0x4
   785  0224                     	ds	2
   786  0226                     main@cnt2:	
   787                           
   788                           ; 2 bytes @ 0x6
   789  0226                     	ds	2
   790  0228                     main@RX_CHK_FLAG_start1:	
   791                           
   792                           ; 2 bytes @ 0x8
   793  0228                     	ds	2
   794  022A                     main@RX_CHK_FLAG_start2:	
   795                           
   796                           ; 2 bytes @ 0xA
   797  022A                     	ds	2
   798  022C                     main@RX_CHK_FLAG_end1:	
   799                           
   800                           ; 2 bytes @ 0xC
   801  022C                     	ds	2
   802  022E                     main@RX_CHK_FLAG_end2:	
   803                           
   804                           ; 2 bytes @ 0xE
   805  022E                     	ds	2
   806  0230                     main@start_flag:	
   807                           
   808                           ; 2 bytes @ 0x10
   809  0230                     	ds	2
   810  0232                     main@end_flag:	
   811                           
   812                           ; 2 bytes @ 0x12
   813  0232                     	ds	2
   814                           
   815                           	psect	cstackCOMMON
   816  0076                     __pcstackCOMMON:	
   817  0076                     ?_isdigit:	
   818  0076                     ?_writeUART:	
   819                           ; 1 bit 
   820                           
   821  0076                     ?_EUSART_Initialize:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0076                     ?_TMR1_Initialize:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0076                     ?_TMR3_Initialize:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0076                     ?_pin_manager:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0076                     ?_isr:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0076                     ?_periperal_init:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0076                     ?_main:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0076                     ?i1_writeUART:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0076                     ??i1_writeUART:	
   846                           ; 1 bytes @ 0x0
   847                           
   848                           
   849                           ; 1 bytes @ 0x0
   850  0076                     	ds	1
   851  0077                     i1writeUART@str2Write:	
   852                           
   853                           ; 1 bytes @ 0x1
   854  0077                     	ds	1
   855  0078                     i1writeUART@Tx_count:	
   856                           
   857                           ; 2 bytes @ 0x2
   858  0078                     	ds	2
   859  007A                     ??_isr:	
   860                           
   861                           ; 1 bytes @ 0x4
   862  007A                     	ds	2
   863                           
   864                           	psect	cstackBANK0
   865  0020                     __pcstackBANK0:	
   866  0020                     ??_writeUART:	
   867  0020                     ??_EUSART_Initialize:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0020                     ??_TMR1_Initialize:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0020                     ??_TMR3_Initialize:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0020                     ??_pin_manager:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0020                     ?_copy_frame:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0020                     ??_isdigit:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0020                     ??_periperal_init:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0020                     ?___wmul:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0020                     _isdigit$740:	
   892                           ; 2 bytes @ 0x0
   893                           
   894  0020                     copy_frame@start:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0020                     ___wmul@multiplier:	
   898                           ; 2 bytes @ 0x0
   899                           
   900                           
   901                           ; 2 bytes @ 0x0
   902  0020                     	ds	1
   903  0021                     isdigit@c:	
   904  0021                     writeUART@Tx_count:	
   905                           ; 1 bytes @ 0x1
   906                           
   907                           
   908                           ; 2 bytes @ 0x1
   909  0021                     	ds	1
   910  0022                     copy_frame@end:	
   911  0022                     ___wmul@multiplicand:	
   912                           ; 2 bytes @ 0x2
   913                           
   914                           
   915                           ; 2 bytes @ 0x2
   916  0022                     	ds	1
   917  0023                     writeUART@str2Write:	
   918                           
   919                           ; 1 bytes @ 0x3
   920  0023                     	ds	1
   921  0024                     ??_copy_frame:	
   922  0024                     ??___wmul:	
   923                           ; 1 bytes @ 0x4
   924                           
   925  0024                     ___wmul@product:	
   926                           ; 1 bytes @ 0x4
   927                           
   928                           
   929                           ; 2 bytes @ 0x4
   930  0024                     	ds	2
   931  0026                     ?_atoi:	
   932                           
   933                           ; 2 bytes @ 0x6
   934  0026                     	ds	2
   935  0028                     ??_atoi:	
   936                           
   937                           ; 1 bytes @ 0x8
   938  0028                     	ds	2
   939  002A                     atoi@sign:	
   940                           
   941                           ; 1 bytes @ 0xA
   942  002A                     	ds	1
   943  002B                     atoi@a:	
   944                           
   945                           ; 2 bytes @ 0xB
   946  002B                     	ds	2
   947  002D                     atoi@s:	
   948                           
   949                           ; 1 bytes @ 0xD
   950  002D                     	ds	1
   951  002E                     ?_ACTION:	
   952  002E                     ACTION@Switch_Num_1s:	
   953                           ; 1 bytes @ 0xE
   954                           
   955                           
   956                           ; 1 bytes @ 0xE
   957  002E                     	ds	1
   958  002F                     ACTION@sw_status:	
   959                           
   960                           ; 1 bytes @ 0xF
   961  002F                     	ds	1
   962  0030                     ACTION@speed_bit1:	
   963                           
   964                           ; 1 bytes @ 0x10
   965  0030                     	ds	1
   966  0031                     ACTION@speed_bit2:	
   967                           
   968                           ; 1 bytes @ 0x11
   969  0031                     	ds	1
   970  0032                     ACTION@parent:	
   971                           
   972                           ; 1 bytes @ 0x12
   973  0032                     	ds	1
   974  0033                     ACTION@finalFrameStat:	
   975                           
   976                           ; 1 bytes @ 0x13
   977  0033                     	ds	1
   978  0034                     ??_ACTION:	
   979                           
   980                           ; 1 bytes @ 0x14
   981  0034                     	ds	2
   982  0036                     ACTION@FanSpeed:	
   983                           
   984                           ; 2 bytes @ 0x16
   985  0036                     	ds	2
   986  0038                     ACTION@children:	
   987                           
   988                           ; 2 bytes @ 0x18
   989  0038                     	ds	2
   990  003A                     ACTION@child_lock_num:	
   991                           
   992                           ; 2 bytes @ 0x1A
   993  003A                     	ds	2
   994  003C                     ACTION@Switch_Num_10s:	
   995                           
   996                           ; 1 bytes @ 0x1C
   997  003C                     	ds	1
   998  003D                     ACTION@FanSpeedString:	
   999                           
  1000                           ; 2 bytes @ 0x1D
  1001  003D                     	ds	2
  1002  003F                     ACTION@SwNumString:	
  1003                           
  1004                           ; 2 bytes @ 0x1F
  1005  003F                     	ds	2
  1006  0041                     ACTION@SwNum:	
  1007                           
  1008                           ; 2 bytes @ 0x21
  1009  0041                     	ds	2
  1010  0043                     ACTION@response_starts:	
  1011                           
  1012                           ; 2 bytes @ 0x23
  1013  0043                     	ds	2
  1014  0045                     ACTION@switch_status:	
  1015                           
  1016                           ; 2 bytes @ 0x25
  1017  0045                     	ds	2
  1018  0047                     ??_main:	
  1019                           
  1020                           ; 1 bytes @ 0x27
  1021  0047                     	ds	6
  1022                           
  1023                           	psect	maintext
  1024  014A                     __pmaintext:	
  1025 ;;
  1026 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1027 ;;
  1028 ;; *************** function _main *****************
  1029 ;; Defined at:
  1030 ;;		line 147 in file "blynd.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  end_flag        2   18[BANK4 ] int 
  1035 ;;  start_flag      2   16[BANK4 ] int 
  1036 ;;  RX_CHK_FLAG_    2   14[BANK4 ] int 
  1037 ;;  RX_CHK_FLAG_    2   12[BANK4 ] int 
  1038 ;;  RX_CHK_FLAG_    2   10[BANK4 ] int 
  1039 ;;  RX_CHK_FLAG_    2    8[BANK4 ] int 
  1040 ;;  cnt2            2    6[BANK4 ] unsigned int 
  1041 ;;  cnt1            2    4[BANK4 ] unsigned int 
  1042 ;;  frame_end       2    2[BANK4 ] unsigned int 
  1043 ;;  frame_start     2    0[BANK4 ] unsigned int 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : B1F/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  1053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  1054 ;;      Locals:         0       0       0       0       0      20       0       0       0       0       0
  1055 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0
  1056 ;;      Totals:         0       6       0       0       0      20       0       0       0       0       0
  1057 ;;Total ram usage:       26 bytes
  1058 ;; Hardware stack levels required when called:    5
  1059 ;; This function calls:
  1060 ;;		_ACTION
  1061 ;;		_copy_frame
  1062 ;;		_periperal_init
  1063 ;;		_pin_manager
  1064 ;;		_writeUART
  1065 ;; This function is called by:
  1066 ;;		Startup code after reset
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _main
  1072  014A                     _main:	
  1073                           
  1074                           ;blynd.c: 148: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1078  014A  3029               	movlw	41
  1079  014B  0020               	movlb	0	; select bank0
  1080  014C  00C8               	movwf	??_main+1
  1081  014D  3096               	movlw	150
  1082  014E  00C7               	movwf	??_main
  1083  014F  307F               	movlw	127
  1084  0150                     u2677:	
  1085  0150  0B89               	decfsz	9,f
  1086  0151  2950               	goto	u2677
  1087  0152  0BC7               	decfsz	??_main,f
  1088  0153  2950               	goto	u2677
  1089  0154  0BC8               	decfsz	??_main+1,f
  1090  0155  2950               	goto	u2677
  1091                           
  1092                           ;blynd.c: 150: unsigned int frame_start = 0, frame_end = 0,cnt1=0,cnt2=0;
  1093  0156  0024               	movlb	4	; select bank4
  1094  0157  01A0               	clrf	main@frame_start^(0+512)
  1095  0158  01A1               	clrf	(main@frame_start+1)^(0+512)
  1096  0159  01A2               	clrf	main@frame_end^(0+512)
  1097  015A  01A3               	clrf	(main@frame_end+1)^(0+512)
  1098  015B  01A4               	clrf	main@cnt1^(0+512)
  1099  015C  01A5               	clrf	(main@cnt1+1)^(0+512)
  1100  015D  01A6               	clrf	main@cnt2^(0+512)
  1101  015E  01A7               	clrf	(main@cnt2+1)^(0+512)
  1102                           
  1103                           ;blynd.c: 152: int RX_CHK_FLAG_start1 = 0 ,RX_CHK_FLAG_start2 = 0, start_flag=0, RX_CHK_
      +                          FLAG_end1 = 0, RX_CHK_FLAG_end2 = 0, end_flag=0;
  1104  015F  01A8               	clrf	main@RX_CHK_FLAG_start1^(0+512)
  1105  0160  01A9               	clrf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1106  0161  01AA               	clrf	main@RX_CHK_FLAG_start2^(0+512)
  1107  0162  01AB               	clrf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1108  0163  01B0               	clrf	main@start_flag^(0+512)
  1109  0164  01B1               	clrf	(main@start_flag+1)^(0+512)
  1110  0165  01AC               	clrf	main@RX_CHK_FLAG_end1^(0+512)
  1111  0166  01AD               	clrf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1112  0167  01AE               	clrf	main@RX_CHK_FLAG_end2^(0+512)
  1113  0168  01AF               	clrf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1114  0169  01B2               	clrf	main@end_flag^(0+512)
  1115  016A  01B3               	clrf	(main@end_flag+1)^(0+512)
  1116                           
  1117                           ;blynd.c: 154: pin_manager();
  1118  016B  318F  2720  3181   	fcall	_pin_manager
  1119                           
  1120                           ;blynd.c: 155: periperal_init();
  1121  016E  3187  27F6  3181   	fcall	_periperal_init
  1122                           
  1123                           ;blynd.c: 157: RF1 = 0; RF0 = 0; RA3 = 0; RA2 = 0;
  1124  0171  0025               	movlb	5	; select bank5
  1125  0172  108C               	bcf	12,1	;volatile
  1126  0173  100C               	bcf	12,0	;volatile
  1127  0174  0020               	movlb	0	; select bank0
  1128  0175  118C               	bcf	12,3	;volatile
  1129  0176  110C               	bcf	12,2	;volatile
  1130                           
  1131                           ;blynd.c: 158: M1=1; M2=1; M3=1; M4=1;
  1132  0177  3001               	movlw	1
  1133  0178  00D3               	movwf	_M1
  1134  0179  3000               	movlw	0
  1135  017A  00D4               	movwf	_M1+1
  1136  017B  3001               	movlw	1
  1137  017C  00D1               	movwf	_M2
  1138  017D  3000               	movlw	0
  1139  017E  00D2               	movwf	_M2+1
  1140  017F  3001               	movlw	1
  1141  0180  00CF               	movwf	_M3
  1142  0181  3000               	movlw	0
  1143  0182  00D0               	movwf	_M3+1
  1144  0183  3001               	movlw	1
  1145  0184  00CD               	movwf	_M4
  1146  0185  3000               	movlw	0
  1147  0186  00CE               	movwf	_M4+1
  1148                           
  1149                           ;blynd.c: 159: st[0]='%'; st[10]='@';
  1150  0187  3025               	movlw	37
  1151  0188  00C7               	movwf	??_main
  1152  0189  0847               	movf	??_main,w
  1153  018A  0021               	movlb	1	; select bank1
  1154  018B  00A0               	movwf	_st^(0+128)
  1155  018C  3040               	movlw	64
  1156  018D  0020               	movlb	0	; select bank0
  1157  018E  00C7               	movwf	??_main
  1158  018F  0847               	movf	??_main,w
  1159  0190  0021               	movlb	1	; select bank1
  1160  0191  00AA               	movwf	(_st^(0+128)+10)
  1161  0192                     l2774:	
  1162                           ;blynd.c: 161: while(1){
  1163                           
  1164                           
  1165                           ;blynd.c: 162: if(TX_FLAG==1)
  1166  0192  0021               	movlb	1	; select bank1
  1167  0193  035A               	decf	_TX_FLAG^(0+128),w
  1168  0194  045B               	iorwf	(_TX_FLAG+1)^(0+128),w
  1169  0195  1D03               	btfss	3,2
  1170  0196  2B02               	goto	l2864
  1171                           
  1172                           ;blynd.c: 163: {
  1173                           ;blynd.c: 165: TX_FLAG=0;
  1174  0197  01DA               	clrf	_TX_FLAG^(0+128)
  1175  0198  01DB               	clrf	(_TX_FLAG+1)^(0+128)
  1176                           
  1177                           ;blynd.c: 166: start_flag = 0;
  1178  0199  0024               	movlb	4	; select bank4
  1179  019A  01B0               	clrf	main@start_flag^(0+512)
  1180  019B  01B1               	clrf	(main@start_flag+1)^(0+512)
  1181                           
  1182                           ;blynd.c: 167: end_flag = 0;
  1183  019C  01B2               	clrf	main@end_flag^(0+512)
  1184  019D  01B3               	clrf	(main@end_flag+1)^(0+512)
  1185                           
  1186                           ;blynd.c: 169: if(name[0]=='%' && name[1]=='%' && name[14]=='@' && name[15]=='@')
  1187  019E  3025               	movlw	37
  1188  019F  0022               	movlb	2	; select bank2
  1189  01A0  0644               	xorwf	_name^(0+256),w
  1190  01A1  1D03               	btfss	3,2
  1191  01A2  2A59               	goto	l2828
  1192  01A3  3025               	movlw	37
  1193  01A4  0645               	xorwf	(_name^(0+256)+1),w
  1194  01A5  1D03               	btfss	3,2
  1195  01A6  2A59               	goto	l2828
  1196  01A7  3040               	movlw	64
  1197  01A8  0652               	xorwf	(_name^(0+256)+14),w
  1198  01A9  1D03               	btfss	3,2
  1199  01AA  2A59               	goto	l2828
  1200  01AB  3040               	movlw	64
  1201  01AC  0653               	xorwf	(_name^(0+256)+15),w
  1202  01AD  1D03               	btfss	3,2
  1203  01AE  2A59               	goto	l2828
  1204                           
  1205                           ;blynd.c: 170: {
  1206                           ;blynd.c: 171: for(k=0;k<16;k++)
  1207  01AF  0020               	movlb	0	; select bank0
  1208  01B0  01D7               	clrf	_k
  1209  01B1  01D8               	clrf	_k+1
  1210  01B2                     L3:	
  1211  01B2  0858               	movf	_k+1,w
  1212  01B3  3A80               	xorlw	128
  1213  01B4  00C7               	movwf	??_main
  1214  01B5  3080               	movlw	128
  1215  01B6  0247               	subwf	??_main,w
  1216  01B7  1D03               	skipz
  1217  01B8  29BB               	goto	u2175
  1218  01B9  3010               	movlw	16
  1219  01BA  0257               	subwf	_k,w
  1220  01BB                     u2175:	
  1221  01BB  1803               	btfsc	3,0
  1222  01BC  2AAC               	goto	l2852
  1223                           
  1224                           ;blynd.c: 172: {
  1225                           ;blynd.c: 173: if(name[k] == '%' && name[k+1] == '%' && start_flag == 0)
  1226  01BD  0020               	movlb	0	; select bank0
  1227  01BE  0857               	movf	_k,w
  1228  01BF  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1229  01C0  0086               	movwf	6
  1230  01C1  3001               	movlw	1	; select bank2/3
  1231  01C2  0087               	movwf	7
  1232  01C3  3025               	movlw	37
  1233  01C4  0601               	xorwf	1,w
  1234  01C5  1D03               	btfss	3,2
  1235  01C6  29E3               	goto	l2800
  1236  01C7  0857               	movf	_k,w
  1237  01C8  3E01               	addlw	1
  1238  01C9  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1239  01CA  0086               	movwf	6
  1240  01CB  3001               	movlw	1	; select bank2/3
  1241  01CC  0087               	movwf	7
  1242  01CD  3025               	movlw	37
  1243  01CE  0601               	xorwf	1,w
  1244  01CF  1D03               	btfss	3,2
  1245  01D0  29E3               	goto	l2800
  1246  01D1  0024               	movlb	4	; select bank4
  1247  01D2  0830               	movf	main@start_flag^(0+512),w
  1248  01D3  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1249  01D4  1D03               	btfss	3,2
  1250  01D5  29E3               	goto	l2800
  1251                           
  1252                           ;blynd.c: 174: {
  1253                           ;blynd.c: 175: RX_CHK_FLAG_start1 = k;
  1254  01D6  0020               	movlb	0	; select bank0
  1255  01D7  0858               	movf	_k+1,w
  1256  01D8  0024               	movlb	4	; select bank4
  1257  01D9  00A9               	movwf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1258  01DA  0020               	movlb	0	; select bank0
  1259  01DB  0857               	movf	_k,w
  1260  01DC  0024               	movlb	4	; select bank4
  1261  01DD  00A8               	movwf	main@RX_CHK_FLAG_start1^(0+512)
  1262                           
  1263                           ;blynd.c: 176: start_flag = 1;
  1264  01DE  3001               	movlw	1
  1265  01DF  00B0               	movwf	main@start_flag^(0+512)
  1266  01E0  3000               	movlw	0
  1267  01E1  00B1               	movwf	(main@start_flag^(0+512)+1)
  1268                           
  1269                           ;blynd.c: 177: }
  1270  01E2  2A53               	goto	l2826
  1271  01E3                     l2800:	
  1272                           
  1273                           ;blynd.c: 178: else if(name[k] == '%' && name[k+1] == '%' && start_flag == 1)
  1274  01E3  0020               	movlb	0	; select bank0
  1275  01E4  0857               	movf	_k,w
  1276  01E5  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1277  01E6  0086               	movwf	6
  1278  01E7  3001               	movlw	1	; select bank2/3
  1279  01E8  0087               	movwf	7
  1280  01E9  3025               	movlw	37
  1281  01EA  0601               	xorwf	1,w
  1282  01EB  1D03               	btfss	3,2
  1283  01EC  2A05               	goto	l2808
  1284  01ED  0857               	movf	_k,w
  1285  01EE  3E01               	addlw	1
  1286  01EF  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1287  01F0  0086               	movwf	6
  1288  01F1  3001               	movlw	1	; select bank2/3
  1289  01F2  0087               	movwf	7
  1290  01F3  3025               	movlw	37
  1291  01F4  0601               	xorwf	1,w
  1292  01F5  1D03               	btfss	3,2
  1293  01F6  2A05               	goto	l2808
  1294  01F7  0024               	movlb	4	; select bank4
  1295  01F8  0330               	decf	main@start_flag^(0+512),w
  1296  01F9  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1297  01FA  1D03               	btfss	3,2
  1298  01FB  2A05               	goto	l2808
  1299                           
  1300                           ;blynd.c: 179: {
  1301                           ;blynd.c: 180: RX_CHK_FLAG_start2 = k;
  1302  01FC  0020               	movlb	0	; select bank0
  1303  01FD  0858               	movf	_k+1,w
  1304  01FE  0024               	movlb	4	; select bank4
  1305  01FF  00AB               	movwf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1306  0200  0020               	movlb	0	; select bank0
  1307  0201  0857               	movf	_k,w
  1308  0202  0024               	movlb	4	; select bank4
  1309  0203  00AA               	movwf	main@RX_CHK_FLAG_start2^(0+512)
  1310                           
  1311                           ;blynd.c: 181: }
  1312  0204  2A53               	goto	l2826
  1313  0205                     l2808:	
  1314                           
  1315                           ;blynd.c: 182: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 0)
  1316  0205  0020               	movlb	0	; select bank0
  1317  0206  0857               	movf	_k,w
  1318  0207  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1319  0208  0086               	movwf	6
  1320  0209  3001               	movlw	1	; select bank2/3
  1321  020A  0087               	movwf	7
  1322  020B  3040               	movlw	64
  1323  020C  0601               	xorwf	1,w
  1324  020D  1D03               	btfss	3,2
  1325  020E  2A2C               	goto	l2818
  1326  020F  0857               	movf	_k,w
  1327  0210  3E01               	addlw	1
  1328  0211  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1329  0212  0086               	movwf	6
  1330  0213  3001               	movlw	1	; select bank2/3
  1331  0214  0087               	movwf	7
  1332  0215  3040               	movlw	64
  1333  0216  0601               	xorwf	1,w
  1334  0217  1D03               	btfss	3,2
  1335  0218  2A2C               	goto	l2818
  1336  0219  0024               	movlb	4	; select bank4
  1337  021A  0832               	movf	main@end_flag^(0+512),w
  1338  021B  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1339  021C  1D03               	btfss	3,2
  1340  021D  2A2C               	goto	l2818
  1341                           
  1342                           ;blynd.c: 183: {
  1343                           ;blynd.c: 184: RX_CHK_FLAG_end1 = k;
  1344  021E  0020               	movlb	0	; select bank0
  1345  021F  0858               	movf	_k+1,w
  1346  0220  0024               	movlb	4	; select bank4
  1347  0221  00AD               	movwf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1348  0222  0020               	movlb	0	; select bank0
  1349  0223  0857               	movf	_k,w
  1350  0224  0024               	movlb	4	; select bank4
  1351  0225  00AC               	movwf	main@RX_CHK_FLAG_end1^(0+512)
  1352                           
  1353                           ;blynd.c: 185: end_flag = 1;
  1354  0226  3001               	movlw	1
  1355  0227  00B2               	movwf	main@end_flag^(0+512)
  1356  0228  3000               	movlw	0
  1357  0229  00B3               	movwf	(main@end_flag^(0+512)+1)
  1358                           
  1359                           ;blynd.c: 186: COPY_FLAG=1;
  1360  022A  3001               	movlw	1
  1361  022B  2A4E               	goto	L1
  1362  022C                     l2818:	
  1363                           ;blynd.c: 188: }
  1364                           
  1365                           ;blynd.c: 187: break;
  1366                           
  1367                           
  1368                           ;blynd.c: 189: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 1)
  1369  022C  0020               	movlb	0	; select bank0
  1370  022D  0857               	movf	_k,w
  1371  022E  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1372  022F  0086               	movwf	6
  1373  0230  3001               	movlw	1	; select bank2/3
  1374  0231  0087               	movwf	7
  1375  0232  3040               	movlw	64
  1376  0233  0601               	xorwf	1,w
  1377  0234  1D03               	btfss	3,2
  1378  0235  2A53               	goto	l2826
  1379  0236  0857               	movf	_k,w
  1380  0237  3E01               	addlw	1
  1381  0238  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1382  0239  0086               	movwf	6
  1383  023A  3001               	movlw	1	; select bank2/3
  1384  023B  0087               	movwf	7
  1385  023C  3040               	movlw	64
  1386  023D  0601               	xorwf	1,w
  1387  023E  1D03               	btfss	3,2
  1388  023F  2A53               	goto	l2826
  1389  0240  0024               	movlb	4	; select bank4
  1390  0241  0332               	decf	main@end_flag^(0+512),w
  1391  0242  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1392  0243  1D03               	btfss	3,2
  1393  0244  2A53               	goto	l2826
  1394                           
  1395                           ;blynd.c: 190: {
  1396                           ;blynd.c: 191: RX_CHK_FLAG_end2 = k;
  1397  0245  0020               	movlb	0	; select bank0
  1398  0246  0858               	movf	_k+1,w
  1399  0247  0024               	movlb	4	; select bank4
  1400  0248  00AF               	movwf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1401  0249  0020               	movlb	0	; select bank0
  1402  024A  0857               	movf	_k,w
  1403  024B  0024               	movlb	4	; select bank4
  1404  024C  00AE               	movwf	main@RX_CHK_FLAG_end2^(0+512)
  1405                           
  1406                           ;blynd.c: 192: COPY_FLAG=2;
  1407  024D  3002               	movlw	2
  1408  024E                     L1:	
  1409  024E  0020               	movlb	0	; select bank0
  1410  024F  00D5               	movwf	_COPY_FLAG
  1411  0250  3000               	movlw	0
  1412  0251  00D6               	movwf	_COPY_FLAG+1
  1413                           
  1414                           ;blynd.c: 193: break;
  1415  0252  2AAC               	goto	l2852
  1416  0253                     l2826:	
  1417  0253  3001               	movlw	1
  1418  0254  0020               	movlb	0	; select bank0
  1419  0255  07D7               	addwf	_k,f
  1420  0256  3000               	movlw	0
  1421  0257  3DD8               	addwfc	_k+1,f
  1422  0258  29B2               	goto	L3
  1423  0259                     l2828:	
  1424                           ;blynd.c: 194: }
  1425                           ;blynd.c: 195: }
  1426                           ;blynd.c: 196: }
  1427                           
  1428                           
  1429                           ;blynd.c: 197: else
  1430                           ;blynd.c: 198: {
  1431                           ;blynd.c: 199: _delay((unsigned long)((10)*(16000000/4000.0))); TX1REG='P'; _delay((unsi
      +                          gned long)((1)*(16000000/4000.0))); TX1REG='K'; _delay((unsigned long)((1)*(16000000/400
      +                          0.0)));
  1432  0259  3034               	movlw	52
  1433  025A  0020               	movlb	0	; select bank0
  1434  025B  00C7               	movwf	??_main
  1435  025C  30F1               	movlw	241
  1436  025D                     u2687:	
  1437  025D  0B89               	decfsz	9,f
  1438  025E  2A5D               	goto	u2687
  1439  025F  0BC7               	decfsz	??_main,f
  1440  0260  2A5D               	goto	u2687
  1441  0261  3200               	nop2
  1442  0262  3050               	movlw	80
  1443  0263  0023               	movlb	3	; select bank3
  1444  0264  009A               	movwf	26	;volatile
  1445  0265  3006               	movlw	6
  1446  0266  0020               	movlb	0	; select bank0
  1447  0267  00C7               	movwf	??_main
  1448  0268  3030               	movlw	48
  1449  0269                     u2697:	
  1450  0269  0B89               	decfsz	9,f
  1451  026A  2A69               	goto	u2697
  1452  026B  0BC7               	decfsz	??_main,f
  1453  026C  2A69               	goto	u2697
  1454  026D  0000               	nop
  1455  026E  304B               	movlw	75
  1456  026F  0023               	movlb	3	; select bank3
  1457  0270  009A               	movwf	26	;volatile
  1458  0271  3006               	movlw	6
  1459  0272  0020               	movlb	0	; select bank0
  1460  0273  00C7               	movwf	??_main
  1461  0274  3030               	movlw	48
  1462  0275                     u2707:	
  1463  0275  0B89               	decfsz	9,f
  1464  0276  2A75               	goto	u2707
  1465  0277  0BC7               	decfsz	??_main,f
  1466  0278  2A75               	goto	u2707
  1467  0279  0000               	nop
  1468                           
  1469                           ;blynd.c: 200: i=0;
  1470  027A  01F4               	clrf	_i
  1471  027B  01F5               	clrf	_i+1
  1472                           
  1473                           ;blynd.c: 201: RC1STAbits.SPEN=0; RC1STAbits.SPEN=1;
  1474  027C  0023               	movlb	3	; select bank3
  1475  027D  139D               	bcf	29,7	;volatile
  1476  027E  179D               	bsf	29,7	;volatile
  1477                           
  1478                           ;blynd.c: 202: sw=0;
  1479  027F  0021               	movlb	1	; select bank1
  1480  0280  01D2               	clrf	_sw^(0+128)
  1481  0281  01D3               	clrf	(_sw+1)^(0+128)
  1482                           
  1483                           ;blynd.c: 203: for(k = 0; k< 15; k++)
  1484  0282  0020               	movlb	0	; select bank0
  1485  0283  01D7               	clrf	_k
  1486  0284  01D8               	clrf	_k+1
  1487  0285  0858               	movf	_k+1,w
  1488  0286  3A80               	xorlw	128
  1489  0287  00C7               	movwf	??_main
  1490  0288  3080               	movlw	128
  1491  0289  0247               	subwf	??_main,w
  1492  028A  1D03               	skipz
  1493  028B  2A8E               	goto	u2315
  1494  028C  300F               	movlw	15
  1495  028D  0257               	subwf	_k,w
  1496  028E                     u2315:	
  1497  028E  1803               	btfsc	3,0
  1498  028F  2AA9               	goto	l2850
  1499  0290                     l2844:	
  1500                           
  1501                           ;blynd.c: 204: {
  1502                           ;blynd.c: 205: name[k] = '#';
  1503  0290  3023               	movlw	35
  1504  0291  0020               	movlb	0	; select bank0
  1505  0292  00C7               	movwf	??_main
  1506  0293  0857               	movf	_k,w
  1507  0294  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1508  0295  0086               	movwf	6
  1509  0296  3001               	movlw	1	; select bank2/3
  1510  0297  0087               	movwf	7
  1511  0298  0847               	movf	??_main,w
  1512  0299  0081               	movwf	1
  1513  029A  3001               	movlw	1
  1514  029B  07D7               	addwf	_k,f
  1515  029C  3000               	movlw	0
  1516  029D  3DD8               	addwfc	_k+1,f
  1517  029E  0858               	movf	_k+1,w
  1518  029F  3A80               	xorlw	128
  1519  02A0  00C7               	movwf	??_main
  1520  02A1  3080               	movlw	128
  1521  02A2  0247               	subwf	??_main,w
  1522  02A3  1D03               	skipz
  1523  02A4  2AA7               	goto	u2325
  1524  02A5  300F               	movlw	15
  1525  02A6  0257               	subwf	_k,w
  1526  02A7                     u2325:	
  1527  02A7  1C03               	skipc
  1528  02A8  2A90               	goto	l2844
  1529  02A9                     l2850:	
  1530                           
  1531                           ;blynd.c: 206: }
  1532                           ;blynd.c: 207: COPY_FLAG=0;
  1533  02A9  0020               	movlb	0	; select bank0
  1534  02AA  01D5               	clrf	_COPY_FLAG
  1535  02AB  01D6               	clrf	_COPY_FLAG+1
  1536  02AC                     l2852:	
  1537                           
  1538                           ;blynd.c: 208: }
  1539                           ;blynd.c: 211: if(COPY_FLAG==1)
  1540  02AC  0020               	movlb	0	; select bank0
  1541  02AD  0355               	decf	_COPY_FLAG,w
  1542  02AE  0456               	iorwf	_COPY_FLAG+1,w
  1543  02AF  1D03               	btfss	3,2
  1544  02B0  2AC0               	goto	l2858
  1545                           
  1546                           ;blynd.c: 212: {
  1547                           ;blynd.c: 213: copy_frame(RX_CHK_FLAG_start1,RX_CHK_FLAG_end1);
  1548  02B1  0024               	movlb	4	; select bank4
  1549  02B2  0829               	movf	(main@RX_CHK_FLAG_start1+1)^(0+512),w
  1550  02B3  0020               	movlb	0	; select bank0
  1551  02B4  00A1               	movwf	copy_frame@start+1
  1552  02B5  0024               	movlb	4	; select bank4
  1553  02B6  0828               	movf	main@RX_CHK_FLAG_start1^(0+512),w
  1554  02B7  0020               	movlb	0	; select bank0
  1555  02B8  00A0               	movwf	copy_frame@start
  1556  02B9  0024               	movlb	4	; select bank4
  1557  02BA  082D               	movf	(main@RX_CHK_FLAG_end1+1)^(0+512),w
  1558  02BB  0020               	movlb	0	; select bank0
  1559  02BC  00A3               	movwf	copy_frame@end+1
  1560  02BD  0024               	movlb	4	; select bank4
  1561  02BE  082C               	movf	main@RX_CHK_FLAG_end1^(0+512),w
  1562  02BF  2AD4               	goto	L2
  1563  02C0                     l2858:	
  1564                           ;blynd.c: 217: }
  1565                           
  1566                           ;blynd.c: 216: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1567                           
  1568                           
  1569                           ;blynd.c: 218: else if(COPY_FLAG==2)
  1570  02C0  3002               	movlw	2
  1571  02C1  0020               	movlb	0	; select bank0
  1572  02C2  0655               	xorwf	_COPY_FLAG,w
  1573  02C3  0456               	iorwf	_COPY_FLAG+1,w
  1574  02C4  1D03               	btfss	3,2
  1575  02C5  2B02               	goto	l2864
  1576                           
  1577                           ;blynd.c: 219: {
  1578                           ;blynd.c: 220: copy_frame(RX_CHK_FLAG_start2,RX_CHK_FLAG_end2);
  1579  02C6  0024               	movlb	4	; select bank4
  1580  02C7  082B               	movf	(main@RX_CHK_FLAG_start2+1)^(0+512),w
  1581  02C8  0020               	movlb	0	; select bank0
  1582  02C9  00A1               	movwf	copy_frame@start+1
  1583  02CA  0024               	movlb	4	; select bank4
  1584  02CB  082A               	movf	main@RX_CHK_FLAG_start2^(0+512),w
  1585  02CC  0020               	movlb	0	; select bank0
  1586  02CD  00A0               	movwf	copy_frame@start
  1587  02CE  0024               	movlb	4	; select bank4
  1588  02CF  082F               	movf	(main@RX_CHK_FLAG_end2+1)^(0+512),w
  1589  02D0  0020               	movlb	0	; select bank0
  1590  02D1  00A3               	movwf	copy_frame@end+1
  1591  02D2  0024               	movlb	4	; select bank4
  1592  02D3  082E               	movf	main@RX_CHK_FLAG_end2^(0+512),w
  1593  02D4                     L2:	
  1594  02D4  0020               	movlb	0	; select bank0
  1595  02D5  00A2               	movwf	copy_frame@end
  1596  02D6  318F  2783  3181   	fcall	_copy_frame
  1597                           
  1598                           ;blynd.c: 221: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1599  02D9  0022               	movlb	2	; select bank2
  1600  02DA  0823               	movf	(_copy^(0+256)+3),w
  1601  02DB  0020               	movlb	0	; select bank0
  1602  02DC  00C7               	movwf	??_main
  1603  02DD  0847               	movf	??_main,w
  1604  02DE  00AE               	movwf	ACTION@Switch_Num_1s
  1605  02DF  0022               	movlb	2	; select bank2
  1606  02E0  0824               	movf	(_copy^(0+256)+4),w
  1607  02E1  0020               	movlb	0	; select bank0
  1608  02E2  00C8               	movwf	??_main+1
  1609  02E3  0848               	movf	??_main+1,w
  1610  02E4  00AF               	movwf	ACTION@sw_status
  1611  02E5  0022               	movlb	2	; select bank2
  1612  02E6  0825               	movf	(_copy^(0+256)+5),w
  1613  02E7  0020               	movlb	0	; select bank0
  1614  02E8  00C9               	movwf	??_main+2
  1615  02E9  0849               	movf	??_main+2,w
  1616  02EA  00B0               	movwf	ACTION@speed_bit1
  1617  02EB  0022               	movlb	2	; select bank2
  1618  02EC  0826               	movf	(_copy^(0+256)+6),w
  1619  02ED  0020               	movlb	0	; select bank0
  1620  02EE  00CA               	movwf	??_main+3
  1621  02EF  084A               	movf	??_main+3,w
  1622  02F0  00B1               	movwf	ACTION@speed_bit2
  1623  02F1  0022               	movlb	2	; select bank2
  1624  02F2  0827               	movf	(_copy^(0+256)+7),w
  1625  02F3  0020               	movlb	0	; select bank0
  1626  02F4  00CB               	movwf	??_main+4
  1627  02F5  084B               	movf	??_main+4,w
  1628  02F6  00B2               	movwf	ACTION@parent
  1629  02F7  0022               	movlb	2	; select bank2
  1630  02F8  0828               	movf	(_copy^(0+256)+8),w
  1631  02F9  0020               	movlb	0	; select bank0
  1632  02FA  00CC               	movwf	??_main+5
  1633  02FB  084C               	movf	??_main+5,w
  1634  02FC  00B3               	movwf	ACTION@finalFrameStat
  1635  02FD  0022               	movlb	2	; select bank2
  1636  02FE  0822               	movf	(_copy^(0+256)+2),w
  1637  02FF  3185  2576  3181   	fcall	_ACTION
  1638  0302                     l2864:	
  1639                           
  1640                           ;blynd.c: 223: }
  1641                           ;blynd.c: 225: }
  1642                           ;blynd.c: 230: if(child_LOCK[1]==0 && RF7==0 && M1==0)
  1643  0302  0023               	movlb	3	; select bank3
  1644  0303  0822               	movf	(_child_LOCK^(0+384)+2),w
  1645  0304  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1646  0305  1D03               	btfss	3,2
  1647  0306  2B3E               	goto	l2888
  1648  0307  0025               	movlb	5	; select bank5
  1649  0308  1B8C               	btfsc	12,7	;volatile
  1650  0309  2B3E               	goto	l2888
  1651  030A  0020               	movlb	0	; select bank0
  1652  030B  0853               	movf	_M1,w
  1653  030C  0454               	iorwf	_M1+1,w
  1654  030D  1D03               	btfss	3,2
  1655  030E  2B3E               	goto	l2888
  1656                           
  1657                           ;blynd.c: 231: {
  1658                           ;blynd.c: 232: if(man==1)
  1659  030F  035B               	decf	_man,w
  1660  0310  045C               	iorwf	_man+1,w
  1661  0311  1D03               	btfss	3,2
  1662  0312  2B36               	goto	l2884
  1663                           
  1664                           ;blynd.c: 233: {
  1665                           ;blynd.c: 234: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1666  0313  3052               	movlw	82
  1667  0314  00C7               	movwf	??_main
  1668  0315  0847               	movf	??_main,w
  1669  0316  0021               	movlb	1	; select bank1
  1670  0317  00A1               	movwf	(_st^(0+128)+1)
  1671  0318  3030               	movlw	48
  1672  0319  0020               	movlb	0	; select bank0
  1673  031A  00C7               	movwf	??_main
  1674  031B  0847               	movf	??_main,w
  1675  031C  0021               	movlb	1	; select bank1
  1676  031D  00A2               	movwf	(_st^(0+128)+2)
  1677  031E  3030               	movlw	48
  1678  031F  0020               	movlb	0	; select bank0
  1679  0320  00C7               	movwf	??_main
  1680  0321  0847               	movf	??_main,w
  1681  0322  0021               	movlb	1	; select bank1
  1682  0323  00A3               	movwf	(_st^(0+128)+3)
  1683  0324  3031               	movlw	49
  1684  0325  0020               	movlb	0	; select bank0
  1685  0326  00C7               	movwf	??_main
  1686  0327  0847               	movf	??_main,w
  1687  0328  0021               	movlb	1	; select bank1
  1688  0329  00A4               	movwf	(_st^(0+128)+4)
  1689  032A  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1690  032B  3187  27D9  3181   	fcall	_writeUART
  1691                           
  1692                           ;blynd.c: 235: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1693  032E  0025               	movlb	5	; select bank5
  1694  032F  100C               	bcf	12,0	;volatile
  1695  0330  108C               	bcf	12,1	;volatile
  1696  0331  0020               	movlb	0	; select bank0
  1697  0332  01D9               	clrf	_curtFlag1
  1698  0333  01DA               	clrf	_curtFlag1+1
  1699  0334  01F2               	clrf	_TimerCounter1
  1700  0335  01F3               	clrf	_TimerCounter1+1
  1701  0336                     l2884:	
  1702                           
  1703                           ;blynd.c: 236: }
  1704                           ;blynd.c: 237: M1=1; man=1;
  1705  0336  3001               	movlw	1
  1706  0337  00D3               	movwf	_M1
  1707  0338  3000               	movlw	0
  1708  0339  00D4               	movwf	_M1+1
  1709  033A  3001               	movlw	1
  1710  033B  00DB               	movwf	_man
  1711  033C  3000               	movlw	0
  1712  033D  00DC               	movwf	_man+1
  1713  033E                     l2888:	
  1714                           
  1715                           ;blynd.c: 238: }
  1716                           ;blynd.c: 240: if(child_LOCK[1]==0 && RF7==1 && M1==1)
  1717  033E  0023               	movlb	3	; select bank3
  1718  033F  0822               	movf	(_child_LOCK^(0+384)+2),w
  1719  0340  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1720  0341  1D03               	btfss	3,2
  1721  0342  2B9D               	goto	l2926
  1722  0343  0025               	movlb	5	; select bank5
  1723  0344  1F8C               	btfss	12,7	;volatile
  1724  0345  2B9D               	goto	l2926
  1725  0346  0020               	movlb	0	; select bank0
  1726  0347  0353               	decf	_M1,w
  1727  0348  0454               	iorwf	_M1+1,w
  1728  0349  1D03               	btfss	3,2
  1729  034A  2B9D               	goto	l2926
  1730                           
  1731                           ;blynd.c: 241: {
  1732                           ;blynd.c: 242: if(man==1)
  1733  034B  035B               	decf	_man,w
  1734  034C  045C               	iorwf	_man+1,w
  1735  034D  1D03               	btfss	3,2
  1736  034E  2B97               	goto	l2924
  1737                           
  1738                           ;blynd.c: 243: {
  1739                           ;blynd.c: 244: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1740  034F  3052               	movlw	82
  1741  0350  00C7               	movwf	??_main
  1742  0351  0847               	movf	??_main,w
  1743  0352  0021               	movlb	1	; select bank1
  1744  0353  00A5               	movwf	(_st^(0+128)+5)
  1745  0354  3030               	movlw	48
  1746  0355  0020               	movlb	0	; select bank0
  1747  0356  00C7               	movwf	??_main
  1748  0357  0847               	movf	??_main,w
  1749  0358  0021               	movlb	1	; select bank1
  1750  0359  00A6               	movwf	(_st^(0+128)+6)
  1751  035A  3030               	movlw	48
  1752  035B  0020               	movlb	0	; select bank0
  1753  035C  00C7               	movwf	??_main
  1754  035D  0847               	movf	??_main,w
  1755  035E  0021               	movlb	1	; select bank1
  1756  035F  00A7               	movwf	(_st^(0+128)+7)
  1757  0360  3032               	movlw	50
  1758  0361  0020               	movlb	0	; select bank0
  1759  0362  00C7               	movwf	??_main
  1760  0363  0847               	movf	??_main,w
  1761  0364  0021               	movlb	1	; select bank1
  1762  0365  00A8               	movwf	(_st^(0+128)+8)
  1763  0366  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1764  0367  3187  27D9  3181   	fcall	_writeUART
  1765                           
  1766                           ;blynd.c: 245: RF0=0;
  1767  036A  0025               	movlb	5	; select bank5
  1768  036B  100C               	bcf	12,0	;volatile
  1769                           
  1770                           ;blynd.c: 246: st[1]='R'; st[2]='1'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1771  036C  3052               	movlw	82
  1772  036D  0020               	movlb	0	; select bank0
  1773  036E  00C7               	movwf	??_main
  1774  036F  0847               	movf	??_main,w
  1775  0370  0021               	movlb	1	; select bank1
  1776  0371  00A1               	movwf	(_st^(0+128)+1)
  1777  0372  3031               	movlw	49
  1778  0373  0020               	movlb	0	; select bank0
  1779  0374  00C7               	movwf	??_main
  1780  0375  0847               	movf	??_main,w
  1781  0376  0021               	movlb	1	; select bank1
  1782  0377  00A2               	movwf	(_st^(0+128)+2)
  1783  0378  3030               	movlw	48
  1784  0379  0020               	movlb	0	; select bank0
  1785  037A  00C7               	movwf	??_main
  1786  037B  0847               	movf	??_main,w
  1787  037C  0021               	movlb	1	; select bank1
  1788  037D  00A3               	movwf	(_st^(0+128)+3)
  1789  037E  3031               	movlw	49
  1790  037F  0020               	movlb	0	; select bank0
  1791  0380  00C7               	movwf	??_main
  1792  0381  0847               	movf	??_main,w
  1793  0382  0021               	movlb	1	; select bank1
  1794  0383  00A4               	movwf	(_st^(0+128)+4)
  1795  0384  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1796  0385  3187  27D9  3181   	fcall	_writeUART
  1797                           
  1798                           ;blynd.c: 247: RF1=1; curtFlag1=1; TimerCounter1=0;
  1799  0388  0025               	movlb	5	; select bank5
  1800  0389  148C               	bsf	12,1	;volatile
  1801  038A  3001               	movlw	1
  1802  038B  0020               	movlb	0	; select bank0
  1803  038C  00D9               	movwf	_curtFlag1
  1804  038D  3000               	movlw	0
  1805  038E  00DA               	movwf	_curtFlag1+1
  1806  038F  01F2               	clrf	_TimerCounter1
  1807  0390  01F3               	clrf	_TimerCounter1+1
  1808                           
  1809                           ;blynd.c: 248: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1810  0391  300B               	movlw	11
  1811  0392  0097               	movwf	23	;volatile
  1812  0393  30DC               	movlw	220
  1813  0394  0096               	movwf	22	;volatile
  1814  0395  1011               	bcf	17,0	;volatile
  1815  0396  1418               	bsf	24,0	;volatile
  1816  0397                     l2924:	
  1817                           
  1818                           ;blynd.c: 249: }
  1819                           ;blynd.c: 250: M1=0; man=1;
  1820  0397  01D3               	clrf	_M1
  1821  0398  01D4               	clrf	_M1+1
  1822  0399  3001               	movlw	1
  1823  039A  00DB               	movwf	_man
  1824  039B  3000               	movlw	0
  1825  039C  00DC               	movwf	_man+1
  1826  039D                     l2926:	
  1827                           
  1828                           ;blynd.c: 251: }
  1829                           ;blynd.c: 253: if(child_LOCK[3]==0 && RF5==0 && M2==0)
  1830  039D  0023               	movlb	3	; select bank3
  1831  039E  0826               	movf	(_child_LOCK^(0+384)+6),w
  1832  039F  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1833  03A0  1D03               	btfss	3,2
  1834  03A1  2BD9               	goto	l2950
  1835  03A2  0025               	movlb	5	; select bank5
  1836  03A3  1A8C               	btfsc	12,5	;volatile
  1837  03A4  2BD9               	goto	l2950
  1838  03A5  0020               	movlb	0	; select bank0
  1839  03A6  0851               	movf	_M2,w
  1840  03A7  0452               	iorwf	_M2+1,w
  1841  03A8  1D03               	btfss	3,2
  1842  03A9  2BD9               	goto	l2950
  1843                           
  1844                           ;blynd.c: 254: {
  1845                           ;blynd.c: 255: if(man==1){
  1846  03AA  035B               	decf	_man,w
  1847  03AB  045C               	iorwf	_man+1,w
  1848  03AC  1D03               	btfss	3,2
  1849  03AD  2BD1               	goto	l2946
  1850                           
  1851                           ;blynd.c: 256: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2';
  1852  03AE  3052               	movlw	82
  1853  03AF  00C7               	movwf	??_main
  1854  03B0  0847               	movf	??_main,w
  1855  03B1  0021               	movlb	1	; select bank1
  1856  03B2  00A5               	movwf	(_st^(0+128)+5)
  1857  03B3  3030               	movlw	48
  1858  03B4  0020               	movlb	0	; select bank0
  1859  03B5  00C7               	movwf	??_main
  1860  03B6  0847               	movf	??_main,w
  1861  03B7  0021               	movlb	1	; select bank1
  1862  03B8  00A6               	movwf	(_st^(0+128)+6)
  1863  03B9  3030               	movlw	48
  1864  03BA  0020               	movlb	0	; select bank0
  1865  03BB  00C7               	movwf	??_main
  1866  03BC  0847               	movf	??_main,w
  1867  03BD  0021               	movlb	1	; select bank1
  1868  03BE  00A7               	movwf	(_st^(0+128)+7)
  1869  03BF  3032               	movlw	50
  1870  03C0  0020               	movlb	0	; select bank0
  1871  03C1  00C7               	movwf	??_main
  1872  03C2  0847               	movf	??_main,w
  1873  03C3  0021               	movlb	1	; select bank1
  1874  03C4  00A8               	movwf	(_st^(0+128)+8)
  1875                           
  1876                           ;blynd.c: 257: writeUART(st+5);
  1877  03C5  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1878  03C6  3187  27D9  3181   	fcall	_writeUART
  1879                           
  1880                           ;blynd.c: 258: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1881  03C9  0025               	movlb	5	; select bank5
  1882  03CA  100C               	bcf	12,0	;volatile
  1883  03CB  108C               	bcf	12,1	;volatile
  1884  03CC  0020               	movlb	0	; select bank0
  1885  03CD  01D9               	clrf	_curtFlag1
  1886  03CE  01DA               	clrf	_curtFlag1+1
  1887  03CF  01F2               	clrf	_TimerCounter1
  1888  03D0  01F3               	clrf	_TimerCounter1+1
  1889  03D1                     l2946:	
  1890                           
  1891                           ;blynd.c: 259: }
  1892                           ;blynd.c: 260: M2=1; man=1;
  1893  03D1  3001               	movlw	1
  1894  03D2  00D1               	movwf	_M2
  1895  03D3  3000               	movlw	0
  1896  03D4  00D2               	movwf	_M2+1
  1897  03D5  3001               	movlw	1
  1898  03D6  00DB               	movwf	_man
  1899  03D7  3000               	movlw	0
  1900  03D8  00DC               	movwf	_man+1
  1901  03D9                     l2950:	
  1902                           
  1903                           ;blynd.c: 261: }
  1904                           ;blynd.c: 263: if(child_LOCK[3]==0 && RF5==1 && M2==1)
  1905  03D9  0023               	movlb	3	; select bank3
  1906  03DA  0826               	movf	(_child_LOCK^(0+384)+6),w
  1907  03DB  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1908  03DC  1D03               	btfss	3,2
  1909  03DD  2C38               	goto	l2988
  1910  03DE  0025               	movlb	5	; select bank5
  1911  03DF  1E8C               	btfss	12,5	;volatile
  1912  03E0  2C38               	goto	l2988
  1913  03E1  0020               	movlb	0	; select bank0
  1914  03E2  0351               	decf	_M2,w
  1915  03E3  0452               	iorwf	_M2+1,w
  1916  03E4  1D03               	btfss	3,2
  1917  03E5  2C38               	goto	l2988
  1918                           
  1919                           ;blynd.c: 264: {
  1920                           ;blynd.c: 265: if(man==1){
  1921  03E6  035B               	decf	_man,w
  1922  03E7  045C               	iorwf	_man+1,w
  1923  03E8  1D03               	btfss	3,2
  1924  03E9  2C32               	goto	l2986
  1925                           
  1926                           ;blynd.c: 266: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1927  03EA  3052               	movlw	82
  1928  03EB  00C7               	movwf	??_main
  1929  03EC  0847               	movf	??_main,w
  1930  03ED  0021               	movlb	1	; select bank1
  1931  03EE  00A1               	movwf	(_st^(0+128)+1)
  1932  03EF  3030               	movlw	48
  1933  03F0  0020               	movlb	0	; select bank0
  1934  03F1  00C7               	movwf	??_main
  1935  03F2  0847               	movf	??_main,w
  1936  03F3  0021               	movlb	1	; select bank1
  1937  03F4  00A2               	movwf	(_st^(0+128)+2)
  1938  03F5  3030               	movlw	48
  1939  03F6  0020               	movlb	0	; select bank0
  1940  03F7  00C7               	movwf	??_main
  1941  03F8  0847               	movf	??_main,w
  1942  03F9  0021               	movlb	1	; select bank1
  1943  03FA  00A3               	movwf	(_st^(0+128)+3)
  1944  03FB  3031               	movlw	49
  1945  03FC  0020               	movlb	0	; select bank0
  1946  03FD  00C7               	movwf	??_main
  1947  03FE  0847               	movf	??_main,w
  1948  03FF  0021               	movlb	1	; select bank1
  1949  0400  00A4               	movwf	(_st^(0+128)+4)
  1950  0401  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1951  0402  3187  27D9  3181   	fcall	_writeUART
  1952                           
  1953                           ;blynd.c: 267: RF1=0;
  1954  0405  0025               	movlb	5	; select bank5
  1955  0406  108C               	bcf	12,1	;volatile
  1956                           
  1957                           ;blynd.c: 268: st[5]='R'; st[6]='1'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1958  0407  3052               	movlw	82
  1959  0408  0020               	movlb	0	; select bank0
  1960  0409  00C7               	movwf	??_main
  1961  040A  0847               	movf	??_main,w
  1962  040B  0021               	movlb	1	; select bank1
  1963  040C  00A5               	movwf	(_st^(0+128)+5)
  1964  040D  3031               	movlw	49
  1965  040E  0020               	movlb	0	; select bank0
  1966  040F  00C7               	movwf	??_main
  1967  0410  0847               	movf	??_main,w
  1968  0411  0021               	movlb	1	; select bank1
  1969  0412  00A6               	movwf	(_st^(0+128)+6)
  1970  0413  3030               	movlw	48
  1971  0414  0020               	movlb	0	; select bank0
  1972  0415  00C7               	movwf	??_main
  1973  0416  0847               	movf	??_main,w
  1974  0417  0021               	movlb	1	; select bank1
  1975  0418  00A7               	movwf	(_st^(0+128)+7)
  1976  0419  3032               	movlw	50
  1977  041A  0020               	movlb	0	; select bank0
  1978  041B  00C7               	movwf	??_main
  1979  041C  0847               	movf	??_main,w
  1980  041D  0021               	movlb	1	; select bank1
  1981  041E  00A8               	movwf	(_st^(0+128)+8)
  1982  041F  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1983  0420  3187  27D9  3181   	fcall	_writeUART
  1984                           
  1985                           ;blynd.c: 269: RF0=1; curtFlag1=1; TimerCounter1=0;
  1986  0423  0025               	movlb	5	; select bank5
  1987  0424  140C               	bsf	12,0	;volatile
  1988  0425  3001               	movlw	1
  1989  0426  0020               	movlb	0	; select bank0
  1990  0427  00D9               	movwf	_curtFlag1
  1991  0428  3000               	movlw	0
  1992  0429  00DA               	movwf	_curtFlag1+1
  1993  042A  01F2               	clrf	_TimerCounter1
  1994  042B  01F3               	clrf	_TimerCounter1+1
  1995                           
  1996                           ;blynd.c: 270: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1997  042C  300B               	movlw	11
  1998  042D  0097               	movwf	23	;volatile
  1999  042E  30DC               	movlw	220
  2000  042F  0096               	movwf	22	;volatile
  2001  0430  1011               	bcf	17,0	;volatile
  2002  0431  1418               	bsf	24,0	;volatile
  2003  0432                     l2986:	
  2004                           
  2005                           ;blynd.c: 271: }
  2006                           ;blynd.c: 272: M2=0; man=1;
  2007  0432  01D1               	clrf	_M2
  2008  0433  01D2               	clrf	_M2+1
  2009  0434  3001               	movlw	1
  2010  0435  00DB               	movwf	_man
  2011  0436  3000               	movlw	0
  2012  0437  00DC               	movwf	_man+1
  2013  0438                     l2988:	
  2014                           
  2015                           ;blynd.c: 273: }
  2016                           ;blynd.c: 276: if(child_LOCK[5]==0 && RF3==0 && M3==0)
  2017  0438  0023               	movlb	3	; select bank3
  2018  0439  082A               	movf	(_child_LOCK^(0+384)+10),w
  2019  043A  042B               	iorwf	((_child_LOCK+1)^(0+384)+10),w
  2020  043B  1D03               	btfss	3,2
  2021  043C  2C75               	goto	l3012
  2022  043D  0025               	movlb	5	; select bank5
  2023  043E  198C               	btfsc	12,3	;volatile
  2024  043F  2C75               	goto	l3012
  2025  0440  0020               	movlb	0	; select bank0
  2026  0441  084F               	movf	_M3,w
  2027  0442  0450               	iorwf	_M3+1,w
  2028  0443  1D03               	btfss	3,2
  2029  0444  2C75               	goto	l3012
  2030                           
  2031                           ;blynd.c: 277: {
  2032                           ;blynd.c: 278: if(man==1)
  2033  0445  035B               	decf	_man,w
  2034  0446  045C               	iorwf	_man+1,w
  2035  0447  1D03               	btfss	3,2
  2036  0448  2C6C               	goto	l3008
  2037                           
  2038                           ;blynd.c: 279: {
  2039                           ;blynd.c: 280: st[9]='R'; st[10]='0'; st[11]='0'; st[12]='3'; writeUART(st+9);
  2040  0449  3052               	movlw	82
  2041  044A  00C7               	movwf	??_main
  2042  044B  0847               	movf	??_main,w
  2043  044C  0021               	movlb	1	; select bank1
  2044  044D  00A9               	movwf	(_st^(0+128)+9)
  2045  044E  3030               	movlw	48
  2046  044F  0020               	movlb	0	; select bank0
  2047  0450  00C7               	movwf	??_main
  2048  0451  0847               	movf	??_main,w
  2049  0452  0021               	movlb	1	; select bank1
  2050  0453  00AA               	movwf	(_st^(0+128)+10)
  2051  0454  3030               	movlw	48
  2052  0455  0020               	movlb	0	; select bank0
  2053  0456  00C7               	movwf	??_main
  2054  0457  0847               	movf	??_main,w
  2055  0458  0021               	movlb	1	; select bank1
  2056  0459  00AB               	movwf	(_st^(0+128)+11)
  2057  045A  3033               	movlw	51
  2058  045B  0020               	movlb	0	; select bank0
  2059  045C  00C7               	movwf	??_main
  2060  045D  0847               	movf	??_main,w
  2061  045E  0021               	movlb	1	; select bank1
  2062  045F  00AC               	movwf	(_st^(0+128)+12)
  2063  0460  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  2064  0461  3187  27D9  3181   	fcall	_writeUART
  2065                           
  2066                           ;blynd.c: 281: RA2=0; RA3=0; curtFlag2=0; TimerCounter2=0;
  2067  0464  0020               	movlb	0	; select bank0
  2068  0465  110C               	bcf	12,2	;volatile
  2069  0466  118C               	bcf	12,3	;volatile
  2070  0467  0021               	movlb	1	; select bank1
  2071  0468  01E8               	clrf	_curtFlag2^(0+128)
  2072  0469  01E9               	clrf	(_curtFlag2+1)^(0+128)
  2073  046A  01F0               	clrf	_TimerCounter2
  2074  046B  01F1               	clrf	_TimerCounter2+1
  2075  046C                     l3008:	
  2076                           
  2077                           ;blynd.c: 282: }
  2078                           ;blynd.c: 283: M3=1; man=1;
  2079  046C  3001               	movlw	1
  2080  046D  0020               	movlb	0	; select bank0
  2081  046E  00CF               	movwf	_M3
  2082  046F  3000               	movlw	0
  2083  0470  00D0               	movwf	_M3+1
  2084  0471  3001               	movlw	1
  2085  0472  00DB               	movwf	_man
  2086  0473  3000               	movlw	0
  2087  0474  00DC               	movwf	_man+1
  2088  0475                     l3012:	
  2089                           
  2090                           ;blynd.c: 284: }
  2091                           ;blynd.c: 286: if(child_LOCK[5]==0 && RF3==1 && M3==1)
  2092  0475  0023               	movlb	3	; select bank3
  2093  0476  082A               	movf	(_child_LOCK^(0+384)+10),w
  2094  0477  042B               	iorwf	((_child_LOCK+1)^(0+384)+10),w
  2095  0478  1D03               	btfss	3,2
  2096  0479  2CD7               	goto	l3050
  2097  047A  0025               	movlb	5	; select bank5
  2098  047B  1D8C               	btfss	12,3	;volatile
  2099  047C  2CD7               	goto	l3050
  2100  047D  0020               	movlb	0	; select bank0
  2101  047E  034F               	decf	_M3,w
  2102  047F  0450               	iorwf	_M3+1,w
  2103  0480  1D03               	btfss	3,2
  2104  0481  2CD7               	goto	l3050
  2105                           
  2106                           ;blynd.c: 287: {
  2107                           ;blynd.c: 288: if(man==1)
  2108  0482  035B               	decf	_man,w
  2109  0483  045C               	iorwf	_man+1,w
  2110  0484  1D03               	btfss	3,2
  2111  0485  2CD0               	goto	l3048
  2112                           
  2113                           ;blynd.c: 289: {
  2114                           ;blynd.c: 290: st[13]='R'; st[14]='0'; st[15]='0'; st[16]='4'; writeUART(st+13);
  2115  0486  3052               	movlw	82
  2116  0487  00C7               	movwf	??_main
  2117  0488  0847               	movf	??_main,w
  2118  0489  0021               	movlb	1	; select bank1
  2119  048A  00AD               	movwf	(_st^(0+128)+13)
  2120  048B  3030               	movlw	48
  2121  048C  0020               	movlb	0	; select bank0
  2122  048D  00C7               	movwf	??_main
  2123  048E  0847               	movf	??_main,w
  2124  048F  0021               	movlb	1	; select bank1
  2125  0490  00AE               	movwf	(_st^(0+128)+14)
  2126  0491  3030               	movlw	48
  2127  0492  0020               	movlb	0	; select bank0
  2128  0493  00C7               	movwf	??_main
  2129  0494  0847               	movf	??_main,w
  2130  0495  0021               	movlb	1	; select bank1
  2131  0496  00AF               	movwf	(_st^(0+128)+15)
  2132  0497  3034               	movlw	52
  2133  0498  0020               	movlb	0	; select bank0
  2134  0499  00C7               	movwf	??_main
  2135  049A  0847               	movf	??_main,w
  2136  049B  0021               	movlb	1	; select bank1
  2137  049C  00B0               	movwf	(_st^(0+128)+16)
  2138  049D  30AD               	movlw	(low ((_st| 0+13)))& (0+255)
  2139  049E  3187  27D9  3181   	fcall	_writeUART
  2140                           
  2141                           ;blynd.c: 291: RA2=0;
  2142  04A1  0020               	movlb	0	; select bank0
  2143  04A2  110C               	bcf	12,2	;volatile
  2144                           
  2145                           ;blynd.c: 292: st[9]='R'; st[10]='1'; st[11]='0'; st[12]='3'; writeUART(st+9);
  2146  04A3  3052               	movlw	82
  2147  04A4  00C7               	movwf	??_main
  2148  04A5  0847               	movf	??_main,w
  2149  04A6  0021               	movlb	1	; select bank1
  2150  04A7  00A9               	movwf	(_st^(0+128)+9)
  2151  04A8  3031               	movlw	49
  2152  04A9  0020               	movlb	0	; select bank0
  2153  04AA  00C7               	movwf	??_main
  2154  04AB  0847               	movf	??_main,w
  2155  04AC  0021               	movlb	1	; select bank1
  2156  04AD  00AA               	movwf	(_st^(0+128)+10)
  2157  04AE  3030               	movlw	48
  2158  04AF  0020               	movlb	0	; select bank0
  2159  04B0  00C7               	movwf	??_main
  2160  04B1  0847               	movf	??_main,w
  2161  04B2  0021               	movlb	1	; select bank1
  2162  04B3  00AB               	movwf	(_st^(0+128)+11)
  2163  04B4  3033               	movlw	51
  2164  04B5  0020               	movlb	0	; select bank0
  2165  04B6  00C7               	movwf	??_main
  2166  04B7  0847               	movf	??_main,w
  2167  04B8  0021               	movlb	1	; select bank1
  2168  04B9  00AC               	movwf	(_st^(0+128)+12)
  2169  04BA  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  2170  04BB  3187  27D9  3181   	fcall	_writeUART
  2171                           
  2172                           ;blynd.c: 293: RA3=1; curtFlag2=1; TimerCounter2=0;
  2173  04BE  0020               	movlb	0	; select bank0
  2174  04BF  158C               	bsf	12,3	;volatile
  2175  04C0  3001               	movlw	1
  2176  04C1  0021               	movlb	1	; select bank1
  2177  04C2  00E8               	movwf	_curtFlag2^(0+128)
  2178  04C3  3000               	movlw	0
  2179  04C4  00E9               	movwf	(_curtFlag2^(0+128)+1)
  2180  04C5  01F0               	clrf	_TimerCounter2
  2181  04C6  01F1               	clrf	_TimerCounter2+1
  2182                           
  2183                           ;blynd.c: 294: TMR3H=0x0B; TMR3L=0xDC; PIR3bits.TMR3IF=0; T3CONbits.TMR3ON = 1;
  2184  04C7  300B               	movlw	11
  2185  04C8  0028               	movlb	8	; select bank8
  2186  04C9  0092               	movwf	18	;volatile
  2187  04CA  30DC               	movlw	220
  2188  04CB  0091               	movwf	17	;volatile
  2189  04CC  0020               	movlb	0	; select bank0
  2190  04CD  1013               	bcf	19,0	;volatile
  2191  04CE  0028               	movlb	8	; select bank8
  2192  04CF  1413               	bsf	19,0	;volatile
  2193  04D0                     l3048:	
  2194                           
  2195                           ;blynd.c: 295: }
  2196                           ;blynd.c: 296: M3=0; man=1;
  2197  04D0  0020               	movlb	0	; select bank0
  2198  04D1  01CF               	clrf	_M3
  2199  04D2  01D0               	clrf	_M3+1
  2200  04D3  3001               	movlw	1
  2201  04D4  00DB               	movwf	_man
  2202  04D5  3000               	movlw	0
  2203  04D6  00DC               	movwf	_man+1
  2204  04D7                     l3050:	
  2205                           
  2206                           ;blynd.c: 297: }
  2207                           ;blynd.c: 300: if(child_LOCK[7]==0 && RF2==0 && M4==0)
  2208  04D7  0023               	movlb	3	; select bank3
  2209  04D8  082E               	movf	(_child_LOCK^(0+384)+14),w
  2210  04D9  042F               	iorwf	((_child_LOCK+1)^(0+384)+14),w
  2211  04DA  1D03               	btfss	3,2
  2212  04DB  2D14               	goto	l3074
  2213  04DC  0025               	movlb	5	; select bank5
  2214  04DD  190C               	btfsc	12,2	;volatile
  2215  04DE  2D14               	goto	l3074
  2216  04DF  0020               	movlb	0	; select bank0
  2217  04E0  084D               	movf	_M4,w
  2218  04E1  044E               	iorwf	_M4+1,w
  2219  04E2  1D03               	btfss	3,2
  2220  04E3  2D14               	goto	l3074
  2221                           
  2222                           ;blynd.c: 301: {
  2223                           ;blynd.c: 302: if(man==1){
  2224  04E4  035B               	decf	_man,w
  2225  04E5  045C               	iorwf	_man+1,w
  2226  04E6  1D03               	btfss	3,2
  2227  04E7  2D0B               	goto	l3070
  2228                           
  2229                           ;blynd.c: 303: st[13]='R'; st[14]='0'; st[15]='0'; st[16]='4'; writeUART(st+13);
  2230  04E8  3052               	movlw	82
  2231  04E9  00C7               	movwf	??_main
  2232  04EA  0847               	movf	??_main,w
  2233  04EB  0021               	movlb	1	; select bank1
  2234  04EC  00AD               	movwf	(_st^(0+128)+13)
  2235  04ED  3030               	movlw	48
  2236  04EE  0020               	movlb	0	; select bank0
  2237  04EF  00C7               	movwf	??_main
  2238  04F0  0847               	movf	??_main,w
  2239  04F1  0021               	movlb	1	; select bank1
  2240  04F2  00AE               	movwf	(_st^(0+128)+14)
  2241  04F3  3030               	movlw	48
  2242  04F4  0020               	movlb	0	; select bank0
  2243  04F5  00C7               	movwf	??_main
  2244  04F6  0847               	movf	??_main,w
  2245  04F7  0021               	movlb	1	; select bank1
  2246  04F8  00AF               	movwf	(_st^(0+128)+15)
  2247  04F9  3034               	movlw	52
  2248  04FA  0020               	movlb	0	; select bank0
  2249  04FB  00C7               	movwf	??_main
  2250  04FC  0847               	movf	??_main,w
  2251  04FD  0021               	movlb	1	; select bank1
  2252  04FE  00B0               	movwf	(_st^(0+128)+16)
  2253  04FF  30AD               	movlw	(low ((_st| 0+13)))& (0+255)
  2254  0500  3187  27D9  3181   	fcall	_writeUART
  2255                           
  2256                           ;blynd.c: 304: RA2=0; RA3=0; curtFlag2=0; TimerCounter2=0;
  2257  0503  0020               	movlb	0	; select bank0
  2258  0504  110C               	bcf	12,2	;volatile
  2259  0505  118C               	bcf	12,3	;volatile
  2260  0506  0021               	movlb	1	; select bank1
  2261  0507  01E8               	clrf	_curtFlag2^(0+128)
  2262  0508  01E9               	clrf	(_curtFlag2+1)^(0+128)
  2263  0509  01F0               	clrf	_TimerCounter2
  2264  050A  01F1               	clrf	_TimerCounter2+1
  2265  050B                     l3070:	
  2266                           
  2267                           ;blynd.c: 305: }
  2268                           ;blynd.c: 306: M4=1; man=1;
  2269  050B  3001               	movlw	1
  2270  050C  0020               	movlb	0	; select bank0
  2271  050D  00CD               	movwf	_M4
  2272  050E  3000               	movlw	0
  2273  050F  00CE               	movwf	_M4+1
  2274  0510  3001               	movlw	1
  2275  0511  00DB               	movwf	_man
  2276  0512  3000               	movlw	0
  2277  0513  00DC               	movwf	_man+1
  2278  0514                     l3074:	
  2279                           
  2280                           ;blynd.c: 307: }
  2281                           ;blynd.c: 309: if(child_LOCK[7]==0 && RF2==1 && M4==1)
  2282  0514  0023               	movlb	3	; select bank3
  2283  0515  082E               	movf	(_child_LOCK^(0+384)+14),w
  2284  0516  042F               	iorwf	((_child_LOCK+1)^(0+384)+14),w
  2285  0517  1D03               	btfss	3,2
  2286  0518  2992               	goto	l2774
  2287  0519  0025               	movlb	5	; select bank5
  2288  051A  1D0C               	btfss	12,2	;volatile
  2289  051B  2992               	goto	l2774
  2290  051C  0020               	movlb	0	; select bank0
  2291  051D  034D               	decf	_M4,w
  2292  051E  044E               	iorwf	_M4+1,w
  2293  051F  1D03               	btfss	3,2
  2294  0520  2992               	goto	l2774
  2295                           
  2296                           ;blynd.c: 310: {
  2297                           ;blynd.c: 311: if(man==1)
  2298  0521  035B               	decf	_man,w
  2299  0522  045C               	iorwf	_man+1,w
  2300  0523  1D03               	btfss	3,2
  2301  0524  2D6E               	goto	l3110
  2302                           
  2303                           ;blynd.c: 312: {
  2304                           ;blynd.c: 313: st[9]='R'; st[10]='0'; st[11]='0'; st[12]='3'; writeUART(st+9);
  2305  0525  3052               	movlw	82
  2306  0526  00C7               	movwf	??_main
  2307  0527  0847               	movf	??_main,w
  2308  0528  0021               	movlb	1	; select bank1
  2309  0529  00A9               	movwf	(_st^(0+128)+9)
  2310  052A  3030               	movlw	48
  2311  052B  0020               	movlb	0	; select bank0
  2312  052C  00C7               	movwf	??_main
  2313  052D  0847               	movf	??_main,w
  2314  052E  0021               	movlb	1	; select bank1
  2315  052F  00AA               	movwf	(_st^(0+128)+10)
  2316  0530  3030               	movlw	48
  2317  0531  0020               	movlb	0	; select bank0
  2318  0532  00C7               	movwf	??_main
  2319  0533  0847               	movf	??_main,w
  2320  0534  0021               	movlb	1	; select bank1
  2321  0535  00AB               	movwf	(_st^(0+128)+11)
  2322  0536  3033               	movlw	51
  2323  0537  0020               	movlb	0	; select bank0
  2324  0538  00C7               	movwf	??_main
  2325  0539  0847               	movf	??_main,w
  2326  053A  0021               	movlb	1	; select bank1
  2327  053B  00AC               	movwf	(_st^(0+128)+12)
  2328  053C  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  2329  053D  3187  27D9  3181   	fcall	_writeUART
  2330                           
  2331                           ;blynd.c: 314: RA3=0;
  2332  0540  0020               	movlb	0	; select bank0
  2333  0541  118C               	bcf	12,3	;volatile
  2334                           
  2335                           ;blynd.c: 315: st[13]='R'; st[14]='1'; st[15]='0'; st[16]='4'; writeUART(st+13);
  2336  0542  3052               	movlw	82
  2337  0543  00C7               	movwf	??_main
  2338  0544  0847               	movf	??_main,w
  2339  0545  0021               	movlb	1	; select bank1
  2340  0546  00AD               	movwf	(_st^(0+128)+13)
  2341  0547  3031               	movlw	49
  2342  0548  0020               	movlb	0	; select bank0
  2343  0549  00C7               	movwf	??_main
  2344  054A  0847               	movf	??_main,w
  2345  054B  0021               	movlb	1	; select bank1
  2346  054C  00AE               	movwf	(_st^(0+128)+14)
  2347  054D  3030               	movlw	48
  2348  054E  0020               	movlb	0	; select bank0
  2349  054F  00C7               	movwf	??_main
  2350  0550  0847               	movf	??_main,w
  2351  0551  0021               	movlb	1	; select bank1
  2352  0552  00AF               	movwf	(_st^(0+128)+15)
  2353  0553  3034               	movlw	52
  2354  0554  0020               	movlb	0	; select bank0
  2355  0555  00C7               	movwf	??_main
  2356  0556  0847               	movf	??_main,w
  2357  0557  0021               	movlb	1	; select bank1
  2358  0558  00B0               	movwf	(_st^(0+128)+16)
  2359  0559  30AD               	movlw	(low ((_st| 0+13)))& (0+255)
  2360  055A  3187  27D9  3181   	fcall	_writeUART
  2361                           
  2362                           ;blynd.c: 316: RA2=1; curtFlag2=1; TimerCounter2=0;
  2363  055D  0020               	movlb	0	; select bank0
  2364  055E  150C               	bsf	12,2	;volatile
  2365  055F  3001               	movlw	1
  2366  0560  0021               	movlb	1	; select bank1
  2367  0561  00E8               	movwf	_curtFlag2^(0+128)
  2368  0562  3000               	movlw	0
  2369  0563  00E9               	movwf	(_curtFlag2^(0+128)+1)
  2370  0564  01F0               	clrf	_TimerCounter2
  2371  0565  01F1               	clrf	_TimerCounter2+1
  2372                           
  2373                           ;blynd.c: 317: TMR1H=0x0B; TMR1L=0xDC; PIR3bits.TMR3IF=0; T3CONbits.TMR3ON = 1;
  2374  0566  300B               	movlw	11
  2375  0567  0020               	movlb	0	; select bank0
  2376  0568  0097               	movwf	23	;volatile
  2377  0569  30DC               	movlw	220
  2378  056A  0096               	movwf	22	;volatile
  2379  056B  1013               	bcf	19,0	;volatile
  2380  056C  0028               	movlb	8	; select bank8
  2381  056D  1413               	bsf	19,0	;volatile
  2382  056E                     l3110:	
  2383                           
  2384                           ;blynd.c: 318: }
  2385                           ;blynd.c: 319: M4=0; man=1;
  2386  056E  0020               	movlb	0	; select bank0
  2387  056F  01CD               	clrf	_M4
  2388  0570  01CE               	clrf	_M4+1
  2389  0571  3001               	movlw	1
  2390  0572  00DB               	movwf	_man
  2391  0573  3000               	movlw	0
  2392  0574  00DC               	movwf	_man+1
  2393  0575  2992               	goto	l2774
  2394  0576                     __end_of_main:	
  2395                           
  2396                           	psect	text1
  2397  0F20                     __ptext1:	
  2398 ;; *************** function _pin_manager *****************
  2399 ;; Defined at:
  2400 ;;		line 549 in file "blynd.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2418 ;;Total ram usage:        0 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    2
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           
  2429                           ;psect for function _pin_manager
  2430  0F20                     _pin_manager:	
  2431                           
  2432                           ;blynd.c: 553: ANSELG=0x00;
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _pin_manager: [wreg+status,2]
  2436  0F20  0028               	movlb	8	; select bank8
  2437  0F21  018D               	clrf	13	;volatile
  2438                           
  2439                           ;blynd.c: 555: WPUG = 0;
  2440  0F22  0029               	movlb	9	; select bank9
  2441  0F23  018D               	clrf	13	;volatile
  2442                           
  2443                           ;blynd.c: 558: ANSELF=0x00;
  2444  0F24  0028               	movlb	8	; select bank8
  2445  0F25  018C               	clrf	12	;volatile
  2446                           
  2447                           ;blynd.c: 559: TRISFbits.TRISF0=0;
  2448  0F26  0026               	movlb	6	; select bank6
  2449  0F27  100C               	bcf	12,0	;volatile
  2450                           
  2451                           ;blynd.c: 560: TRISFbits.TRISF1=0;
  2452  0F28  108C               	bcf	12,1	;volatile
  2453                           
  2454                           ;blynd.c: 561: TRISFbits.TRISF2=1;
  2455  0F29  150C               	bsf	12,2	;volatile
  2456                           
  2457                           ;blynd.c: 562: TRISFbits.TRISF3=1;
  2458  0F2A  158C               	bsf	12,3	;volatile
  2459                           
  2460                           ;blynd.c: 563: TRISFbits.TRISF4=1;
  2461  0F2B  160C               	bsf	12,4	;volatile
  2462                           
  2463                           ;blynd.c: 564: TRISFbits.TRISF5=1;
  2464  0F2C  168C               	bsf	12,5	;volatile
  2465                           
  2466                           ;blynd.c: 565: TRISFbits.TRISF6=1;
  2467  0F2D  170C               	bsf	12,6	;volatile
  2468                           
  2469                           ;blynd.c: 566: TRISFbits.TRISF7=1;
  2470  0F2E  178C               	bsf	12,7	;volatile
  2471                           
  2472                           ;blynd.c: 569: WPUE=0x00;
  2473  0F2F  0024               	movlb	4	; select bank4
  2474  0F30  0190               	clrf	16	;volatile
  2475                           
  2476                           ;blynd.c: 570: ANSELE=0x00;
  2477  0F31  0023               	movlb	3	; select bank3
  2478  0F32  0190               	clrf	16	;volatile
  2479                           
  2480                           ;blynd.c: 571: TRISEbits.TRISE3=1;
  2481  0F33  0021               	movlb	1	; select bank1
  2482  0F34  1590               	bsf	16,3	;volatile
  2483                           
  2484                           ;blynd.c: 572: TRISEbits.TRISE5=0;
  2485  0F35  1290               	bcf	16,5	;volatile
  2486                           
  2487                           ;blynd.c: 575: WPUD=0x00;
  2488  0F36  0024               	movlb	4	; select bank4
  2489  0F37  018F               	clrf	15	;volatile
  2490                           
  2491                           ;blynd.c: 576: ANSELD=0x00;
  2492  0F38  0023               	movlb	3	; select bank3
  2493  0F39  018F               	clrf	15	;volatile
  2494                           
  2495                           ;blynd.c: 577: TRISD=0xFF;
  2496  0F3A  30FF               	movlw	255
  2497  0F3B  0021               	movlb	1	; select bank1
  2498  0F3C  008F               	movwf	15	;volatile
  2499                           
  2500                           ;blynd.c: 580: TRISCbits.TRISC0=0;
  2501  0F3D  100E               	bcf	14,0	;volatile
  2502                           
  2503                           ;blynd.c: 581: TRISCbits.TRISC1=0;
  2504  0F3E  108E               	bcf	14,1	;volatile
  2505                           
  2506                           ;blynd.c: 584: ANSELB=0x00;
  2507  0F3F  0023               	movlb	3	; select bank3
  2508  0F40  018D               	clrf	13	;volatile
  2509                           
  2510                           ;blynd.c: 585: TRISBbits.TRISB1=0;
  2511  0F41  0021               	movlb	1	; select bank1
  2512  0F42  108D               	bcf	13,1	;volatile
  2513                           
  2514                           ;blynd.c: 586: TRISBbits.TRISB3=0;
  2515  0F43  118D               	bcf	13,3	;volatile
  2516                           
  2517                           ;blynd.c: 587: WPUB = 0x00;
  2518  0F44  0024               	movlb	4	; select bank4
  2519  0F45  018D               	clrf	13	;volatile
  2520                           
  2521                           ;blynd.c: 590: ANSELA = 0x00;
  2522  0F46  0023               	movlb	3	; select bank3
  2523  0F47  018C               	clrf	12	;volatile
  2524                           
  2525                           ;blynd.c: 591: TRISAbits.TRISA0=0;
  2526  0F48  0021               	movlb	1	; select bank1
  2527  0F49  100C               	bcf	12,0	;volatile
  2528                           
  2529                           ;blynd.c: 592: TRISAbits.TRISA1=0;
  2530  0F4A  108C               	bcf	12,1	;volatile
  2531                           
  2532                           ;blynd.c: 593: TRISAbits.TRISA2=0;
  2533  0F4B  110C               	bcf	12,2	;volatile
  2534                           
  2535                           ;blynd.c: 594: TRISAbits.TRISA3=0;
  2536  0F4C  118C               	bcf	12,3	;volatile
  2537                           
  2538                           ;blynd.c: 596: TRISAbits.TRISA5=1;
  2539  0F4D  168C               	bsf	12,5	;volatile
  2540                           
  2541                           ;blynd.c: 604: TRISCbits.TRISC6 = 0;
  2542  0F4E  130E               	bcf	14,6	;volatile
  2543                           
  2544                           ;blynd.c: 605: TRISCbits.TRISC7 = 1;
  2545  0F4F  178E               	bsf	14,7	;volatile
  2546  0F50  0008               	return
  2547  0F51                     __end_of_pin_manager:	
  2548                           
  2549                           	psect	text2
  2550  07F6                     __ptext2:	
  2551 ;; *************** function _periperal_init *****************
  2552 ;; Defined at:
  2553 ;;		line 141 in file "blynd.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0, pclath, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    3
  2574 ;; This function calls:
  2575 ;;		_EUSART_Initialize
  2576 ;;		_TMR1_Initialize
  2577 ;;		_TMR3_Initialize
  2578 ;; This function is called by:
  2579 ;;		_main
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           
  2584                           ;psect for function _periperal_init
  2585  07F6                     _periperal_init:	
  2586                           
  2587                           ;blynd.c: 142: EUSART_Initialize();
  2588                           
  2589                           ;incstack = 0
  2590                           ; Regs used in _periperal_init: [wreg+status,2+status,0+pclath+cstack]
  2591  07F6  318E  26D5  3187   	fcall	_EUSART_Initialize
  2592                           
  2593                           ;blynd.c: 143: TMR1_Initialize();
  2594  07F9  318E  26AB  3187   	fcall	_TMR1_Initialize
  2595                           
  2596                           ;blynd.c: 144: TMR3_Initialize();
  2597  07FC  318E  26C6         	fcall	_TMR3_Initialize
  2598  07FE  0008               	return
  2599  07FF                     __end_of_periperal_init:	
  2600                           
  2601                           	psect	text3
  2602  0EC6                     __ptext3:	
  2603 ;; *************** function _TMR3_Initialize *****************
  2604 ;; Defined at:
  2605 ;;		line 518 in file "blynd.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    2
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_periperal_init
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _TMR3_Initialize
  2635  0EC6                     _TMR3_Initialize:	
  2636                           
  2637                           ;blynd.c: 522: T3CON = 0x30;
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _TMR3_Initialize: [wreg+status,2]
  2641  0EC6  3030               	movlw	48
  2642  0EC7  0028               	movlb	8	; select bank8
  2643  0EC8  0093               	movwf	19	;volatile
  2644                           
  2645                           ;blynd.c: 525: T3GCON = 0x00;
  2646  0EC9  0194               	clrf	20	;volatile
  2647                           
  2648                           ;blynd.c: 528: TMR3H = 0x00;
  2649  0ECA  0192               	clrf	18	;volatile
  2650                           
  2651                           ;blynd.c: 531: TMR3L = 0x00;
  2652  0ECB  0191               	clrf	17	;volatile
  2653                           
  2654                           ;blynd.c: 534: PIR3bits.TMR3IF = 0;
  2655  0ECC  0020               	movlb	0	; select bank0
  2656  0ECD  1013               	bcf	19,0	;volatile
  2657                           
  2658                           ;blynd.c: 537: PIE3bits.TMR3IE = 1;
  2659  0ECE  0021               	movlb	1	; select bank1
  2660  0ECF  1413               	bsf	19,0	;volatile
  2661                           
  2662                           ;blynd.c: 540: T1CONbits.TMR1ON = 1;
  2663  0ED0  0020               	movlb	0	; select bank0
  2664  0ED1  1418               	bsf	24,0	;volatile
  2665                           
  2666                           ;blynd.c: 543: GIE = 1;
  2667  0ED2  178B               	bsf	11,7	;volatile
  2668                           
  2669                           ;blynd.c: 546: PEIE = 1;
  2670  0ED3  170B               	bsf	11,6	;volatile
  2671  0ED4  0008               	return
  2672  0ED5                     __end_of_TMR3_Initialize:	
  2673                           
  2674                           	psect	text4
  2675  0EAB                     __ptext4:	
  2676 ;; *************** function _TMR1_Initialize *****************
  2677 ;; Defined at:
  2678 ;;		line 487 in file "blynd.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;		None
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;		None
  2683 ;; Return value:  Size  Location     Type
  2684 ;;                  1    wreg      void 
  2685 ;; Registers used:
  2686 ;;		wreg, status,2
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2696 ;;Total ram usage:        0 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    2
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_periperal_init
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           
  2707                           ;psect for function _TMR1_Initialize
  2708  0EAB                     _TMR1_Initialize:	
  2709                           
  2710                           ;blynd.c: 491: T1CON = 0x30;
  2711                           
  2712                           ;incstack = 0
  2713                           ; Regs used in _TMR1_Initialize: [wreg+status,2]
  2714  0EAB  3030               	movlw	48
  2715  0EAC  0020               	movlb	0	; select bank0
  2716  0EAD  0098               	movwf	24	;volatile
  2717                           
  2718                           ;blynd.c: 494: T1GCON = 0x00;
  2719  0EAE  0199               	clrf	25	;volatile
  2720                           
  2721                           ;blynd.c: 497: TMR1H = 0x00;
  2722  0EAF  0197               	clrf	23	;volatile
  2723                           
  2724                           ;blynd.c: 500: TMR1L = 0x00;
  2725  0EB0  0196               	clrf	22	;volatile
  2726                           
  2727                           ;blynd.c: 503: PIR1bits.TMR1IF = 0;
  2728  0EB1  1011               	bcf	17,0	;volatile
  2729                           
  2730                           ;blynd.c: 506: PIE1bits.TMR1IE = 1;
  2731  0EB2  0021               	movlb	1	; select bank1
  2732  0EB3  1411               	bsf	17,0	;volatile
  2733                           
  2734                           ;blynd.c: 509: T1CONbits.TMR1ON = 1;
  2735  0EB4  0020               	movlb	0	; select bank0
  2736  0EB5  1418               	bsf	24,0	;volatile
  2737  0EB6  0008               	return
  2738  0EB7                     __end_of_TMR1_Initialize:	
  2739                           
  2740                           	psect	text5
  2741  0ED5                     __ptext5:	
  2742 ;; *************** function _EUSART_Initialize *****************
  2743 ;; Defined at:
  2744 ;;		line 448 in file "blynd.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;		None
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;		None
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2762 ;;Total ram usage:        0 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    2
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_periperal_init
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _EUSART_Initialize
  2774  0ED5                     _EUSART_Initialize:	
  2775                           
  2776                           ;blynd.c: 450: PIE1bits.RC1IE = 0;
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _EUSART_Initialize: [wreg]
  2780  0ED5  0021               	movlb	1	; select bank1
  2781  0ED6  1291               	bcf	17,5	;volatile
  2782                           
  2783                           ;blynd.c: 451: PIE1bits.TX1IE = 0;
  2784  0ED7  1211               	bcf	17,4	;volatile
  2785                           
  2786                           ;blynd.c: 456: BAUD1CON = 0x0A;
  2787  0ED8  300A               	movlw	10
  2788  0ED9  0023               	movlb	3	; select bank3
  2789  0EDA  009F               	movwf	31	;volatile
  2790                           
  2791                           ;blynd.c: 459: RC1STA = 0x90;
  2792  0EDB  3090               	movlw	144
  2793  0EDC  009D               	movwf	29	;volatile
  2794                           
  2795                           ;blynd.c: 462: TX1STA = 0x24;
  2796  0EDD  3024               	movlw	36
  2797  0EDE  009E               	movwf	30	;volatile
  2798                           
  2799                           ;blynd.c: 467: SP1BRGL = 0xA0;
  2800  0EDF  30A0               	movlw	160
  2801  0EE0  009B               	movwf	27	;volatile
  2802                           
  2803                           ;blynd.c: 469: SP1BRGH = 0x01;
  2804  0EE1  3001               	movlw	1
  2805  0EE2  009C               	movwf	28	;volatile
  2806                           
  2807                           ;blynd.c: 472: GIE = 1;
  2808  0EE3  178B               	bsf	11,7	;volatile
  2809                           
  2810                           ;blynd.c: 475: PEIE = 1;
  2811  0EE4  170B               	bsf	11,6	;volatile
  2812                           
  2813                           ;blynd.c: 478: PIE1bits.RC1IE = 1;
  2814  0EE5  0021               	movlb	1	; select bank1
  2815  0EE6  1691               	bsf	17,5	;volatile
  2816                           
  2817                           ;blynd.c: 481: TX1STAbits.TXEN = 1;
  2818  0EE7  0023               	movlb	3	; select bank3
  2819  0EE8  169E               	bsf	30,5	;volatile
  2820                           
  2821                           ;blynd.c: 484: RC1STAbits.SPEN = 1;
  2822  0EE9  179D               	bsf	29,7	;volatile
  2823  0EEA  0008               	return
  2824  0EEB                     __end_of_EUSART_Initialize:	
  2825                           
  2826                           	psect	text6
  2827  0F83                     __ptext6:	
  2828 ;; *************** function _copy_frame *****************
  2829 ;; Defined at:
  2830 ;;		line 325 in file "blynd.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  start           2    0[BANK0 ] int 
  2833 ;;  end             2    2[BANK0 ] int 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2845 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2848 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2849 ;;Total ram usage:        5 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    2
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_main
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _copy_frame
  2861  0F83                     _copy_frame:	
  2862                           
  2863                           ;blynd.c: 326: sw=0;
  2864                           
  2865                           ;incstack = 0
  2866                           ; Regs used in _copy_frame: [wreg+fsr1l+fsr1h+status,2+status,0]
  2867  0F83  0021               	movlb	1	; select bank1
  2868  0F84  01D2               	clrf	_sw^(0+128)
  2869  0F85  01D3               	clrf	(_sw+1)^(0+128)
  2870                           
  2871                           ;blynd.c: 327: for(k = start; k< end; k++)
  2872  0F86  0020               	movlb	0	; select bank0
  2873  0F87  0821               	movf	copy_frame@start+1,w
  2874  0F88  00D8               	movwf	_k+1
  2875  0F89  0820               	movf	copy_frame@start,w
  2876  0F8A  00D7               	movwf	_k
  2877  0F8B                     l252:	
  2878  0F8B  0858               	movf	_k+1,w
  2879  0F8C  3A80               	xorlw	128
  2880  0F8D  00A4               	movwf	??_copy_frame
  2881  0F8E  0823               	movf	copy_frame@end+1,w
  2882  0F8F  3A80               	xorlw	128
  2883  0F90  0224               	subwf	??_copy_frame,w
  2884  0F91  1D03               	skipz
  2885  0F92  2F95               	goto	u2055
  2886  0F93  0822               	movf	copy_frame@end,w
  2887  0F94  0257               	subwf	_k,w
  2888  0F95                     u2055:	
  2889  0F95  1803               	btfsc	3,0
  2890  0F96  2FBC               	goto	l2576
  2891                           
  2892                           ;blynd.c: 328: {
  2893                           ;blynd.c: 329: copy[sw]=name[k];
  2894  0F97  0020               	movlb	0	; select bank0
  2895  0F98  0857               	movf	_k,w
  2896  0F99  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2897  0F9A  0086               	movwf	6
  2898  0F9B  3001               	movlw	1	; select bank2/3
  2899  0F9C  0087               	movwf	7
  2900  0F9D  0801               	movf	1,w
  2901  0F9E  00A4               	movwf	??_copy_frame
  2902  0F9F  0021               	movlb	1	; select bank1
  2903  0FA0  0852               	movf	_sw^(0+128),w
  2904  0FA1  3E20               	addlw	(low (_copy| (0+256)))& (0+255)
  2905  0FA2  0086               	movwf	6
  2906  0FA3  3001               	movlw	1	; select bank2/3
  2907  0FA4  0087               	movwf	7
  2908  0FA5  0020               	movlb	0	; select bank0
  2909  0FA6  0824               	movf	??_copy_frame,w
  2910  0FA7  0081               	movwf	1
  2911                           
  2912                           ;blynd.c: 330: sw++;
  2913  0FA8  3001               	movlw	1
  2914  0FA9  0021               	movlb	1	; select bank1
  2915  0FAA  07D2               	addwf	_sw^(0+128),f
  2916  0FAB  3000               	movlw	0
  2917  0FAC  3DD3               	addwfc	(_sw+1)^(0+128),f
  2918                           
  2919                           ;blynd.c: 331: name[k] = '#';
  2920  0FAD  3023               	movlw	35
  2921  0FAE  0020               	movlb	0	; select bank0
  2922  0FAF  00A4               	movwf	??_copy_frame
  2923  0FB0  0857               	movf	_k,w
  2924  0FB1  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2925  0FB2  0086               	movwf	6
  2926  0FB3  3001               	movlw	1	; select bank2/3
  2927  0FB4  0087               	movwf	7
  2928  0FB5  0824               	movf	??_copy_frame,w
  2929  0FB6  0081               	movwf	1
  2930  0FB7  3001               	movlw	1
  2931  0FB8  07D7               	addwf	_k,f
  2932  0FB9  3000               	movlw	0
  2933  0FBA  3DD8               	addwfc	_k+1,f
  2934  0FBB  2F8B               	goto	l252
  2935  0FBC                     l2576:	
  2936                           
  2937                           ;blynd.c: 332: }
  2938                           ;blynd.c: 337: COPY_FLAG=0;
  2939  0FBC  0020               	movlb	0	; select bank0
  2940  0FBD  01D5               	clrf	_COPY_FLAG
  2941  0FBE  01D6               	clrf	_COPY_FLAG+1
  2942  0FBF  0008               	return
  2943  0FC0                     __end_of_copy_frame:	
  2944                           
  2945                           	psect	text7
  2946  0576                     __ptext7:	
  2947 ;; *************** function _ACTION *****************
  2948 ;; Defined at:
  2949 ;;		line 340 in file "blynd.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  Switch_Num_1    1    wreg     unsigned char 
  2952 ;;  Switch_Num_1    1   14[BANK0 ] unsigned char 
  2953 ;;  sw_status       1   15[BANK0 ] unsigned char 
  2954 ;;  speed_bit1      1   16[BANK0 ] unsigned char 
  2955 ;;  speed_bit2      1   17[BANK0 ] unsigned char 
  2956 ;;  parent          1   18[BANK0 ] unsigned char 
  2957 ;;  finalFrameSt    1   19[BANK0 ] unsigned char 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  Switch_Num_1    1   28[BANK0 ] unsigned char 
  2960 ;;  SwNumString     2   31[BANK0 ] unsigned char [2]
  2961 ;;  FanSpeedStri    2   29[BANK0 ] unsigned char [2]
  2962 ;;  child_lock_n    2   26[BANK0 ] int 
  2963 ;;  children        2   24[BANK0 ] int 
  2964 ;;  FanSpeed        2   22[BANK0 ] int 
  2965 ;;  switch_statu    2   37[BANK0 ] int 
  2966 ;;  response_sta    2   35[BANK0 ] int 
  2967 ;;  SwNum           2   33[BANK0 ] int 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2977 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  2978 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0
  2979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  2980 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0
  2981 ;;Total ram usage:       25 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    4
  2984 ;; This function calls:
  2985 ;;		_atoi
  2986 ;;		_writeUART
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _ACTION
  2994  0576                     _ACTION:	
  2995                           
  2996                           ;incstack = 0
  2997                           ; Regs used in _ACTION: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2998                           ;ACTION@Switch_Num_10s stored from wreg
  2999  0576  0020               	movlb	0	; select bank0
  3000  0577  00BC               	movwf	ACTION@Switch_Num_10s
  3001                           
  3002                           ;blynd.c: 342: int response_starts=0;
  3003  0578  01C3               	clrf	ACTION@response_starts
  3004  0579  01C4               	clrf	ACTION@response_starts+1
  3005                           
  3006                           ;blynd.c: 343: int switch_status=0;
  3007  057A  01C5               	clrf	ACTION@switch_status
  3008  057B  01C6               	clrf	ACTION@switch_status+1
  3009                           
  3010                           ;blynd.c: 344: int SwNum=0;
  3011  057C  01C1               	clrf	ACTION@SwNum
  3012  057D  01C2               	clrf	ACTION@SwNum+1
  3013                           
  3014                           ;blynd.c: 346: if(Switch_Num_1s != 'T')
  3015  057E  3054               	movlw	84
  3016  057F  062E               	xorwf	ACTION@Switch_Num_1s,w
  3017  0580  1903               	btfsc	3,2
  3018  0581  2F11               	goto	l2734
  3019                           
  3020                           ;blynd.c: 347: {
  3021                           ;blynd.c: 348: unsigned char FanSpeedString[2], SwNumString[2];
  3022                           ;blynd.c: 349: int FanSpeed=0;
  3023  0582  01B6               	clrf	ACTION@FanSpeed
  3024  0583  01B7               	clrf	ACTION@FanSpeed+1
  3025                           
  3026                           ;blynd.c: 351: switch_status=sw_status - '0';
  3027  0584  082F               	movf	ACTION@sw_status,w
  3028  0585  3ED0               	addlw	208
  3029  0586  00C5               	movwf	ACTION@switch_status
  3030  0587  30FF               	movlw	255
  3031  0588  1803               	skipnc
  3032  0589  3000               	movlw	0
  3033  058A  00C6               	movwf	ACTION@switch_status+1
  3034                           
  3035                           ;blynd.c: 353: SwNumString[0]=Switch_Num_10s;
  3036  058B  083C               	movf	ACTION@Switch_Num_10s,w
  3037  058C  00B4               	movwf	??_ACTION
  3038  058D  0834               	movf	??_ACTION,w
  3039  058E  00BF               	movwf	ACTION@SwNumString
  3040                           
  3041                           ;blynd.c: 354: SwNumString[1]=Switch_Num_1s;
  3042  058F  082E               	movf	ACTION@Switch_Num_1s,w
  3043  0590  00B4               	movwf	??_ACTION
  3044  0591  0834               	movf	??_ACTION,w
  3045  0592  00C0               	movwf	ACTION@SwNumString+1
  3046                           
  3047                           ;blynd.c: 355: SwNum=atoi(SwNumString);
  3048  0593  303F               	movlw	(low (ACTION@SwNumString| 0))& (0+255)
  3049  0594  3187  2726  3185   	fcall	_atoi
  3050  0597  0020               	movlb	0	; select bank0
  3051  0598  0827               	movf	?_atoi+1,w
  3052  0599  00C2               	movwf	ACTION@SwNum+1
  3053  059A  0826               	movf	?_atoi,w
  3054  059B  00C1               	movwf	ACTION@SwNum
  3055                           
  3056                           ;blynd.c: 357: FanSpeedString[0] = speed_bit1;
  3057  059C  0830               	movf	ACTION@speed_bit1,w
  3058  059D  00B4               	movwf	??_ACTION
  3059  059E  0834               	movf	??_ACTION,w
  3060  059F  00BD               	movwf	ACTION@FanSpeedString
  3061                           
  3062                           ;blynd.c: 358: FanSpeedString[1] = speed_bit2;
  3063  05A0  0831               	movf	ACTION@speed_bit2,w
  3064  05A1  00B4               	movwf	??_ACTION
  3065  05A2  0834               	movf	??_ACTION,w
  3066  05A3  00BE               	movwf	ACTION@FanSpeedString+1
  3067                           
  3068                           ;blynd.c: 359: FanSpeed = atoi(FanSpeedString);
  3069  05A4  303D               	movlw	(low (ACTION@FanSpeedString| 0))& (0+255)
  3070  05A5  3187  2726  3185   	fcall	_atoi
  3071  05A8  0020               	movlb	0	; select bank0
  3072  05A9  0827               	movf	?_atoi+1,w
  3073  05AA  00B7               	movwf	ACTION@FanSpeed+1
  3074  05AB  0826               	movf	?_atoi,w
  3075  05AC  00B6               	movwf	ACTION@FanSpeed
  3076                           
  3077                           ;blynd.c: 361: int children=parent - '0';
  3078  05AD  0832               	movf	ACTION@parent,w
  3079  05AE  3ED0               	addlw	208
  3080  05AF  00B8               	movwf	ACTION@children
  3081  05B0  30FF               	movlw	255
  3082  05B1  1803               	skipnc
  3083  05B2  3000               	movlw	0
  3084  05B3  00B9               	movwf	ACTION@children+1
  3085                           
  3086                           ;blynd.c: 362: int child_lock_num=(2*(SwNum)-1);
  3087  05B4  0842               	movf	ACTION@SwNum+1,w
  3088  05B5  00B5               	movwf	??_ACTION+1
  3089  05B6  0841               	movf	ACTION@SwNum,w
  3090  05B7  00B4               	movwf	??_ACTION
  3091  05B8  35B4               	lslf	??_ACTION,f
  3092  05B9  0DB5               	rlf	??_ACTION+1,f
  3093  05BA  0834               	movf	??_ACTION,w
  3094  05BB  3EFF               	addlw	255
  3095  05BC  00BA               	movwf	ACTION@child_lock_num
  3096  05BD  30FF               	movlw	255
  3097  05BE  3D35               	addwfc	??_ACTION+1,w
  3098  05BF  00BB               	movwf	ACTION@child_lock_num+1
  3099                           
  3100                           ;blynd.c: 363: child_LOCK[child_lock_num]=children;
  3101  05C0  353A               	lslf	ACTION@child_lock_num,w
  3102  05C1  3EA0               	addlw	(low (_child_LOCK| (0+256)))& (0+255)
  3103  05C2  0086               	movwf	6
  3104  05C3  3001               	movlw	1	; select bank3/4
  3105  05C4  0087               	movwf	7
  3106  05C5  0838               	movf	ACTION@children,w
  3107  05C6  3FC0               	movwi [0]fsr1
  3108  05C7  0839               	movf	ACTION@children+1,w
  3109  05C8  3FC1               	movwi [1]fsr1
  3110                           
  3111                           ;blynd.c: 365: response_starts=((1+4*(SwNum))-4);
  3112  05C9  0842               	movf	ACTION@SwNum+1,w
  3113  05CA  00B5               	movwf	??_ACTION+1
  3114  05CB  0841               	movf	ACTION@SwNum,w
  3115  05CC  00B4               	movwf	??_ACTION
  3116  05CD  35B4               	lslf	??_ACTION,f
  3117  05CE  0DB5               	rlf	??_ACTION+1,f
  3118  05CF  35B4               	lslf	??_ACTION,f
  3119  05D0  0DB5               	rlf	??_ACTION+1,f
  3120  05D1  0834               	movf	??_ACTION,w
  3121  05D2  3EFD               	addlw	253
  3122  05D3  00C3               	movwf	ACTION@response_starts
  3123  05D4  30FF               	movlw	255
  3124  05D5  3D35               	addwfc	??_ACTION+1,w
  3125  05D6  00C4               	movwf	ACTION@response_starts+1
  3126                           
  3127                           ;blynd.c: 366: st[response_starts++]='G';
  3128  05D7  3047               	movlw	71
  3129  05D8  00B4               	movwf	??_ACTION
  3130  05D9  0843               	movf	ACTION@response_starts,w
  3131  05DA  3EA0               	addlw	(low (_st| 0))& (0+255)
  3132  05DB  0086               	movwf	6
  3133  05DC  0187               	clrf	7
  3134  05DD  0834               	movf	??_ACTION,w
  3135  05DE  0081               	movwf	1
  3136  05DF  3001               	movlw	1
  3137  05E0  07C3               	addwf	ACTION@response_starts,f
  3138  05E1  3000               	movlw	0
  3139  05E2  3DC4               	addwfc	ACTION@response_starts+1,f
  3140                           
  3141                           ;blynd.c: 367: st[response_starts++]=sw_status;
  3142  05E3  082F               	movf	ACTION@sw_status,w
  3143  05E4  00B4               	movwf	??_ACTION
  3144  05E5  0843               	movf	ACTION@response_starts,w
  3145  05E6  3EA0               	addlw	(low (_st| 0))& (0+255)
  3146  05E7  0086               	movwf	6
  3147  05E8  0187               	clrf	7
  3148  05E9  0834               	movf	??_ACTION,w
  3149  05EA  0081               	movwf	1
  3150  05EB  3001               	movlw	1
  3151  05EC  07C3               	addwf	ACTION@response_starts,f
  3152  05ED  3000               	movlw	0
  3153  05EE  3DC4               	addwfc	ACTION@response_starts+1,f
  3154                           
  3155                           ;blynd.c: 368: st[response_starts++]=Switch_Num_10s;
  3156  05EF  083C               	movf	ACTION@Switch_Num_10s,w
  3157  05F0  00B4               	movwf	??_ACTION
  3158  05F1  0843               	movf	ACTION@response_starts,w
  3159  05F2  3EA0               	addlw	(low (_st| 0))& (0+255)
  3160  05F3  0086               	movwf	6
  3161  05F4  0187               	clrf	7
  3162  05F5  0834               	movf	??_ACTION,w
  3163  05F6  0081               	movwf	1
  3164  05F7  3001               	movlw	1
  3165  05F8  07C3               	addwf	ACTION@response_starts,f
  3166  05F9  3000               	movlw	0
  3167  05FA  3DC4               	addwfc	ACTION@response_starts+1,f
  3168                           
  3169                           ;blynd.c: 369: st[response_starts]=Switch_Num_1s;
  3170  05FB  082E               	movf	ACTION@Switch_Num_1s,w
  3171  05FC  00B4               	movwf	??_ACTION
  3172  05FD  0843               	movf	ACTION@response_starts,w
  3173  05FE  3EA0               	addlw	(low (_st| 0))& (0+255)
  3174  05FF  0086               	movwf	6
  3175  0600  0187               	clrf	7
  3176  0601  0834               	movf	??_ACTION,w
  3177  0602  0081               	movwf	1
  3178                           
  3179                           ;blynd.c: 371: response_starts-=3;
  3180  0603  30FD               	movlw	253
  3181  0604  07C3               	addwf	ACTION@response_starts,f
  3182  0605  30FF               	movlw	255
  3183  0606  3DC4               	addwfc	ACTION@response_starts+1,f
  3184                           
  3185                           ;blynd.c: 372: if(finalFrameStat=='1')
  3186  0607  3031               	movlw	49
  3187  0608  0633               	xorwf	ACTION@finalFrameStat,w
  3188  0609  1D03               	btfss	3,2
  3189  060A  2E10               	goto	l2626
  3190                           
  3191                           ;blynd.c: 373: {
  3192                           ;blynd.c: 374: writeUART(st+response_starts);
  3193  060B  0843               	movf	ACTION@response_starts,w
  3194  060C  3EA0               	addlw	(low (_st| 0))& (0+255)
  3195  060D  3187  27D9  3185   	fcall	_writeUART
  3196  0610                     l2626:	
  3197                           
  3198                           ;blynd.c: 375: }
  3199                           ;blynd.c: 376: man=0;
  3200  0610  0020               	movlb	0	; select bank0
  3201  0611  01DB               	clrf	_man
  3202  0612  01DC               	clrf	_man+1
  3203                           
  3204                           ;blynd.c: 377: }
  3205                           ;blynd.c: 379: switch(SwNum)
  3206  0613  2F11               	goto	l2734
  3207  0614                     l2628:	
  3208                           ;blynd.c: 380: {
  3209                           ;blynd.c: 381: case 1:
  3210                           
  3211                           
  3212                           ;blynd.c: 382: M1=switch_status;
  3213  0614  0846               	movf	ACTION@switch_status+1,w
  3214  0615  00D4               	movwf	_M1+1
  3215  0616  0845               	movf	ACTION@switch_status,w
  3216  0617  00D3               	movwf	_M1
  3217                           
  3218                           ;blynd.c: 383: if(switch_status==1){
  3219  0618  0345               	decf	ACTION@switch_status,w
  3220  0619  0446               	iorwf	ACTION@switch_status+1,w
  3221  061A  1D03               	btfss	3,2
  3222  061B  2E49               	goto	l262
  3223                           
  3224                           ;blynd.c: 384: RF0=0;
  3225  061C  0025               	movlb	5	; select bank5
  3226  061D  100C               	bcf	12,0	;volatile
  3227                           
  3228                           ;blynd.c: 385: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  3229  061E  3047               	movlw	71
  3230  061F  0020               	movlb	0	; select bank0
  3231  0620  00B4               	movwf	??_ACTION
  3232  0621  0834               	movf	??_ACTION,w
  3233  0622  0021               	movlb	1	; select bank1
  3234  0623  00A5               	movwf	(_st^(0+128)+5)
  3235  0624  3030               	movlw	48
  3236  0625  0020               	movlb	0	; select bank0
  3237  0626  00B4               	movwf	??_ACTION
  3238  0627  0834               	movf	??_ACTION,w
  3239  0628  0021               	movlb	1	; select bank1
  3240  0629  00A6               	movwf	(_st^(0+128)+6)
  3241  062A  3030               	movlw	48
  3242  062B  0020               	movlb	0	; select bank0
  3243  062C  00B4               	movwf	??_ACTION
  3244  062D  0834               	movf	??_ACTION,w
  3245  062E  0021               	movlb	1	; select bank1
  3246  062F  00A7               	movwf	(_st^(0+128)+7)
  3247  0630  3032               	movlw	50
  3248  0631  0020               	movlb	0	; select bank0
  3249  0632  00B4               	movwf	??_ACTION
  3250  0633  0834               	movf	??_ACTION,w
  3251  0634  0021               	movlb	1	; select bank1
  3252  0635  00A8               	movwf	(_st^(0+128)+8)
  3253  0636  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  3254  0637  3187  27D9         	fcall	_writeUART
  3255                           
  3256                           ;blynd.c: 386: RF1=1; curtFlag1=1; TimerCounter1=0;
  3257  0639  0025               	movlb	5	; select bank5
  3258  063A  148C               	bsf	12,1	;volatile
  3259  063B  3001               	movlw	1
  3260  063C  0020               	movlb	0	; select bank0
  3261  063D  00D9               	movwf	_curtFlag1
  3262  063E  3000               	movlw	0
  3263  063F  00DA               	movwf	_curtFlag1+1
  3264  0640  01F2               	clrf	_TimerCounter1
  3265  0641  01F3               	clrf	_TimerCounter1+1
  3266                           
  3267                           ;blynd.c: 387: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  3268  0642  300B               	movlw	11
  3269  0643  0097               	movwf	23	;volatile
  3270  0644  30DC               	movlw	220
  3271  0645  0096               	movwf	22	;volatile
  3272  0646  1011               	bcf	17,0	;volatile
  3273  0647  1418               	bsf	24,0	;volatile
  3274                           
  3275                           ;blynd.c: 388: }
  3276  0648  0008               	return
  3277  0649                     l262:	
  3278                           
  3279                           ;blynd.c: 389: else{
  3280                           ;blynd.c: 390: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  3281  0649  0025               	movlb	5	; select bank5
  3282  064A  100C               	bcf	12,0	;volatile
  3283  064B  108C               	bcf	12,1	;volatile
  3284  064C  0020               	movlb	0	; select bank0
  3285  064D  1018               	bcf	24,0	;volatile
  3286  064E  01D9               	clrf	_curtFlag1
  3287  064F  01DA               	clrf	_curtFlag1+1
  3288  0650  01F2               	clrf	_TimerCounter1
  3289  0651  01F3               	clrf	_TimerCounter1+1
  3290                           
  3291                           ;blynd.c: 391: }
  3292                           ;blynd.c: 392: break;
  3293  0652  0008               	return
  3294  0653                     l2654:	
  3295                           ;blynd.c: 393: case 2:
  3296                           
  3297                           
  3298                           ;blynd.c: 394: M2=switch_status;
  3299  0653  0846               	movf	ACTION@switch_status+1,w
  3300  0654  00D2               	movwf	_M2+1
  3301  0655  0845               	movf	ACTION@switch_status,w
  3302  0656  00D1               	movwf	_M2
  3303                           
  3304                           ;blynd.c: 395: if(switch_status==1){
  3305  0657  0345               	decf	ACTION@switch_status,w
  3306  0658  0446               	iorwf	ACTION@switch_status+1,w
  3307  0659  1D03               	btfss	3,2
  3308  065A  2E88               	goto	l266
  3309                           
  3310                           ;blynd.c: 396: RF1=0;
  3311  065B  0025               	movlb	5	; select bank5
  3312  065C  108C               	bcf	12,1	;volatile
  3313                           
  3314                           ;blynd.c: 397: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  3315  065D  3047               	movlw	71
  3316  065E  0020               	movlb	0	; select bank0
  3317  065F  00B4               	movwf	??_ACTION
  3318  0660  0834               	movf	??_ACTION,w
  3319  0661  0021               	movlb	1	; select bank1
  3320  0662  00A1               	movwf	(_st^(0+128)+1)
  3321  0663  3030               	movlw	48
  3322  0664  0020               	movlb	0	; select bank0
  3323  0665  00B4               	movwf	??_ACTION
  3324  0666  0834               	movf	??_ACTION,w
  3325  0667  0021               	movlb	1	; select bank1
  3326  0668  00A2               	movwf	(_st^(0+128)+2)
  3327  0669  3030               	movlw	48
  3328  066A  0020               	movlb	0	; select bank0
  3329  066B  00B4               	movwf	??_ACTION
  3330  066C  0834               	movf	??_ACTION,w
  3331  066D  0021               	movlb	1	; select bank1
  3332  066E  00A3               	movwf	(_st^(0+128)+3)
  3333  066F  3031               	movlw	49
  3334  0670  0020               	movlb	0	; select bank0
  3335  0671  00B4               	movwf	??_ACTION
  3336  0672  0834               	movf	??_ACTION,w
  3337  0673  0021               	movlb	1	; select bank1
  3338  0674  00A4               	movwf	(_st^(0+128)+4)
  3339  0675  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  3340  0676  3187  27D9         	fcall	_writeUART
  3341                           
  3342                           ;blynd.c: 398: RF0=1; curtFlag1=1; TimerCounter1=0;
  3343  0678  0025               	movlb	5	; select bank5
  3344  0679  140C               	bsf	12,0	;volatile
  3345  067A  3001               	movlw	1
  3346  067B  0020               	movlb	0	; select bank0
  3347  067C  00D9               	movwf	_curtFlag1
  3348  067D  3000               	movlw	0
  3349  067E  00DA               	movwf	_curtFlag1+1
  3350  067F  01F2               	clrf	_TimerCounter1
  3351  0680  01F3               	clrf	_TimerCounter1+1
  3352                           
  3353                           ;blynd.c: 399: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  3354  0681  300B               	movlw	11
  3355  0682  0097               	movwf	23	;volatile
  3356  0683  30DC               	movlw	220
  3357  0684  0096               	movwf	22	;volatile
  3358  0685  1011               	bcf	17,0	;volatile
  3359  0686  1418               	bsf	24,0	;volatile
  3360                           
  3361                           ;blynd.c: 400: }
  3362  0687  0008               	return
  3363  0688                     l266:	
  3364                           
  3365                           ;blynd.c: 401: else{
  3366                           ;blynd.c: 402: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  3367  0688  0025               	movlb	5	; select bank5
  3368  0689  100C               	bcf	12,0	;volatile
  3369  068A  108C               	bcf	12,1	;volatile
  3370  068B  0020               	movlb	0	; select bank0
  3371  068C  1018               	bcf	24,0	;volatile
  3372  068D  01D9               	clrf	_curtFlag1
  3373  068E  01DA               	clrf	_curtFlag1+1
  3374  068F  01F2               	clrf	_TimerCounter1
  3375  0690  01F3               	clrf	_TimerCounter1+1
  3376                           
  3377                           ;blynd.c: 403: }
  3378                           ;blynd.c: 404: break;
  3379  0691  0008               	return
  3380  0692                     l2680:	
  3381                           ;blynd.c: 406: case 3:
  3382                           
  3383                           
  3384                           ;blynd.c: 407: M3=switch_status;
  3385  0692  0846               	movf	ACTION@switch_status+1,w
  3386  0693  00D0               	movwf	_M3+1
  3387  0694  0845               	movf	ACTION@switch_status,w
  3388  0695  00CF               	movwf	_M3
  3389                           
  3390                           ;blynd.c: 408: if(switch_status==1){
  3391  0696  0345               	decf	ACTION@switch_status,w
  3392  0697  0446               	iorwf	ACTION@switch_status+1,w
  3393  0698  1D03               	btfss	3,2
  3394  0699  2EC8               	goto	l269
  3395                           
  3396                           ;blynd.c: 409: RA2=0;
  3397  069A  110C               	bcf	12,2	;volatile
  3398                           
  3399                           ;blynd.c: 410: st[13]='G'; st[14]='0'; st[15]='0'; st[16]='4'; writeUART(st+13);
  3400  069B  3047               	movlw	71
  3401  069C  00B4               	movwf	??_ACTION
  3402  069D  0834               	movf	??_ACTION,w
  3403  069E  0021               	movlb	1	; select bank1
  3404  069F  00AD               	movwf	(_st^(0+128)+13)
  3405  06A0  3030               	movlw	48
  3406  06A1  0020               	movlb	0	; select bank0
  3407  06A2  00B4               	movwf	??_ACTION
  3408  06A3  0834               	movf	??_ACTION,w
  3409  06A4  0021               	movlb	1	; select bank1
  3410  06A5  00AE               	movwf	(_st^(0+128)+14)
  3411  06A6  3030               	movlw	48
  3412  06A7  0020               	movlb	0	; select bank0
  3413  06A8  00B4               	movwf	??_ACTION
  3414  06A9  0834               	movf	??_ACTION,w
  3415  06AA  0021               	movlb	1	; select bank1
  3416  06AB  00AF               	movwf	(_st^(0+128)+15)
  3417  06AC  3034               	movlw	52
  3418  06AD  0020               	movlb	0	; select bank0
  3419  06AE  00B4               	movwf	??_ACTION
  3420  06AF  0834               	movf	??_ACTION,w
  3421  06B0  0021               	movlb	1	; select bank1
  3422  06B1  00B0               	movwf	(_st^(0+128)+16)
  3423  06B2  30AD               	movlw	(low ((_st| 0+13)))& (0+255)
  3424  06B3  3187  27D9         	fcall	_writeUART
  3425                           
  3426                           ;blynd.c: 411: RA3=1; curtFlag2=1; TimerCounter2=0;
  3427  06B5  0020               	movlb	0	; select bank0
  3428  06B6  158C               	bsf	12,3	;volatile
  3429  06B7  3001               	movlw	1
  3430  06B8  0021               	movlb	1	; select bank1
  3431  06B9  00E8               	movwf	_curtFlag2^(0+128)
  3432  06BA  3000               	movlw	0
  3433  06BB  00E9               	movwf	(_curtFlag2^(0+128)+1)
  3434  06BC  01F0               	clrf	_TimerCounter2
  3435  06BD  01F1               	clrf	_TimerCounter2+1
  3436                           
  3437                           ;blynd.c: 412: TMR3H=0x0B; TMR3L=0xDC; PIR3bits.TMR3IF=0; T3CONbits.TMR3ON = 1;
  3438  06BE  300B               	movlw	11
  3439  06BF  0028               	movlb	8	; select bank8
  3440  06C0  0092               	movwf	18	;volatile
  3441  06C1  30DC               	movlw	220
  3442  06C2  0091               	movwf	17	;volatile
  3443  06C3  0020               	movlb	0	; select bank0
  3444  06C4  1013               	bcf	19,0	;volatile
  3445  06C5  0028               	movlb	8	; select bank8
  3446  06C6  1413               	bsf	19,0	;volatile
  3447                           
  3448                           ;blynd.c: 413: }
  3449  06C7  0008               	return
  3450  06C8                     l269:	
  3451                           
  3452                           ;blynd.c: 414: else{
  3453                           ;blynd.c: 415: RA2=0; RA3=0; T1CONbits.TMR1ON = 0; curtFlag2=0; TimerCounter2=0;
  3454  06C8  110C               	bcf	12,2	;volatile
  3455  06C9  118C               	bcf	12,3	;volatile
  3456  06CA  1018               	bcf	24,0	;volatile
  3457  06CB  0021               	movlb	1	; select bank1
  3458  06CC  01E8               	clrf	_curtFlag2^(0+128)
  3459  06CD  01E9               	clrf	(_curtFlag2+1)^(0+128)
  3460  06CE  01F0               	clrf	_TimerCounter2
  3461  06CF  01F1               	clrf	_TimerCounter2+1
  3462                           
  3463                           ;blynd.c: 416: }
  3464                           ;blynd.c: 417: break;
  3465  06D0  0008               	return
  3466  06D1                     l2706:	
  3467                           ;blynd.c: 418: case 4:
  3468                           
  3469                           
  3470                           ;blynd.c: 419: M4=switch_status;
  3471  06D1  0020               	movlb	0	; select bank0
  3472  06D2  0846               	movf	ACTION@switch_status+1,w
  3473  06D3  00CE               	movwf	_M4+1
  3474  06D4  0845               	movf	ACTION@switch_status,w
  3475  06D5  00CD               	movwf	_M4
  3476                           
  3477                           ;blynd.c: 420: if(switch_status==1){
  3478  06D6  0345               	decf	ACTION@switch_status,w
  3479  06D7  0446               	iorwf	ACTION@switch_status+1,w
  3480  06D8  1D03               	btfss	3,2
  3481  06D9  2F07               	goto	l272
  3482                           
  3483                           ;blynd.c: 421: RA3=0;
  3484  06DA  118C               	bcf	12,3	;volatile
  3485                           
  3486                           ;blynd.c: 422: st[9]='G'; st[10]='0'; st[11]='0'; st[12]='3'; writeUART(st+9);
  3487  06DB  3047               	movlw	71
  3488  06DC  00B4               	movwf	??_ACTION
  3489  06DD  0834               	movf	??_ACTION,w
  3490  06DE  0021               	movlb	1	; select bank1
  3491  06DF  00A9               	movwf	(_st^(0+128)+9)
  3492  06E0  3030               	movlw	48
  3493  06E1  0020               	movlb	0	; select bank0
  3494  06E2  00B4               	movwf	??_ACTION
  3495  06E3  0834               	movf	??_ACTION,w
  3496  06E4  0021               	movlb	1	; select bank1
  3497  06E5  00AA               	movwf	(_st^(0+128)+10)
  3498  06E6  3030               	movlw	48
  3499  06E7  0020               	movlb	0	; select bank0
  3500  06E8  00B4               	movwf	??_ACTION
  3501  06E9  0834               	movf	??_ACTION,w
  3502  06EA  0021               	movlb	1	; select bank1
  3503  06EB  00AB               	movwf	(_st^(0+128)+11)
  3504  06EC  3033               	movlw	51
  3505  06ED  0020               	movlb	0	; select bank0
  3506  06EE  00B4               	movwf	??_ACTION
  3507  06EF  0834               	movf	??_ACTION,w
  3508  06F0  0021               	movlb	1	; select bank1
  3509  06F1  00AC               	movwf	(_st^(0+128)+12)
  3510  06F2  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  3511  06F3  3187  27D9         	fcall	_writeUART
  3512                           
  3513                           ;blynd.c: 423: RA2=1; curtFlag2=1; TimerCounter2=0;
  3514  06F5  0020               	movlb	0	; select bank0
  3515  06F6  150C               	bsf	12,2	;volatile
  3516  06F7  3001               	movlw	1
  3517  06F8  0021               	movlb	1	; select bank1
  3518  06F9  00E8               	movwf	_curtFlag2^(0+128)
  3519  06FA  3000               	movlw	0
  3520  06FB  00E9               	movwf	(_curtFlag2^(0+128)+1)
  3521  06FC  01F0               	clrf	_TimerCounter2
  3522  06FD  01F1               	clrf	_TimerCounter2+1
  3523                           
  3524                           ;blynd.c: 424: TMR1H=0x0B; TMR1L=0xDC; PIR3bits.TMR3IF=0; T3CONbits.TMR3ON = 1;
  3525  06FE  300B               	movlw	11
  3526  06FF  0020               	movlb	0	; select bank0
  3527  0700  0097               	movwf	23	;volatile
  3528  0701  30DC               	movlw	220
  3529  0702  0096               	movwf	22	;volatile
  3530  0703  1013               	bcf	19,0	;volatile
  3531  0704  0028               	movlb	8	; select bank8
  3532  0705  1413               	bsf	19,0	;volatile
  3533                           
  3534                           ;blynd.c: 425: }
  3535  0706  0008               	return
  3536  0707                     l272:	
  3537                           
  3538                           ;blynd.c: 426: else{
  3539                           ;blynd.c: 427: RA2=0; RA3=0; T3CONbits.TMR3ON = 0; curtFlag2=0; TimerCounter2=0;
  3540  0707  110C               	bcf	12,2	;volatile
  3541  0708  118C               	bcf	12,3	;volatile
  3542  0709  0028               	movlb	8	; select bank8
  3543  070A  1013               	bcf	19,0	;volatile
  3544  070B  0021               	movlb	1	; select bank1
  3545  070C  01E8               	clrf	_curtFlag2^(0+128)
  3546  070D  01E9               	clrf	(_curtFlag2+1)^(0+128)
  3547  070E  01F0               	clrf	_TimerCounter2
  3548  070F  01F1               	clrf	_TimerCounter2+1
  3549                           
  3550                           ;blynd.c: 432: }
  3551                           
  3552                           ;blynd.c: 431: break;
  3553                           
  3554                           ;blynd.c: 430: default:
  3555                           
  3556                           ;blynd.c: 428: }
  3557                           ;blynd.c: 429: break;
  3558  0710  0008               	return
  3559  0711                     l2734:	
  3560                           
  3561                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3562                           ; Switch size 1, requested type "space"
  3563                           ; Number of cases is 1, Range of values is 0 to 0
  3564                           ; switch strategies available:
  3565                           ; Name         Instructions Cycles
  3566                           ; simple_byte            4     3 (average)
  3567                           ; direct_byte            8     6 (fixed)
  3568                           ; jumptable            260     6 (fixed)
  3569                           ;	Chosen strategy is simple_byte
  3570  0711  0020               	movlb	0	; select bank0
  3571  0712  0842               	movf	ACTION@SwNum+1,w
  3572  0713  3A00               	xorlw	0	; case 0
  3573  0714  1903               	skipnz
  3574  0715  2F17               	goto	l3132
  3575  0716  2F25               	goto	l275
  3576  0717                     l3132:	
  3577                           
  3578                           ; Switch size 1, requested type "space"
  3579                           ; Number of cases is 4, Range of values is 1 to 4
  3580                           ; switch strategies available:
  3581                           ; Name         Instructions Cycles
  3582                           ; simple_byte           13     7 (average)
  3583                           ; direct_byte           17     9 (fixed)
  3584                           ; jumptable            263     9 (fixed)
  3585                           ;	Chosen strategy is simple_byte
  3586  0717  0841               	movf	ACTION@SwNum,w
  3587  0718  3A01               	xorlw	1	; case 1
  3588  0719  1903               	skipnz
  3589  071A  2E14               	goto	l2628
  3590  071B  3A03               	xorlw	3	; case 2
  3591  071C  1903               	skipnz
  3592  071D  2E53               	goto	l2654
  3593  071E  3A01               	xorlw	1	; case 3
  3594  071F  1903               	skipnz
  3595  0720  2E92               	goto	l2680
  3596  0721  3A07               	xorlw	7	; case 4
  3597  0722  1903               	skipnz
  3598  0723  2ED1               	goto	l2706
  3599  0724  2F25               	goto	l275
  3600  0725                     l275:	
  3601  0725  0008               	return
  3602  0726                     __end_of_ACTION:	
  3603                           
  3604                           	psect	text8
  3605  07D9                     __ptext8:	
  3606 ;; *************** function _writeUART *****************
  3607 ;; Defined at:
  3608 ;;		line 435 in file "blynd.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  str2Write       1    wreg     PTR unsigned char 
  3611 ;;		 -> st(50), 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  str2Write       1    3[BANK0 ] PTR unsigned char 
  3614 ;;		 -> st(50), 
  3615 ;;  Tx_count        2    1[BANK0 ] int 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3626 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  3628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  3629 ;;Total ram usage:        4 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    2
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_main
  3636 ;;		_ACTION
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _writeUART
  3642  07D9                     _writeUART:	
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  3646                           ;writeUART@str2Write stored from wreg
  3647  07D9  0020               	movlb	0	; select bank0
  3648  07DA  00A3               	movwf	writeUART@str2Write
  3649                           
  3650                           ;blynd.c: 436: int Tx_count=0;
  3651  07DB  01A1               	clrf	writeUART@Tx_count
  3652  07DC  01A2               	clrf	writeUART@Tx_count+1
  3653  07DD                     l2430:	
  3654                           ;blynd.c: 438: while(Tx_count!=4)
  3655                           
  3656  07DD  3004               	movlw	4
  3657  07DE  0621               	xorwf	writeUART@Tx_count,w
  3658  07DF  0422               	iorwf	writeUART@Tx_count+1,w
  3659  07E0  1903               	btfsc	3,2
  3660  07E1  0008               	return
  3661  07E2                     l280:	
  3662                           ;blynd.c: 439: {
  3663                           ;blynd.c: 441: while (!TX1STAbits.TRMT);
  3664                           
  3665  07E2  0023               	movlb	3	; select bank3
  3666  07E3  1C9E               	btfss	30,1	;volatile
  3667  07E4  2FE2               	goto	l280
  3668                           
  3669                           ;blynd.c: 442: TX1REG = *str2Write;
  3670  07E5  0020               	movlb	0	; select bank0
  3671  07E6  0823               	movf	writeUART@str2Write,w
  3672  07E7  0086               	movwf	6
  3673  07E8  0187               	clrf	7
  3674  07E9  0801               	movf	1,w
  3675  07EA  0023               	movlb	3	; select bank3
  3676  07EB  009A               	movwf	26	;volatile
  3677                           
  3678                           ;blynd.c: 443: *str2Write++;
  3679  07EC  3001               	movlw	1
  3680  07ED  0020               	movlb	0	; select bank0
  3681  07EE  00A0               	movwf	??_writeUART
  3682  07EF  0820               	movf	??_writeUART,w
  3683  07F0  07A3               	addwf	writeUART@str2Write,f
  3684                           
  3685                           ;blynd.c: 444: Tx_count++;
  3686  07F1  3001               	movlw	1
  3687  07F2  07A1               	addwf	writeUART@Tx_count,f
  3688  07F3  3000               	movlw	0
  3689  07F4  3DA2               	addwfc	writeUART@Tx_count+1,f
  3690  07F5  2FDD               	goto	l2430
  3691  07F6                     __end_of_writeUART:	
  3692                           
  3693                           	psect	text9
  3694  0726                     __ptext9:	
  3695 ;; *************** function _atoi *****************
  3696 ;; Defined at:
  3697 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\atoi.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  s               1    wreg     PTR const unsigned char 
  3700 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3703 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3704 ;;  a               2   11[BANK0 ] int 
  3705 ;;  sign            1   10[BANK0 ] unsigned char 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  2    6[BANK0 ] int 
  3708 ;; Registers used:
  3709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3716 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
  3717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3718 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  3719 ;;Total ram usage:        8 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    3
  3722 ;; This function calls:
  3723 ;;		___wmul
  3724 ;;		_isdigit
  3725 ;; This function is called by:
  3726 ;;		_ACTION
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _atoi
  3732  0726                     _atoi:	
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3736                           ;atoi@s stored from wreg
  3737  0726  0020               	movlb	0	; select bank0
  3738  0727  00AD               	movwf	atoi@s
  3739  0728                     l2482:	
  3740  0728  082D               	movf	atoi@s,w
  3741  0729  0086               	movwf	6
  3742  072A  0187               	clrf	7
  3743  072B  3020               	movlw	32
  3744  072C  0601               	xorwf	1,w
  3745  072D  1D03               	btfss	3,2
  3746  072E  2F34               	goto	l2484
  3747  072F                     l2480:	
  3748  072F  3001               	movlw	1
  3749  0730  00A8               	movwf	??_atoi
  3750  0731  0828               	movf	??_atoi,w
  3751  0732  07AD               	addwf	atoi@s,f
  3752  0733  2F28               	goto	l2482
  3753  0734                     l2484:	
  3754  0734  082D               	movf	atoi@s,w
  3755  0735  0086               	movwf	6
  3756  0736  0187               	clrf	7
  3757  0737  3009               	movlw	9
  3758  0738  0601               	xorwf	1,w
  3759  0739  1903               	btfsc	3,2
  3760  073A  2F2F               	goto	l2480
  3761  073B  01AB               	clrf	atoi@a
  3762  073C  01AC               	clrf	atoi@a+1
  3763  073D  01AA               	clrf	atoi@sign
  3764  073E  082D               	movf	atoi@s,w
  3765  073F  0086               	movwf	6
  3766  0740  0187               	clrf	7
  3767  0741  302D               	movlw	45
  3768  0742  0601               	xorwf	1,w
  3769  0743  1D03               	btfss	3,2
  3770  0744  2F4A               	goto	l2492
  3771  0745  3001               	movlw	1
  3772  0746  00A8               	movwf	??_atoi
  3773  0747  0828               	movf	??_atoi,w
  3774  0748  07AA               	addwf	atoi@sign,f
  3775  0749  2F51               	goto	l2498
  3776  074A                     l2492:	
  3777  074A  082D               	movf	atoi@s,w
  3778  074B  0086               	movwf	6
  3779  074C  0187               	clrf	7
  3780  074D  302B               	movlw	43
  3781  074E  0601               	xorwf	1,w
  3782  074F  1D03               	btfss	3,2
  3783  0750  2F55               	goto	l2500
  3784  0751                     l2498:	
  3785  0751  3001               	movlw	1
  3786  0752  00A8               	movwf	??_atoi
  3787  0753  0828               	movf	??_atoi,w
  3788  0754  07AD               	addwf	atoi@s,f
  3789  0755                     l2500:	
  3790  0755  082D               	movf	atoi@s,w
  3791  0756  0086               	movwf	6
  3792  0757  0187               	clrf	7
  3793  0758  0801               	movf	1,w
  3794  0759  318E  26B7  3187   	fcall	_isdigit
  3795  075C  1C03               	btfss	3,0
  3796  075D  2F7C               	goto	l2502
  3797  075E  0020               	movlb	0	; select bank0
  3798  075F  082C               	movf	atoi@a+1,w
  3799  0760  00A1               	movwf	___wmul@multiplier+1
  3800  0761  082B               	movf	atoi@a,w
  3801  0762  00A0               	movwf	___wmul@multiplier
  3802  0763  300A               	movlw	10
  3803  0764  00A2               	movwf	___wmul@multiplicand
  3804  0765  3000               	movlw	0
  3805  0766  00A3               	movwf	___wmul@multiplicand+1
  3806  0767  318F  2704  3187   	fcall	___wmul
  3807  076A  0020               	movlb	0	; select bank0
  3808  076B  082D               	movf	atoi@s,w
  3809  076C  0086               	movwf	6
  3810  076D  0187               	clrf	7
  3811  076E  0801               	movf	1,w
  3812  076F  0720               	addwf	?___wmul,w
  3813  0770  00A8               	movwf	??_atoi
  3814  0771  0821               	movf	?___wmul+1,w
  3815  0772  1803               	skipnc
  3816  0773  0A21               	incf	?___wmul+1,w
  3817  0774  00A9               	movwf	??_atoi+1
  3818  0775  0828               	movf	??_atoi,w
  3819  0776  3ED0               	addlw	208
  3820  0777  00AB               	movwf	atoi@a
  3821  0778  30FF               	movlw	255
  3822  0779  3D29               	addwfc	??_atoi+1,w
  3823  077A  00AC               	movwf	atoi@a+1
  3824  077B  2F51               	goto	l2498
  3825  077C                     l2502:	
  3826  077C  0020               	movlb	0	; select bank0
  3827  077D  082A               	movf	atoi@sign,w
  3828  077E  1903               	btfsc	3,2
  3829  077F  2F8C               	goto	l2508
  3830  0780  092B               	comf	atoi@a,w
  3831  0781  00A8               	movwf	??_atoi
  3832  0782  092C               	comf	atoi@a+1,w
  3833  0783  00A9               	movwf	??_atoi+1
  3834  0784  0AA8               	incf	??_atoi,f
  3835  0785  1903               	skipnz
  3836  0786  0AA9               	incf	??_atoi+1,f
  3837  0787  0828               	movf	??_atoi,w
  3838  0788  00A6               	movwf	?_atoi
  3839  0789  0829               	movf	??_atoi+1,w
  3840  078A  00A7               	movwf	?_atoi+1
  3841  078B  0008               	return
  3842  078C                     l2508:	
  3843  078C  082C               	movf	atoi@a+1,w
  3844  078D  00A7               	movwf	?_atoi+1
  3845  078E  082B               	movf	atoi@a,w
  3846  078F  00A6               	movwf	?_atoi
  3847  0790  0008               	return
  3848  0791                     __end_of_atoi:	
  3849                           
  3850                           	psect	text10
  3851  0EB7                     __ptext10:	
  3852 ;; *************** function _isdigit *****************
  3853 ;; Defined at:
  3854 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  c               1    wreg     unsigned char 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  c               1    1[BANK0 ] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:        2 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_atoi
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _isdigit
  3884  0EB7                     _isdigit:	
  3885                           
  3886                           ;incstack = 0
  3887                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3888                           ;isdigit@c stored from wreg
  3889  0EB7  0020               	movlb	0	; select bank0
  3890  0EB8  00A1               	movwf	isdigit@c
  3891  0EB9  01A0               	clrf	_isdigit$740
  3892  0EBA  303A               	movlw	58
  3893  0EBB  0221               	subwf	isdigit@c,w
  3894  0EBC  1803               	skipnc
  3895  0EBD  2EC4               	goto	l2418
  3896  0EBE  3030               	movlw	48
  3897  0EBF  0221               	subwf	isdigit@c,w
  3898  0EC0  1C03               	skipc
  3899  0EC1  2EC4               	goto	l2418
  3900  0EC2  01A0               	clrf	_isdigit$740
  3901  0EC3  0AA0               	incf	_isdigit$740,f
  3902  0EC4                     l2418:	
  3903  0EC4  0C20               	rrf	_isdigit$740,w
  3904  0EC5  0008               	return
  3905  0EC6                     __end_of_isdigit:	
  3906                           
  3907                           	psect	text11
  3908  0F04                     __ptext11:	
  3909 ;; *************** function ___wmul *****************
  3910 ;; Defined at:
  3911 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3914 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  product         2    4[BANK0 ] unsigned int 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  2    0[BANK0 ] unsigned int 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3926 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  3927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3930 ;;Total ram usage:        6 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_atoi
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function ___wmul
  3942  0F04                     ___wmul:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3946  0F04  0020               	movlb	0	; select bank0
  3947  0F05  01A4               	clrf	___wmul@product
  3948  0F06  01A5               	clrf	___wmul@product+1
  3949  0F07                     l2398:	
  3950  0F07  1C20               	btfss	___wmul@multiplier,0
  3951  0F08  2F0D               	goto	l300
  3952  0F09  0822               	movf	___wmul@multiplicand,w
  3953  0F0A  07A4               	addwf	___wmul@product,f
  3954  0F0B  0823               	movf	___wmul@multiplicand+1,w
  3955  0F0C  3DA5               	addwfc	___wmul@product+1,f
  3956  0F0D                     l300:	
  3957  0F0D  3001               	movlw	1
  3958  0F0E                     u1925:	
  3959  0F0E  35A2               	lslf	___wmul@multiplicand,f
  3960  0F0F  0DA3               	rlf	___wmul@multiplicand+1,f
  3961  0F10  0B89               	decfsz	9,f
  3962  0F11  2F0E               	goto	u1925
  3963  0F12  3001               	movlw	1
  3964  0F13                     u1935:	
  3965  0F13  36A1               	lsrf	___wmul@multiplier+1,f
  3966  0F14  0CA0               	rrf	___wmul@multiplier,f
  3967  0F15  0B89               	decfsz	9,f
  3968  0F16  2F13               	goto	u1935
  3969  0F17  0820               	movf	___wmul@multiplier,w
  3970  0F18  0421               	iorwf	___wmul@multiplier+1,w
  3971  0F19  1D03               	btfss	3,2
  3972  0F1A  2F07               	goto	l2398
  3973  0F1B  0825               	movf	___wmul@product+1,w
  3974  0F1C  00A1               	movwf	?___wmul+1
  3975  0F1D  0824               	movf	___wmul@product,w
  3976  0F1E  00A0               	movwf	?___wmul
  3977  0F1F  0008               	return
  3978  0F20                     __end_of___wmul:	
  3979                           
  3980                           	psect	intentry
  3981  0004                     __pintentry:	
  3982 ;; *************** function _isr *****************
  3983 ;; Defined at:
  3984 ;;		line 70 in file "blynd.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
  4001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
  4002 ;;Total ram usage:        2 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    1
  4005 ;; This function calls:
  4006 ;;		i1_writeUART
  4007 ;; This function is called by:
  4008 ;;		Interrupt level 1
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012  0004                     _isr:	
  4013                           
  4014                           ;incstack = 0
  4015  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4016                           
  4017                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4018  0005  3180               	pagesel	$
  4019  0006  0020               	movlb	0	; select bank0
  4020  0007  087F               	movf	127,w
  4021  0008  00FB               	movwf	??_isr+1
  4022                           
  4023                           ;blynd.c: 71: if(PIE3bits.TMR3IE==1 && PIR3bits.TMR3IF==1)
  4024  0009  0021               	movlb	1	; select bank1
  4025  000A  1C13               	btfss	19,0	;volatile
  4026  000B  285C               	goto	i1l1936
  4027  000C  0020               	movlb	0	; select bank0
  4028  000D  1C13               	btfss	19,0	;volatile
  4029  000E  285C               	goto	i1l1936
  4030                           
  4031                           ;blynd.c: 72: {
  4032                           ;blynd.c: 73: PIR3bits.TMR3IF=0;
  4033  000F  1013               	bcf	19,0	;volatile
  4034                           
  4035                           ;blynd.c: 74: if(TimerCounter2>=224){
  4036  0010  0871               	movf	_TimerCounter2+1,w
  4037  0011  3A80               	xorlw	128
  4038  0012  00FA               	movwf	??_isr
  4039  0013  3080               	movlw	128
  4040  0014  027A               	subwf	??_isr,w
  4041  0015  1D03               	skipz
  4042  0016  2819               	goto	u121_25
  4043  0017  30E0               	movlw	224
  4044  0018  0270               	subwf	_TimerCounter2,w
  4045  0019                     u121_25:	
  4046  0019  1C03               	skipc
  4047  001A  284B               	goto	i1l1926
  4048                           
  4049                           ;blynd.c: 75: RA3=0; RA2=0;
  4050  001B  0020               	movlb	0	; select bank0
  4051  001C  118C               	bcf	12,3	;volatile
  4052  001D  110C               	bcf	12,2	;volatile
  4053                           
  4054                           ;blynd.c: 76: st[9]='G'; st[10]='0'; st[11]='0'; st[12]='3'; writeUART(st+9);
  4055  001E  3047               	movlw	71
  4056  001F  00FA               	movwf	??_isr
  4057  0020  087A               	movf	??_isr,w
  4058  0021  0021               	movlb	1	; select bank1
  4059  0022  00A9               	movwf	(_st^(0+128)+9)
  4060  0023  3030               	movlw	48
  4061  0024  00FA               	movwf	??_isr
  4062  0025  087A               	movf	??_isr,w
  4063  0026  00AA               	movwf	(_st^(0+128)+10)
  4064  0027  3030               	movlw	48
  4065  0028  00FA               	movwf	??_isr
  4066  0029  087A               	movf	??_isr,w
  4067  002A  00AB               	movwf	(_st^(0+128)+11)
  4068  002B  3033               	movlw	51
  4069  002C  00FA               	movwf	??_isr
  4070  002D  087A               	movf	??_isr,w
  4071  002E  00AC               	movwf	(_st^(0+128)+12)
  4072  002F  30A9               	movlw	(low ((_st| 0+9)))& (0+255)
  4073  0030  318E  26EB  3180   	fcall	i1_writeUART
  4074                           
  4075                           ;blynd.c: 77: T3CONbits.TMR3ON=0;
  4076  0033  0028               	movlb	8	; select bank8
  4077  0034  1013               	bcf	19,0	;volatile
  4078                           
  4079                           ;blynd.c: 78: st[13]='G'; st[14]='0'; st[15]='0'; st[16]='4'; writeUART(st+13);
  4080  0035  3047               	movlw	71
  4081  0036  00FA               	movwf	??_isr
  4082  0037  087A               	movf	??_isr,w
  4083  0038  0021               	movlb	1	; select bank1
  4084  0039  00AD               	movwf	(_st^(0+128)+13)
  4085  003A  3030               	movlw	48
  4086  003B  00FA               	movwf	??_isr
  4087  003C  087A               	movf	??_isr,w
  4088  003D  00AE               	movwf	(_st^(0+128)+14)
  4089  003E  3030               	movlw	48
  4090  003F  00FA               	movwf	??_isr
  4091  0040  087A               	movf	??_isr,w
  4092  0041  00AF               	movwf	(_st^(0+128)+15)
  4093  0042  3034               	movlw	52
  4094  0043  00FA               	movwf	??_isr
  4095  0044  087A               	movf	??_isr,w
  4096  0045  00B0               	movwf	(_st^(0+128)+16)
  4097  0046  30AD               	movlw	(low ((_st| 0+13)))& (0+255)
  4098  0047  318E  26EB  3180   	fcall	i1_writeUART
  4099                           
  4100                           ;blynd.c: 79: }
  4101  004A  285C               	goto	i1l1936
  4102  004B                     i1l1926:	
  4103                           
  4104                           ;blynd.c: 80: else if(curtFlag2){
  4105  004B  0021               	movlb	1	; select bank1
  4106  004C  0868               	movf	_curtFlag2^(0+128),w
  4107  004D  0469               	iorwf	(_curtFlag2+1)^(0+128),w
  4108  004E  1903               	btfsc	3,2
  4109  004F  285C               	goto	i1l1936
  4110                           
  4111                           ;blynd.c: 81: TimerCounter2=TimerCounter2+1;
  4112  0050  0870               	movf	_TimerCounter2,w
  4113  0051  3E01               	addlw	1
  4114  0052  00F0               	movwf	_TimerCounter2
  4115  0053  3000               	movlw	0
  4116  0054  3D71               	addwfc	_TimerCounter2+1,w
  4117  0055  00F1               	movwf	_TimerCounter2+1
  4118                           
  4119                           ;blynd.c: 82: TMR3H=0x0B; TMR3L=0xDC; T3CONbits.TMR3ON = 1;
  4120  0056  300B               	movlw	11
  4121  0057  0028               	movlb	8	; select bank8
  4122  0058  0092               	movwf	18	;volatile
  4123  0059  30DC               	movlw	220
  4124  005A  0091               	movwf	17	;volatile
  4125  005B  1413               	bsf	19,0	;volatile
  4126  005C                     i1l1936:	
  4127                           
  4128                           ;blynd.c: 84: }
  4129                           ;blynd.c: 85: }
  4130                           ;blynd.c: 88: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
  4131  005C  0021               	movlb	1	; select bank1
  4132  005D  1C11               	btfss	17,0	;volatile
  4133  005E  28AE               	goto	i1l1972
  4134  005F  0020               	movlb	0	; select bank0
  4135  0060  1C11               	btfss	17,0	;volatile
  4136  0061  28AE               	goto	i1l1972
  4137                           
  4138                           ;blynd.c: 89: {
  4139                           ;blynd.c: 90: PIR1bits.TMR1IF=0;
  4140  0062  1011               	bcf	17,0	;volatile
  4141                           
  4142                           ;blynd.c: 91: if(TimerCounter1>=125){
  4143  0063  0873               	movf	_TimerCounter1+1,w
  4144  0064  3A80               	xorlw	128
  4145  0065  00FA               	movwf	??_isr
  4146  0066  3080               	movlw	128
  4147  0067  027A               	subwf	??_isr,w
  4148  0068  1D03               	skipz
  4149  0069  286C               	goto	u125_25
  4150  006A  307D               	movlw	125
  4151  006B  0272               	subwf	_TimerCounter1,w
  4152  006C                     u125_25:	
  4153  006C  1C03               	skipc
  4154  006D  289E               	goto	i1l1962
  4155                           
  4156                           ;blynd.c: 92: RF1=0; RF0=0;
  4157  006E  0025               	movlb	5	; select bank5
  4158  006F  108C               	bcf	12,1	;volatile
  4159  0070  100C               	bcf	12,0	;volatile
  4160                           
  4161                           ;blynd.c: 93: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  4162  0071  3047               	movlw	71
  4163  0072  00FA               	movwf	??_isr
  4164  0073  087A               	movf	??_isr,w
  4165  0074  0021               	movlb	1	; select bank1
  4166  0075  00A1               	movwf	(_st^(0+128)+1)
  4167  0076  3030               	movlw	48
  4168  0077  00FA               	movwf	??_isr
  4169  0078  087A               	movf	??_isr,w
  4170  0079  00A2               	movwf	(_st^(0+128)+2)
  4171  007A  3030               	movlw	48
  4172  007B  00FA               	movwf	??_isr
  4173  007C  087A               	movf	??_isr,w
  4174  007D  00A3               	movwf	(_st^(0+128)+3)
  4175  007E  3031               	movlw	49
  4176  007F  00FA               	movwf	??_isr
  4177  0080  087A               	movf	??_isr,w
  4178  0081  00A4               	movwf	(_st^(0+128)+4)
  4179  0082  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  4180  0083  318E  26EB  3180   	fcall	i1_writeUART
  4181                           
  4182                           ;blynd.c: 94: T1CONbits.TMR1ON = 0;
  4183  0086  0020               	movlb	0	; select bank0
  4184  0087  1018               	bcf	24,0	;volatile
  4185                           
  4186                           ;blynd.c: 95: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  4187  0088  3047               	movlw	71
  4188  0089  00FA               	movwf	??_isr
  4189  008A  087A               	movf	??_isr,w
  4190  008B  0021               	movlb	1	; select bank1
  4191  008C  00A5               	movwf	(_st^(0+128)+5)
  4192  008D  3030               	movlw	48
  4193  008E  00FA               	movwf	??_isr
  4194  008F  087A               	movf	??_isr,w
  4195  0090  00A6               	movwf	(_st^(0+128)+6)
  4196  0091  3030               	movlw	48
  4197  0092  00FA               	movwf	??_isr
  4198  0093  087A               	movf	??_isr,w
  4199  0094  00A7               	movwf	(_st^(0+128)+7)
  4200  0095  3032               	movlw	50
  4201  0096  00FA               	movwf	??_isr
  4202  0097  087A               	movf	??_isr,w
  4203  0098  00A8               	movwf	(_st^(0+128)+8)
  4204  0099  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  4205  009A  318E  26EB  3180   	fcall	i1_writeUART
  4206                           
  4207                           ;blynd.c: 96: }
  4208  009D  28AE               	goto	i1l1972
  4209  009E                     i1l1962:	
  4210                           
  4211                           ;blynd.c: 97: else if(curtFlag1){
  4212  009E  0020               	movlb	0	; select bank0
  4213  009F  0859               	movf	_curtFlag1,w
  4214  00A0  045A               	iorwf	_curtFlag1+1,w
  4215  00A1  1903               	btfsc	3,2
  4216  00A2  28AE               	goto	i1l1972
  4217                           
  4218                           ;blynd.c: 98: TimerCounter1=TimerCounter1+1;
  4219  00A3  0872               	movf	_TimerCounter1,w
  4220  00A4  3E01               	addlw	1
  4221  00A5  00F2               	movwf	_TimerCounter1
  4222  00A6  3000               	movlw	0
  4223  00A7  3D73               	addwfc	_TimerCounter1+1,w
  4224  00A8  00F3               	movwf	_TimerCounter1+1
  4225                           
  4226                           ;blynd.c: 99: TMR1H=0x0B; TMR1L=0xDC; T1CONbits.TMR1ON = 1;
  4227  00A9  300B               	movlw	11
  4228  00AA  0097               	movwf	23	;volatile
  4229  00AB  30DC               	movlw	220
  4230  00AC  0096               	movwf	22	;volatile
  4231  00AD  1418               	bsf	24,0	;volatile
  4232  00AE                     i1l1972:	
  4233                           
  4234                           ;blynd.c: 101: }
  4235                           ;blynd.c: 102: }
  4236                           ;blynd.c: 105: if(RC1IF==1){
  4237  00AE  0020               	movlb	0	; select bank0
  4238  00AF  1E91               	btfss	17,5	;volatile
  4239  00B0  28FE               	goto	i1l205
  4240                           
  4241                           ;blynd.c: 106: if(RC1STAbits.OERR)
  4242  00B1  0023               	movlb	3	; select bank3
  4243  00B2  1C9D               	btfss	29,1	;volatile
  4244  00B3  28BF               	goto	i1l1980
  4245                           
  4246                           ;blynd.c: 107: {
  4247                           ;blynd.c: 108: RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  4248  00B4  121D               	bcf	29,4	;volatile
  4249  00B5  161D               	bsf	29,4	;volatile
  4250  00B6                     i1l187:	
  4251                           ;blynd.c: 109: while(PIR1bits.TXIF==0); TX1REG='F'; while(PIR1bits.TXIF==0);
  4252                           
  4253  00B6  0020               	movlb	0	; select bank0
  4254  00B7  1E11               	btfss	17,4	;volatile
  4255  00B8  28B6               	goto	i1l187
  4256  00B9  3046               	movlw	70
  4257  00BA  0023               	movlb	3	; select bank3
  4258  00BB  009A               	movwf	26	;volatile
  4259  00BC                     i1l190:	
  4260  00BC  0020               	movlb	0	; select bank0
  4261  00BD  1E11               	btfss	17,4	;volatile
  4262  00BE  28BC               	goto	i1l190
  4263  00BF                     i1l1980:	
  4264                           
  4265                           ;blynd.c: 110: }
  4266                           ;blynd.c: 111: name[i]=RC1REG;
  4267  00BF  0023               	movlb	3	; select bank3
  4268  00C0  0819               	movf	25,w	;volatile
  4269  00C1  00FA               	movwf	??_isr
  4270  00C2  0874               	movf	_i,w
  4271  00C3  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  4272  00C4  0086               	movwf	6
  4273  00C5  3001               	movlw	1	; select bank2/3
  4274  00C6  0087               	movwf	7
  4275  00C7  087A               	movf	??_isr,w
  4276  00C8  0081               	movwf	1
  4277                           
  4278                           ;blynd.c: 113: if(name[0]=='%')
  4279  00C9  3025               	movlw	37
  4280  00CA  0022               	movlb	2	; select bank2
  4281  00CB  0644               	xorwf	_name^(0+256),w
  4282  00CC  1D03               	btfss	3,2
  4283  00CD  28E7               	goto	i1l1992
  4284                           
  4285                           ;blynd.c: 114: {
  4286                           ;blynd.c: 115: i++;
  4287  00CE  3001               	movlw	1
  4288  00CF  07F4               	addwf	_i,f
  4289  00D0  3000               	movlw	0
  4290  00D1  3DF5               	addwfc	_i+1,f
  4291                           
  4292                           ;blynd.c: 116: if(i>15)
  4293  00D2  0875               	movf	_i+1,w
  4294  00D3  3A80               	xorlw	128
  4295  00D4  00FA               	movwf	??_isr
  4296  00D5  3080               	movlw	128
  4297  00D6  027A               	subwf	??_isr,w
  4298  00D7  1D03               	skipz
  4299  00D8  28DB               	goto	u132_25
  4300  00D9  3010               	movlw	16
  4301  00DA  0274               	subwf	_i,w
  4302  00DB                     u132_25:	
  4303  00DB  1C03               	skipc
  4304  00DC  28FE               	goto	i1l205
  4305                           
  4306                           ;blynd.c: 117: {
  4307                           ;blynd.c: 118: i=0; TX_FLAG = 1; RC1IF=0;
  4308  00DD  01F4               	clrf	_i
  4309  00DE  01F5               	clrf	_i+1
  4310  00DF  3001               	movlw	1
  4311  00E0  0021               	movlb	1	; select bank1
  4312  00E1  00DA               	movwf	_TX_FLAG^(0+128)
  4313  00E2  3000               	movlw	0
  4314  00E3  00DB               	movwf	(_TX_FLAG^(0+128)+1)
  4315  00E4  0020               	movlb	0	; select bank0
  4316  00E5  1291               	bcf	17,5	;volatile
  4317                           
  4318                           ;blynd.c: 119: }
  4319                           ;blynd.c: 120: }
  4320  00E6  28FE               	goto	i1l205
  4321  00E7                     i1l1992:	
  4322                           
  4323                           ;blynd.c: 121: else
  4324                           ;blynd.c: 122: {
  4325                           ;blynd.c: 123: i=0; RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  4326  00E7  01F4               	clrf	_i
  4327  00E8  01F5               	clrf	_i+1
  4328  00E9  0023               	movlb	3	; select bank3
  4329  00EA  121D               	bcf	29,4	;volatile
  4330  00EB  161D               	bsf	29,4	;volatile
  4331  00EC                     i1l196:	
  4332                           ;blynd.c: 124: while(PIR1bits.TX1IF==0); TX1REG='F';
  4333                           
  4334  00EC  0020               	movlb	0	; select bank0
  4335  00ED  1E11               	btfss	17,4	;volatile
  4336  00EE  28EC               	goto	i1l196
  4337  00EF  3046               	movlw	70
  4338  00F0  0023               	movlb	3	; select bank3
  4339  00F1  009A               	movwf	26	;volatile
  4340  00F2                     i1l199:	
  4341                           ;blynd.c: 125: while(PIR1bits.TX1IF==0); TX1REG='R';
  4342                           
  4343  00F2  0020               	movlb	0	; select bank0
  4344  00F3  1E11               	btfss	17,4	;volatile
  4345  00F4  28F2               	goto	i1l199
  4346  00F5  3052               	movlw	82
  4347  00F6  0023               	movlb	3	; select bank3
  4348  00F7  009A               	movwf	26	;volatile
  4349  00F8                     i1l202:	
  4350                           ;blynd.c: 126: while(PIR1bits.TX1IF==0); TX1REG='R';
  4351                           
  4352  00F8  0020               	movlb	0	; select bank0
  4353  00F9  1E11               	btfss	17,4	;volatile
  4354  00FA  28F8               	goto	i1l202
  4355  00FB  3052               	movlw	82
  4356  00FC  0023               	movlb	3	; select bank3
  4357  00FD  009A               	movwf	26	;volatile
  4358  00FE                     i1l205:	
  4359  00FE  087B               	movf	??_isr+1,w
  4360  00FF  0020               	movlb	0	; select bank0
  4361  0100  00FF               	movwf	127
  4362  0101  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4363  0102  0009               	retfie
  4364  0103                     __end_of_isr:	
  4365                           
  4366                           	psect	text13
  4367  0EEB                     __ptext13:	
  4368 ;; *************** function i1_writeUART *****************
  4369 ;; Defined at:
  4370 ;;		line 435 in file "blynd.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  str2Write       1    wreg     PTR unsigned char 
  4373 ;;		 -> st(50), 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  str2Write       1    1[COMMON] PTR unsigned char 
  4376 ;;		 -> st(50), 
  4377 ;;  writeUART       2    2[COMMON] int 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4388 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0
  4389 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0
  4390 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
  4391 ;;Total ram usage:        4 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; This function calls:
  4394 ;;		Nothing
  4395 ;; This function is called by:
  4396 ;;		_isr
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function i1_writeUART
  4402  0EEB                     i1_writeUART:	
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in i1_writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  4406                           ;i1writeUART@str2Write stored from wreg
  4407  0EEB  00F7               	movwf	i1writeUART@str2Write
  4408                           
  4409                           ;blynd.c: 436: int Tx_count=0;
  4410  0EEC  01F8               	clrf	i1writeUART@Tx_count
  4411  0EED  01F9               	clrf	i1writeUART@Tx_count+1
  4412  0EEE                     i1l1898:	
  4413                           ;blynd.c: 438: while(Tx_count!=4)
  4414                           
  4415  0EEE  3004               	movlw	4
  4416  0EEF  0678               	xorwf	i1writeUART@Tx_count,w
  4417  0EF0  0479               	iorwf	i1writeUART@Tx_count+1,w
  4418  0EF1  1903               	btfsc	3,2
  4419  0EF2  0008               	return
  4420  0EF3                     i1l280:	
  4421                           ;blynd.c: 439: {
  4422                           ;blynd.c: 441: while (!TX1STAbits.TRMT);
  4423                           
  4424  0EF3  0023               	movlb	3	; select bank3
  4425  0EF4  1C9E               	btfss	30,1	;volatile
  4426  0EF5  2EF3               	goto	i1l280
  4427                           
  4428                           ;blynd.c: 442: TX1REG = *str2Write;
  4429  0EF6  0877               	movf	i1writeUART@str2Write,w
  4430  0EF7  0086               	movwf	6
  4431  0EF8  0187               	clrf	7
  4432  0EF9  0801               	movf	1,w
  4433  0EFA  009A               	movwf	26	;volatile
  4434                           
  4435                           ;blynd.c: 443: *str2Write++;
  4436  0EFB  3001               	movlw	1
  4437  0EFC  00F6               	movwf	??i1_writeUART
  4438  0EFD  0876               	movf	??i1_writeUART,w
  4439  0EFE  07F7               	addwf	i1writeUART@str2Write,f
  4440                           
  4441                           ;blynd.c: 444: Tx_count++;
  4442  0EFF  3001               	movlw	1
  4443  0F00  07F8               	addwf	i1writeUART@Tx_count,f
  4444  0F01  3000               	movlw	0
  4445  0F02  3DF9               	addwfc	i1writeUART@Tx_count+1,f
  4446  0F03  2EEE               	goto	i1l1898
  4447  0F04                     __end_ofi1_writeUART:	
  4448  007E                     btemp	set	126	;btemp
  4449  007E                     int$flags	set	126
  4450  007E                     wtemp0	set	126


Data Sizes:
    Strings     33
    Constant    0
    Data        188
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     45      61
    BANK1            80      0      74
    BANK2            80      0      72
    BANK3            80      0      64
    BANK4            80     20      20
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 2
		 -> ACTION@FanSpeedString(BANK0[2]), ACTION@SwNumString(BANK0[2]), 

    writeUART@str2Write	PTR unsigned char  size(1) Largest target is 50
		 -> st(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_writeUART

Critical Paths under _main in BANK0

    _main->_ACTION
    _ACTION->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    4684
                                             39 BANK0      6     6      0
                                              0 BANK4     20    20      0
                             _ACTION
                         _copy_frame
                     _periperal_init
                        _pin_manager
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _pin_manager                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _periperal_init                                       0     0      0       0
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copy_frame                                           5     1      4     322
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _ACTION                                              25    19      6    3359
                                             14 BANK0     25    19      6
                               _atoi
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _writeUART                                            4     4      0     701
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     759
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      47
                                              4 COMMON     2     2      0
                        i1_writeUART
 ---------------------------------------------------------------------------------
 (5) i1_writeUART                                          4     4      0      47
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACTION
     _atoi
       ___wmul
       _isdigit
     _writeUART
   _copy_frame
   _periperal_init
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR3_Initialize
   _pin_manager
   _writeUART

 _isr (ROOT)
   i1_writeUART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     12F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      48      10       90.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     14      14      14       25.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     12F      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 24 14:21:17 2018

   __size_of_periperal_init 0009                           _i 0074                           _j 00E4  
                         _k 0057                 __CFG_CP$OFF 0000                          _M1 0053  
                        _M2 0051                          _M3 004F                          _M4 004D  
                        _st 00A0                          _sw 00D2         ___wmul@multiplicand 0022  
                       l300 0F0D                         l252 0F8B                         l262 0649  
                       l280 07E2                         l272 0707                         l266 0688  
                       l275 0725                         l269 06C8                         _GIE 005F  
                       _RA2 0062                         _RA3 0063                         _RF0 1460  
                       _RF1 1461                         _RF2 1462                         _RF3 1463  
                       _RF5 1465                         _RF7 1467                         _cnt 00E2  
                       _man 005B                         _isr 0004                         _sum 00D4  
              __CFG_BORV$LO 0000                         wreg 0009                __CFG_FOSC$HS 0000  
       __end_ofi1_writeUART 0F04                __CFG_LVP$OFF 0000                        l3012 0475  
                      l3110 056E                        l3008 046C                        l3050 04D7  
                      l2500 0755                        l3132 0717                        l2502 077C  
                      l2430 07DD                        l3070 050B                        l3048 04D0  
                      l2418 0EC4                        l3074 0514                        l2508 078C  
                      l2480 072F                        l2800 01E3                        l2482 0728  
                      l2706 06D1                        l2626 0610                        l2492 074A  
                      l2484 0734                        l2628 0614                        l2398 0F07  
                      l2654 0653                        l2734 0711                        l2680 0692  
                      l2576 0FBC                        l2808 0205                        l2498 0751  
                      l2850 02A9                        l2818 022C                        l2826 0253  
                      l2924 0397                        l2844 0290                        l2852 02AC  
                      l2828 0259                        l2950 03D9                        l2926 039D  
                      l2774 0192                        l2864 0302                        l2946 03D1  
                      l2858 02C0                        l2884 0336                        l2888 033E  
                      l2986 0432                        l2988 0438                        ?_isr 0076  
                      STR_1 1000                        u2055 0F95                        u2315 028E  
                      u2325 02A7                        u2175 01BB                        u2707 0275  
                      u1925 0F0E                        u1935 0F13                        _PEIE 005E  
                      u2677 0150                        u2687 025D                        u2697 0269  
                      _WPUB 020D                        _WPUD 020F                        _WPUE 0210  
                      _WPUG 048D                __CFG_WRT$OFF 0000           ACTION@SwNumString 003F  
                      _len1 00D6                        _len2 00D8                        _atoi 0726  
         writeUART@Tx_count 0021                        _main 014A                        _copy 0120  
                      _name 0144                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        btemp 007E                        start 0103  
             __CFG_IESO$OFF 0000             _TMR3_Initialize 0EC6                       ??_isr 007A  
              main@end_flag 0232                       ?_atoi 0026                       ?_main 0076  
             __CFG_WDTE$OFF 0000                       _T1CON 0018                       _T3CON 0413  
                     _RC1IF 008D                       i1l202 00F8                       i1l205 00FE  
                     i1l190 00BC                       i1l280 0EF3                       i1l187 00B6  
                     i1l196 00EC                       i1l199 00F2                       _TMR1H 0017  
                     _TMR3H 0412                       _TMR1L 0016                       _TMR3L 0411  
                     _TRISD 008F              __CFG_FCMEN$OFF 0000             __end_of_isdigit 0EC6  
                     atoi@a 002B                       atoi@s 002D     __end_of_TMR1_Initialize 0EB7  
            __CFG_BOREN$OFF 0000                       status 0003                       wtemp0 007E  
            __CFG_MCLRE$OFF 0000             __initialization 0105                __end_of_atoi 0791  
              __end_of_main 0576              __CFG_LPBOR$OFF 0000                      ??_atoi 0028  
                    ??_main 0047                 i1_writeUART 0EEB                ?_pin_manager 0076  
           ACTION@sw_status 002F               main@frame_end 0222                      _ACTION 0576  
                    _ANSELA 018C                      _ANSELB 018D                      _ANSELD 018F  
                    _ANSELE 0190                      _ANSELF 040C                      _ANSELG 040D  
                    _T1GCON 0019                      _T3GCON 0414                      _RC1REG 0199  
                    _RC1STA 019D                      u121_25 0019     __end_of_TMR3_Initialize 0ED5  
                    i1l1926 004B                      i1l1936 005C                      i1l1962 009E  
                    i1l1980 00BF                      i1l1972 00AE                      i1l1992 00E7  
                    i1l1898 0EEE                      u132_25 00DB                      u125_25 006C  
                    _TX1REG 019A                      _TX1STA 019E              __CFG_PWRTE$OFF 0000  
            _periperal_init 07F6                      ___wmul 0F04      main@RX_CHK_FLAG_start1 0228  
    main@RX_CHK_FLAG_start2 022A          writeUART@str2Write 0023        ACTION@Switch_Num_10s 003C  
                 ??_isdigit 0020            ?_TMR1_Initialize 0076     __end_of__initialization 0146  
    __end_of_periperal_init 07FF              __pcstackCOMMON 0076        ACTION@child_lock_num 003A  
              __pidataBANK0 0002                __pidataBANK1 0F51                __pidataBANK2 0791  
              __pidataBANK3 0FC0            ACTION@speed_bit1 0030            ACTION@speed_bit2 0031  
                   ?_ACTION 002E                  __pbssBANK0 004D                  __pbssBANK1 00D2  
          ?_TMR3_Initialize 0076             __CFG_VCAPEN$OFF 0000                  _child_LOCK 01A0  
           ?_periperal_init 0076                  __pmaintext 014A       ACTION@response_starts 0043  
                   ?___wmul 0020                  __pintentry 0004                     _SP1BRGH 019C  
                   _SP1BRGL 019B        __size_of_pin_manager 0031             __size_of_ACTION 01B0  
                   _TX_FLAG 00DA                  _copy_frame 0F83          __size_of_writeUART 001D  
              ACTION@parent 0032             __size_of___wmul 001C                   _FAN_SPEED 00E0  
           __CFG_STVREN$OFF 0000         i1writeUART@Tx_count 0078                     __ptext1 0F20  
                   __ptext2 07F6                     __ptext3 0EC6                     __ptext4 0EAB  
                   __ptext5 0ED5                     __ptext6 0F83                     __ptext7 0576  
                   __ptext8 07D9                     __ptext9 0726                ?i1_writeUART 0076  
                 _T1CONbits 0018                     _isdigit 0EB7                __size_of_isr 00FF  
                 _T3CONbits 0413                   _COPY_FLAG 0055                     clrloop0 0EA0  
      end_of_initialization 0146               copy_frame@end 0022                     init_ram 0EA5  
                   initloop 0EA6           _EUSART_Initialize 0ED5              ACTION@FanSpeed 0036  
        ?_EUSART_Initialize 0076              main@start_flag 0230         ??_EUSART_Initialize 0020  
         __end_of_writeUART 07F6                   _TRISAbits 008C                   _TRISBbits 008D  
                 _TRISCbits 008E                   _TRISEbits 0090                   _TRISFbits 030C  
            __end_of_ACTION 0726   __end_of_EUSART_Initialize 0EEB                 ?_copy_frame 0020  
            ACTION@children 0038              __end_of___wmul 0F20        main@RX_CHK_FLAG_end1 022C  
      main@RX_CHK_FLAG_end2 022E         start_initialization 0105                 __end_of_isr 0103  
                  ??_ACTION 0034            ??_periperal_init 0020    __size_of_TMR1_Initialize 000C  
                  ??___wmul 0024                 __pdataBANK0 005B                 __pdataBANK1 00A0  
               __pdataBANK2 0120                 __pdataBANK3 01A0         ACTION@Switch_Num_1s 002E  
       __size_of_copy_frame 003D        __size_ofi1_writeUART 0019                 __pbssCOMMON 0070  
                 ___latbits 0002               __pcstackBANK0 0020               __pcstackBANK4 0220  
__size_of_EUSART_Initialize 0016    __size_of_TMR3_Initialize 000F               _TimerCounter1 0072  
             _TimerCounter2 0070               ??_pin_manager 0020                 ACTION@SwNum 0041  
      ACTION@finalFrameStat 0033                    _BAUD1CON 019F                    ?_isdigit 0076  
                 _curtFlag1 0059                   _curtFlag2 00E8             main@frame_start 0220  
                  _FAN_FLAG 00DC        ACTION@FanSpeedString 003D              ___wmul@product 0024  
                 clear_ram0 0E9F                    _PIE1bits 0091                    _PIE3bits 0093  
                  _PIR1bits 0011                    _PIR3bits 0013           ??_TMR1_Initialize 0020  
         ___wmul@multiplier 0020                   _writeUART 07D9         __end_of_pin_manager 0F51  
              ??_copy_frame 0024             copy_frame@start 0020         ACTION@switch_status 0045  
         ??_TMR3_Initialize 0020                 _isdigit$740 0020                  _FAN_SPEED1 00DE  
        __end_of_copy_frame 0FC0            __size_of_isdigit 000F                  ?_writeUART 0076  
                  __ptext10 0EB7                    __ptext11 0F04                    __ptext13 0EEB  
                  _curtFlag 00E6               __size_of_atoi 006B               __size_of_main 042C  
                _RC1STAbits 019D                    int$flags 007E                    atoi@sign 002A  
                  main@cnt1 0224                    main@cnt2 0226                 _pin_manager 0F20  
                  isdigit@c 0021                    intlevel1 0000           __CFG_CLKOUTEN$OFF 0000  
      i1writeUART@str2Write 0077               ??i1_writeUART 0076               __pstringtext1 1000  
             __pstringtext2 0000                 ??_writeUART 0020                  _TX1STAbits 019E  
           _TMR1_Initialize 0EAB  
