

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Dec 07 14:29:48 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F1526 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0110                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018F                     	;# 
   133  0190                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0197                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  0199                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019E                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  020D                     	;# 
   167  020F                     	;# 
   168  0210                     	;# 
   169  0211                     	;# 
   170  0211                     	;# 
   171  0212                     	;# 
   172  0212                     	;# 
   173  0213                     	;# 
   174  0213                     	;# 
   175  0214                     	;# 
   176  0214                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0216                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0217                     	;# 
   184  0219                     	;# 
   185  021A                     	;# 
   186  021B                     	;# 
   187  021C                     	;# 
   188  021D                     	;# 
   189  021E                     	;# 
   190  021F                     	;# 
   191  028C                     	;# 
   192  028D                     	;# 
   193  0291                     	;# 
   194  0291                     	;# 
   195  0292                     	;# 
   196  0293                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029D                     	;# 
   202  029E                     	;# 
   203  029F                     	;# 
   204  030C                     	;# 
   205  030D                     	;# 
   206  0311                     	;# 
   207  0311                     	;# 
   208  0312                     	;# 
   209  0313                     	;# 
   210  0318                     	;# 
   211  0318                     	;# 
   212  0319                     	;# 
   213  031A                     	;# 
   214  031C                     	;# 
   215  031C                     	;# 
   216  031D                     	;# 
   217  031E                     	;# 
   218  038C                     	;# 
   219  038D                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  040C                     	;# 
   224  040D                     	;# 
   225  0411                     	;# 
   226  0411                     	;# 
   227  0412                     	;# 
   228  0413                     	;# 
   229  0414                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  0418                     	;# 
   234  0418                     	;# 
   235  0419                     	;# 
   236  041A                     	;# 
   237  041B                     	;# 
   238  041C                     	;# 
   239  041D                     	;# 
   240  041E                     	;# 
   241  048D                     	;# 
   242  0491                     	;# 
   243  0491                     	;# 
   244  0492                     	;# 
   245  0492                     	;# 
   246  0493                     	;# 
   247  0493                     	;# 
   248  0493                     	;# 
   249  0494                     	;# 
   250  0494                     	;# 
   251  0495                     	;# 
   252  0495                     	;# 
   253  0496                     	;# 
   254  0496                     	;# 
   255  0497                     	;# 
   256  0497                     	;# 
   257  0595                     	;# 
   258  0596                     	;# 
   259  0597                     	;# 
   260  059C                     	;# 
   261  059D                     	;# 
   262  059E                     	;# 
   263  0611                     	;# 
   264  0611                     	;# 
   265  0612                     	;# 
   266  0613                     	;# 
   267  0614                     	;# 
   268  0614                     	;# 
   269  0615                     	;# 
   270  0616                     	;# 
   271  0617                     	;# 
   272  0617                     	;# 
   273  0618                     	;# 
   274  0619                     	;# 
   275  061A                     	;# 
   276  061A                     	;# 
   277  061B                     	;# 
   278  061C                     	;# 
   279  061D                     	;# 
   280  061D                     	;# 
   281  061E                     	;# 
   282  061F                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294                           
   295                           	psect	idataBANK0
   296  0757                     __pidataBANK0:	
   297                           
   298                           ;initializer for _man
   299  0757  3401               	retlw	1
   300  0758  3400               	retlw	0
   301                           
   302                           	psect	idataBANK1
   303  0639                     __pidataBANK1:	
   304                           
   305                           ;initializer for _st
   306  0639  3454               	retlw	84
   307  063A  3454               	retlw	84
   308  063B  3454               	retlw	84
   309  063C  3454               	retlw	84
   310  063D  3454               	retlw	84
   311  063E  3454               	retlw	84
   312  063F  3454               	retlw	84
   313  0640  3454               	retlw	84
   314  0641  3454               	retlw	84
   315  0642  3454               	retlw	84
   316  0643  3454               	retlw	84
   317  0644  3454               	retlw	84
   318  0645  3454               	retlw	84
   319  0646  3454               	retlw	84
   320  0647  3454               	retlw	84
   321  0648  3454               	retlw	84
   322  0649  3454               	retlw	84
   323  064A  3454               	retlw	84
   324  064B  3454               	retlw	84
   325  064C  3454               	retlw	84
   326  064D  3454               	retlw	84
   327  064E  3454               	retlw	84
   328  064F  3454               	retlw	84
   329  0650  3454               	retlw	84
   330  0651  3454               	retlw	84
   331  0652  3454               	retlw	84
   332  0653  3454               	retlw	84
   333  0654  3454               	retlw	84
   334  0655  3454               	retlw	84
   335  0656  3454               	retlw	84
   336  0657  3454               	retlw	84
   337  0658  3454               	retlw	84
   338  0659  3454               	retlw	84
   339  065A  3454               	retlw	84
   340  065B  3454               	retlw	84
   341  065C  3454               	retlw	84
   342  065D  3454               	retlw	84
   343  065E  3454               	retlw	84
   344  065F  3454               	retlw	84
   345  0660  3454               	retlw	84
   346  0661  3454               	retlw	84
   347  0662  3400               	retlw	0
   348  0663  3400               	retlw	0
   349  0664  3400               	retlw	0
   350  0665  3400               	retlw	0
   351  0666  3400               	retlw	0
   352  0667  3400               	retlw	0
   353  0668  3400               	retlw	0
   354  0669  3400               	retlw	0
   355  066A  3400               	retlw	0
   356                           
   357                           	psect	idataBANK2
   358  0579                     __pidataBANK2:	
   359                           
   360                           ;initializer for _copy
   361  0579  3424               	retlw	36
   362  057A  3400               	retlw	0
   363  057B  3400               	retlw	0
   364  057C  3400               	retlw	0
   365  057D  3400               	retlw	0
   366  057E  3400               	retlw	0
   367  057F  3400               	retlw	0
   368  0580  3400               	retlw	0
   369  0581  3400               	retlw	0
   370  0582  3400               	retlw	0
   371  0583  3400               	retlw	0
   372  0584  3400               	retlw	0
   373  0585  3400               	retlw	0
   374  0586  3400               	retlw	0
   375  0587  3400               	retlw	0
   376  0588  3400               	retlw	0
   377  0589  3400               	retlw	0
   378  058A  3400               	retlw	0
   379  058B  3400               	retlw	0
   380  058C  3400               	retlw	0
   381  058D  3400               	retlw	0
   382  058E  3400               	retlw	0
   383  058F  3400               	retlw	0
   384  0590  3400               	retlw	0
   385  0591  3400               	retlw	0
   386  0592  3400               	retlw	0
   387  0593  3400               	retlw	0
   388  0594  3400               	retlw	0
   389  0595  3400               	retlw	0
   390  0596  3400               	retlw	0
   391  0597  3400               	retlw	0
   392  0598  3400               	retlw	0
   393  0599  3400               	retlw	0
   394  059A  3400               	retlw	0
   395  059B  3400               	retlw	0
   396  059C  3400               	retlw	0
   397                           
   398                           ;initializer for _name
   399  059D  3461               	retlw	97
   400  059E  3400               	retlw	0
   401  059F  3400               	retlw	0
   402  05A0  3400               	retlw	0
   403  05A1  3400               	retlw	0
   404  05A2  3400               	retlw	0
   405  05A3  3400               	retlw	0
   406  05A4  3400               	retlw	0
   407  05A5  3400               	retlw	0
   408  05A6  3400               	retlw	0
   409  05A7  3400               	retlw	0
   410  05A8  3400               	retlw	0
   411  05A9  3400               	retlw	0
   412  05AA  3400               	retlw	0
   413  05AB  3400               	retlw	0
   414  05AC  3400               	retlw	0
   415  05AD  3400               	retlw	0
   416  05AE  3400               	retlw	0
   417  05AF  3400               	retlw	0
   418  05B0  3400               	retlw	0
   419  05B1  3400               	retlw	0
   420  05B2  3400               	retlw	0
   421  05B3  3400               	retlw	0
   422  05B4  3400               	retlw	0
   423  05B5  3400               	retlw	0
   424  05B6  3400               	retlw	0
   425  05B7  3400               	retlw	0
   426  05B8  3400               	retlw	0
   427  05B9  3400               	retlw	0
   428  05BA  3400               	retlw	0
   429  05BB  3400               	retlw	0
   430  05BC  3400               	retlw	0
   431  05BD  3400               	retlw	0
   432  05BE  3400               	retlw	0
   433  05BF  3400               	retlw	0
   434  05C0  3400               	retlw	0
   435                           
   436                           	psect	idataBANK3
   437  05C1                     __pidataBANK3:	
   438                           
   439                           ;initializer for _child_LOCK
   440  05C1  348F               	retlw	low (STR_1| (0+32768))
   441  05C2  3486               	retlw	high (STR_1| (0+32768))
   442  05C3  3400               	retlw	0
   443  05C4  3400               	retlw	0
   444  05C5  3400               	retlw	0
   445  05C6  3400               	retlw	0
   446  05C7  3400               	retlw	0
   447  05C8  3400               	retlw	0
   448  05C9  3400               	retlw	0
   449  05CA  3400               	retlw	0
   450  05CB  3400               	retlw	0
   451  05CC  3400               	retlw	0
   452  05CD  3400               	retlw	0
   453  05CE  3400               	retlw	0
   454  05CF  3400               	retlw	0
   455  05D0  3400               	retlw	0
   456  05D1  3400               	retlw	0
   457  05D2  3400               	retlw	0
   458  05D3  3400               	retlw	0
   459  05D4  3400               	retlw	0
   460  05D5  3400               	retlw	0
   461  05D6  3400               	retlw	0
   462  05D7  3400               	retlw	0
   463  05D8  3400               	retlw	0
   464  05D9  3400               	retlw	0
   465  05DA  3400               	retlw	0
   466  05DB  3400               	retlw	0
   467  05DC  3400               	retlw	0
   468  05DD  3400               	retlw	0
   469  05DE  3400               	retlw	0
   470  05DF  3400               	retlw	0
   471  05E0  3400               	retlw	0
   472  05E1  3400               	retlw	0
   473  05E2  3400               	retlw	0
   474  05E3  3400               	retlw	0
   475  05E4  3400               	retlw	0
   476  05E5  3400               	retlw	0
   477  05E6  3400               	retlw	0
   478  05E7  3400               	retlw	0
   479  05E8  3400               	retlw	0
   480  05E9  3400               	retlw	0
   481  05EA  3400               	retlw	0
   482  05EB  3400               	retlw	0
   483  05EC  3400               	retlw	0
   484  05ED  3400               	retlw	0
   485  05EE  3400               	retlw	0
   486  05EF  3400               	retlw	0
   487  05F0  3400               	retlw	0
   488  05F1  3400               	retlw	0
   489  05F2  3400               	retlw	0
   490  05F3  3400               	retlw	0
   491  05F4  3400               	retlw	0
   492  05F5  3400               	retlw	0
   493  05F6  3400               	retlw	0
   494  05F7  3400               	retlw	0
   495  05F8  3400               	retlw	0
   496  05F9  3400               	retlw	0
   497  05FA  3400               	retlw	0
   498  05FB  3400               	retlw	0
   499  05FC  3400               	retlw	0
   500  05FD  3400               	retlw	0
   501  05FE  3400               	retlw	0
   502  05FF  3400               	retlw	0
   503  0600  3400               	retlw	0
   504  0013                     _PIR3bits	set	19
   505  0019                     _T1GCON	set	25
   506  0018                     _T1CON	set	24
   507  0016                     _TMR1L	set	22
   508  0017                     _TMR1H	set	23
   509  0018                     _T1CONbits	set	24
   510  0011                     _PIR1bits	set	17
   511  005E                     _PEIE	set	94
   512  005F                     _GIE	set	95
   513  008D                     _RC1IF	set	141
   514  008E                     _TRISCbits	set	142
   515  008F                     _TRISD	set	143
   516  0093                     _PIE3bits	set	147
   517  0091                     _PIE1bits	set	145
   518  018C                     _ANSELA	set	396
   519  018D                     _ANSELB	set	397
   520  018F                     _ANSELD	set	399
   521  0190                     _ANSELE	set	400
   522  019C                     _SP1BRGH	set	412
   523  019B                     _SP1BRGL	set	411
   524  019E                     _TX1STA	set	414
   525  019D                     _RC1STA	set	413
   526  019F                     _BAUD1CON	set	415
   527  019E                     _TX1STAbits	set	414
   528  0199                     _RC1REG	set	409
   529  019A                     _TX1REG	set	410
   530  019D                     _RC1STAbits	set	413
   531  020D                     _WPUB	set	525
   532  020F                     _WPUD	set	527
   533  0210                     _WPUE	set	528
   534  1465                     _RF5	set	5221
   535  1467                     _RF7	set	5223
   536  1460                     _RF0	set	5216
   537  1461                     _RF1	set	5217
   538  030C                     _TRISFbits	set	780
   539  040C                     _ANSELF	set	1036
   540  040D                     _ANSELG	set	1037
   541  0411                     _TMR3L	set	1041
   542  0412                     _TMR3H	set	1042
   543  0414                     _T3GCON	set	1044
   544  0413                     _T3CON	set	1043
   545  048D                     _WPUG	set	1165
   546                           
   547                           	psect	stringtext1
   548  068F                     __pstringtext1:	
   549  068F                     STR_1:	
   550  068F  3430               	retlw	48	;'0'
   551  0690  3430               	retlw	48	;'0'
   552  0691  3430               	retlw	48	;'0'
   553  0692  3430               	retlw	48	;'0'
   554  0693  3430               	retlw	48	;'0'
   555  0694  3430               	retlw	48	;'0'
   556  0695  3430               	retlw	48	;'0'
   557  0696  3430               	retlw	48	;'0'
   558  0697  3430               	retlw	48	;'0'
   559  0698  3430               	retlw	48	;'0'
   560  0699  3430               	retlw	48	;'0'
   561  069A  3430               	retlw	48	;'0'
   562  069B  3430               	retlw	48	;'0'
   563  069C  3430               	retlw	48	;'0'
   564  069D  3430               	retlw	48	;'0'
   565  069E  3430               	retlw	48	;'0'
   566  069F  3430               	retlw	48	;'0'
   567  06A0  3430               	retlw	48	;'0'
   568  06A1  3430               	retlw	48	;'0'
   569  06A2  3430               	retlw	48	;'0'
   570  06A3  3430               	retlw	48	;'0'
   571  06A4  3430               	retlw	48	;'0'
   572  06A5  3430               	retlw	48	;'0'
   573  06A6  3430               	retlw	48	;'0'
   574  06A7  3430               	retlw	48	;'0'
   575  06A8  3430               	retlw	48	;'0'
   576  06A9  3430               	retlw	48	;'0'
   577  06AA  3430               	retlw	48	;'0'
   578  06AB  3430               	retlw	48	;'0'
   579  06AC  3430               	retlw	48	;'0'
   580  06AD  3430               	retlw	48	;'0'
   581  06AE  3430               	retlw	48	;'0'
   582  06AF  3400               	retlw	0
   583                           
   584                           	psect	stringtext2
   585  0000                     __pstringtext2:	
   586                           
   587                           ; #config settings
   588  0000                     
   589                           	psect	cinit
   590  00B1                     start_initialization:	
   591  00B1                     __initialization:	
   592                           
   593                           ; Initialize objects allocated to BANK0
   594  00B1  3187  2757  3180   	fcall	__pidataBANK0	;fetch initializer
   595  00B4  00DB               	movwf	__pdataBANK0& (0+127)
   596  00B5  3187  2758  3180   	fcall	__pidataBANK0+1	;fetch initializer
   597  00B8  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   598                           
   599                           ; Initialize objects allocated to BANK1
   600  00B9  3039               	movlw	low __pidataBANK1
   601  00BA  0084               	movwf	4
   602  00BB  3086               	movlw	(high __pidataBANK1)| (0+128)
   603  00BC  0085               	movwf	5
   604  00BD  30A0               	movlw	low __pdataBANK1
   605  00BE  0086               	movwf	6
   606  00BF  3000               	movlw	high __pdataBANK1
   607  00C0  0087               	movwf	7
   608  00C1  3032               	movlw	50
   609  00C2  3187  274B  3180   	fcall	init_ram
   610                           
   611                           ; Initialize objects allocated to BANK2
   612  00C5  3079               	movlw	low __pidataBANK2
   613  00C6  0084               	movwf	4
   614  00C7  3085               	movlw	(high __pidataBANK2)| (0+128)
   615  00C8  0085               	movwf	5
   616  00C9  3020               	movlw	low __pdataBANK2
   617  00CA  0086               	movwf	6
   618  00CB  3001               	movlw	high __pdataBANK2
   619  00CC  0087               	movwf	7
   620  00CD  3048               	movlw	72
   621  00CE  3187  274B  3180   	fcall	init_ram
   622                           
   623                           ; Initialize objects allocated to BANK3
   624  00D1  30C1               	movlw	low __pidataBANK3
   625  00D2  0084               	movwf	4
   626  00D3  3085               	movlw	(high __pidataBANK3)| (0+128)
   627  00D4  0085               	movwf	5
   628  00D5  30A0               	movlw	low __pdataBANK3
   629  00D6  0086               	movwf	6
   630  00D7  3001               	movlw	high __pdataBANK3
   631  00D8  0087               	movwf	7
   632  00D9  3040               	movlw	64
   633  00DA  3187  274B  3180   	fcall	init_ram
   634                           
   635                           ; Clear objects allocated to COMMON
   636  00DD  01F0               	clrf	__pbssCOMMON& (0+127)
   637  00DE  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   638  00DF  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   639  00E0  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   640  00E1  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   641  00E2  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   642                           
   643                           ; Clear objects allocated to BANK0
   644  00E3  304D               	movlw	low __pbssBANK0
   645  00E4  0084               	movwf	4
   646  00E5  3000               	movlw	high __pbssBANK0
   647  00E6  0085               	movwf	5
   648  00E7  300E               	movlw	14
   649  00E8  3187  2751  3180   	fcall	clear_ram0
   650                           
   651                           ; Clear objects allocated to BANK1
   652  00EB  30D2               	movlw	low __pbssBANK1
   653  00EC  0084               	movwf	4
   654  00ED  3000               	movlw	high __pbssBANK1
   655  00EE  0085               	movwf	5
   656  00EF  3018               	movlw	24
   657  00F0  3187  2751         	fcall	clear_ram0
   658  00F2                     end_of_initialization:	
   659                           ;End of C runtime variable initialization code
   660                           
   661  00F2                     __end_of__initialization:	
   662  00F2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   663  00F3  0020               	movlb	0
   664  00F4  3180  28F6         	ljmp	_main	;jump to C main() function
   665                           
   666                           	psect	bssCOMMON
   667  0070                     __pbssCOMMON:	
   668  0070                     _TimerCounter1:	
   669  0070                     	ds	2
   670  0072                     _i:	
   671  0072                     	ds	2
   672  0074                     _curtFlag1:	
   673  0074                     	ds	2
   674                           
   675                           	psect	bssBANK0
   676  004D                     __pbssBANK0:	
   677  004D                     _M2:	
   678  004D                     	ds	2
   679  004F                     _M1:	
   680  004F                     	ds	2
   681  0051                     _COPY_FLAG:	
   682  0051                     	ds	2
   683  0053                     _sw:	
   684  0053                     	ds	2
   685  0055                     _k:	
   686  0055                     	ds	2
   687  0057                     _TX_FLAG:	
   688  0057                     	ds	2
   689  0059                     _curtFlag2:	
   690  0059                     	ds	2
   691                           
   692                           	psect	dataBANK0
   693  005B                     __pdataBANK0:	
   694  005B                     _man:	
   695  005B                     	ds	2
   696                           
   697                           	psect	bssBANK1
   698  00D2                     __pbssBANK1:	
   699  00D2                     _TimerCounter2:	
   700  00D2                     	ds	2
   701  00D4                     _M4:	
   702  00D4                     	ds	2
   703  00D6                     _M3:	
   704  00D6                     	ds	2
   705  00D8                     _sum:	
   706  00D8                     	ds	2
   707  00DA                     _len1:	
   708  00DA                     	ds	2
   709  00DC                     _len2:	
   710  00DC                     	ds	2
   711  00DE                     _FAN_FLAG:	
   712  00DE                     	ds	2
   713  00E0                     _FAN_SPEED1:	
   714  00E0                     	ds	2
   715  00E2                     _FAN_SPEED:	
   716  00E2                     	ds	2
   717  00E4                     _cnt:	
   718  00E4                     	ds	2
   719  00E6                     _j:	
   720  00E6                     	ds	2
   721  00E8                     _curtFlag:	
   722  00E8                     	ds	2
   723                           
   724                           	psect	dataBANK1
   725  00A0                     __pdataBANK1:	
   726  00A0                     _st:	
   727  00A0                     	ds	50
   728                           
   729                           	psect	dataBANK2
   730  0120                     __pdataBANK2:	
   731  0120                     _copy:	
   732  0120                     	ds	36
   733  0144                     _name:	
   734  0144                     	ds	36
   735                           
   736                           	psect	dataBANK3
   737  01A0                     __pdataBANK3:	
   738  01A0                     _child_LOCK:	
   739  01A0                     	ds	64
   740                           
   741                           	psect	inittext
   742  074B                     init_ram:	
   743  074B  00FE               	movwf	126
   744  074C                     initloop:	
   745  074C  0012               	moviw fsr0++
   746  074D  001E               	movwi fsr1++
   747  074E  0BFE               	decfsz	126,f
   748  074F  2F4C               	goto	initloop
   749  0750  3400               	retlw	0
   750                           
   751                           	psect	clrtext
   752  0751                     clear_ram0:	
   753                           ;	Called with FSR0 containing the base address, and
   754                           ;	WREG with the size to clear
   755                           
   756  0751  0064               	clrwdt	;clear the watchdog before getting into this loop
   757  0752                     clrloop0:	
   758  0752  0180               	clrf	0	;clear RAM location pointed to by FSR
   759  0753  3101               	addfsr 0,1
   760  0754  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   761  0755  2F52               	goto	clrloop0	;have we reached the end yet?
   762  0756  3400               	retlw	0	;all done for this memory range, return
   763                           
   764                           	psect	cstackBANK4
   765  0220                     __pcstackBANK4:	
   766  0220                     main@frame_start:	
   767                           
   768                           ; 2 bytes @ 0x0
   769  0220                     	ds	2
   770  0222                     main@frame_end:	
   771                           
   772                           ; 2 bytes @ 0x2
   773  0222                     	ds	2
   774  0224                     main@cnt1:	
   775                           
   776                           ; 2 bytes @ 0x4
   777  0224                     	ds	2
   778  0226                     main@cnt2:	
   779                           
   780                           ; 2 bytes @ 0x6
   781  0226                     	ds	2
   782  0228                     main@RX_CHK_FLAG_start1:	
   783                           
   784                           ; 2 bytes @ 0x8
   785  0228                     	ds	2
   786  022A                     main@RX_CHK_FLAG_start2:	
   787                           
   788                           ; 2 bytes @ 0xA
   789  022A                     	ds	2
   790  022C                     main@RX_CHK_FLAG_end1:	
   791                           
   792                           ; 2 bytes @ 0xC
   793  022C                     	ds	2
   794  022E                     main@RX_CHK_FLAG_end2:	
   795                           
   796                           ; 2 bytes @ 0xE
   797  022E                     	ds	2
   798  0230                     main@start_flag:	
   799                           
   800                           ; 2 bytes @ 0x10
   801  0230                     	ds	2
   802  0232                     main@end_flag:	
   803                           
   804                           ; 2 bytes @ 0x12
   805  0232                     	ds	2
   806                           
   807                           	psect	cstackCOMMON
   808  0076                     __pcstackCOMMON:	
   809  0076                     ?_isdigit:	
   810  0076                     ?_writeUART:	
   811                           ; 1 bit 
   812                           
   813  0076                     ?_EUSART_Initialize:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0076                     ?_TMR1_Initialize:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0076                     ?_TMR3_Initialize:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0076                     ?_pin_manager:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0076                     ?_isr:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0076                     ?_periperal_init:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0076                     ?_main:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0076                     ?i1_writeUART:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0076                     ??i1_writeUART:	
   838                           ; 1 bytes @ 0x0
   839                           
   840                           
   841                           ; 1 bytes @ 0x0
   842  0076                     	ds	1
   843  0077                     i1writeUART@str2Write:	
   844                           
   845                           ; 1 bytes @ 0x1
   846  0077                     	ds	1
   847  0078                     i1writeUART@Tx_count:	
   848                           
   849                           ; 2 bytes @ 0x2
   850  0078                     	ds	2
   851  007A                     ??_isr:	
   852                           
   853                           ; 1 bytes @ 0x4
   854  007A                     	ds	2
   855                           
   856                           	psect	cstackBANK0
   857  0020                     __pcstackBANK0:	
   858  0020                     ??_writeUART:	
   859  0020                     ??_EUSART_Initialize:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0020                     ??_TMR1_Initialize:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0020                     ??_TMR3_Initialize:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0020                     ??_pin_manager:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0020                     ?_copy_frame:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0020                     ??_isdigit:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0020                     ??_periperal_init:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0020                     ?___wmul:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0020                     _isdigit$611:	
   884                           ; 2 bytes @ 0x0
   885                           
   886  0020                     copy_frame@start:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0020                     ___wmul@multiplier:	
   890                           ; 2 bytes @ 0x0
   891                           
   892                           
   893                           ; 2 bytes @ 0x0
   894  0020                     	ds	1
   895  0021                     isdigit@c:	
   896  0021                     writeUART@Tx_count:	
   897                           ; 1 bytes @ 0x1
   898                           
   899                           
   900                           ; 2 bytes @ 0x1
   901  0021                     	ds	1
   902  0022                     copy_frame@end:	
   903  0022                     ___wmul@multiplicand:	
   904                           ; 2 bytes @ 0x2
   905                           
   906                           
   907                           ; 2 bytes @ 0x2
   908  0022                     	ds	1
   909  0023                     writeUART@str2Write:	
   910                           
   911                           ; 1 bytes @ 0x3
   912  0023                     	ds	1
   913  0024                     ??_copy_frame:	
   914  0024                     ??___wmul:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  0024                     ___wmul@product:	
   918                           ; 1 bytes @ 0x4
   919                           
   920                           
   921                           ; 2 bytes @ 0x4
   922  0024                     	ds	2
   923  0026                     ?_atoi:	
   924                           
   925                           ; 2 bytes @ 0x6
   926  0026                     	ds	2
   927  0028                     ??_atoi:	
   928                           
   929                           ; 1 bytes @ 0x8
   930  0028                     	ds	2
   931  002A                     atoi@sign:	
   932                           
   933                           ; 1 bytes @ 0xA
   934  002A                     	ds	1
   935  002B                     atoi@a:	
   936                           
   937                           ; 2 bytes @ 0xB
   938  002B                     	ds	2
   939  002D                     atoi@s:	
   940                           
   941                           ; 1 bytes @ 0xD
   942  002D                     	ds	1
   943  002E                     ?_ACTION:	
   944  002E                     ACTION@Switch_Num_1s:	
   945                           ; 1 bytes @ 0xE
   946                           
   947                           
   948                           ; 1 bytes @ 0xE
   949  002E                     	ds	1
   950  002F                     ACTION@sw_status:	
   951                           
   952                           ; 1 bytes @ 0xF
   953  002F                     	ds	1
   954  0030                     ACTION@speed_bit1:	
   955                           
   956                           ; 1 bytes @ 0x10
   957  0030                     	ds	1
   958  0031                     ACTION@speed_bit2:	
   959                           
   960                           ; 1 bytes @ 0x11
   961  0031                     	ds	1
   962  0032                     ACTION@parent:	
   963                           
   964                           ; 1 bytes @ 0x12
   965  0032                     	ds	1
   966  0033                     ACTION@finalFrameStat:	
   967                           
   968                           ; 1 bytes @ 0x13
   969  0033                     	ds	1
   970  0034                     ??_ACTION:	
   971                           
   972                           ; 1 bytes @ 0x14
   973  0034                     	ds	2
   974  0036                     ACTION@FanSpeed:	
   975                           
   976                           ; 2 bytes @ 0x16
   977  0036                     	ds	2
   978  0038                     ACTION@children:	
   979                           
   980                           ; 2 bytes @ 0x18
   981  0038                     	ds	2
   982  003A                     ACTION@child_lock_num:	
   983                           
   984                           ; 2 bytes @ 0x1A
   985  003A                     	ds	2
   986  003C                     ACTION@Switch_Num_10s:	
   987                           
   988                           ; 1 bytes @ 0x1C
   989  003C                     	ds	1
   990  003D                     ACTION@FanSpeedString:	
   991                           
   992                           ; 2 bytes @ 0x1D
   993  003D                     	ds	2
   994  003F                     ACTION@SwNumString:	
   995                           
   996                           ; 2 bytes @ 0x1F
   997  003F                     	ds	2
   998  0041                     ACTION@SwNum:	
   999                           
  1000                           ; 2 bytes @ 0x21
  1001  0041                     	ds	2
  1002  0043                     ACTION@switch_status:	
  1003                           
  1004                           ; 2 bytes @ 0x23
  1005  0043                     	ds	2
  1006  0045                     ACTION@response_starts:	
  1007                           
  1008                           ; 2 bytes @ 0x25
  1009  0045                     	ds	2
  1010  0047                     ??_main:	
  1011                           
  1012                           ; 1 bytes @ 0x27
  1013  0047                     	ds	6
  1014                           
  1015                           	psect	maintext
  1016  00F6                     __pmaintext:	
  1017 ;;
  1018 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1019 ;;
  1020 ;; *************** function _main *****************
  1021 ;; Defined at:
  1022 ;;		line 133 in file "blynd.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  end_flag        2   18[BANK4 ] int 
  1027 ;;  start_flag      2   16[BANK4 ] int 
  1028 ;;  RX_CHK_FLAG_    2   14[BANK4 ] int 
  1029 ;;  RX_CHK_FLAG_    2   12[BANK4 ] int 
  1030 ;;  RX_CHK_FLAG_    2   10[BANK4 ] int 
  1031 ;;  RX_CHK_FLAG_    2    8[BANK4 ] int 
  1032 ;;  cnt2            2    6[BANK4 ] unsigned int 
  1033 ;;  cnt1            2    4[BANK4 ] unsigned int 
  1034 ;;  frame_end       2    2[BANK4 ] unsigned int 
  1035 ;;  frame_start     2    0[BANK4 ] unsigned int 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : B1F/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0      20       0       0       0       0       0
  1047 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0
  1048 ;;      Totals:         0       6       0       0       0      20       0       0       0       0       0
  1049 ;;Total ram usage:       26 bytes
  1050 ;; Hardware stack levels required when called:    5
  1051 ;; This function calls:
  1052 ;;		_ACTION
  1053 ;;		_copy_frame
  1054 ;;		_periperal_init
  1055 ;;		_pin_manager
  1056 ;;		_writeUART
  1057 ;; This function is called by:
  1058 ;;		Startup code after reset
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           
  1063                           ;psect for function _main
  1064  00F6                     _main:	
  1065                           
  1066                           ;blynd.c: 134: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1070  00F6  3029               	movlw	41
  1071  00F7  0020               	movlb	0	; select bank0
  1072  00F8  00C8               	movwf	??_main+1
  1073  00F9  3096               	movlw	150
  1074  00FA  00C7               	movwf	??_main
  1075  00FB  307F               	movlw	127
  1076  00FC                     u2057:	
  1077  00FC  0B89               	decfsz	9,f
  1078  00FD  28FC               	goto	u2057
  1079  00FE  0BC7               	decfsz	??_main,f
  1080  00FF  28FC               	goto	u2057
  1081  0100  0BC8               	decfsz	??_main+1,f
  1082  0101  28FC               	goto	u2057
  1083                           
  1084                           ;blynd.c: 136: unsigned int frame_start = 0, frame_end = 0,cnt1=0,cnt2=0;
  1085  0102  0024               	movlb	4	; select bank4
  1086  0103  01A0               	clrf	main@frame_start^(0+512)
  1087  0104  01A1               	clrf	(main@frame_start+1)^(0+512)
  1088  0105  01A2               	clrf	main@frame_end^(0+512)
  1089  0106  01A3               	clrf	(main@frame_end+1)^(0+512)
  1090  0107  01A4               	clrf	main@cnt1^(0+512)
  1091  0108  01A5               	clrf	(main@cnt1+1)^(0+512)
  1092  0109  01A6               	clrf	main@cnt2^(0+512)
  1093  010A  01A7               	clrf	(main@cnt2+1)^(0+512)
  1094                           
  1095                           ;blynd.c: 138: int RX_CHK_FLAG_start1 = 0 ,RX_CHK_FLAG_start2 = 0, start_flag=0, RX_CHK_
      +                          FLAG_end1 = 0, RX_CHK_FLAG_end2 = 0, end_flag=0;
  1096  010B  01A8               	clrf	main@RX_CHK_FLAG_start1^(0+512)
  1097  010C  01A9               	clrf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1098  010D  01AA               	clrf	main@RX_CHK_FLAG_start2^(0+512)
  1099  010E  01AB               	clrf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1100  010F  01B0               	clrf	main@start_flag^(0+512)
  1101  0110  01B1               	clrf	(main@start_flag+1)^(0+512)
  1102  0111  01AC               	clrf	main@RX_CHK_FLAG_end1^(0+512)
  1103  0112  01AD               	clrf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1104  0113  01AE               	clrf	main@RX_CHK_FLAG_end2^(0+512)
  1105  0114  01AF               	clrf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1106  0115  01B2               	clrf	main@end_flag^(0+512)
  1107  0116  01B3               	clrf	(main@end_flag+1)^(0+512)
  1108                           
  1109                           ;blynd.c: 140: pin_manager();
  1110  0117  3186  266B  3180   	fcall	_pin_manager
  1111                           
  1112                           ;blynd.c: 141: periperal_init();
  1113  011A  3187  2742  3180   	fcall	_periperal_init
  1114                           
  1115                           ;blynd.c: 143: RF1 = 0; RF0 = 0;
  1116  011D  0025               	movlb	5	; select bank5
  1117  011E  108C               	bcf	12,1	;volatile
  1118  011F  100C               	bcf	12,0	;volatile
  1119                           
  1120                           ;blynd.c: 144: M1=1; M2=1; M3=1; M4=1;
  1121  0120  3001               	movlw	1
  1122  0121  0020               	movlb	0	; select bank0
  1123  0122  00CF               	movwf	_M1
  1124  0123  3000               	movlw	0
  1125  0124  00D0               	movwf	_M1+1
  1126  0125  3001               	movlw	1
  1127  0126  00CD               	movwf	_M2
  1128  0127  3000               	movlw	0
  1129  0128  00CE               	movwf	_M2+1
  1130  0129  3001               	movlw	1
  1131  012A  0021               	movlb	1	; select bank1
  1132  012B  00D6               	movwf	_M3^(0+128)
  1133  012C  3000               	movlw	0
  1134  012D  00D7               	movwf	(_M3^(0+128)+1)
  1135  012E  3001               	movlw	1
  1136  012F  00D4               	movwf	_M4^(0+128)
  1137  0130  3000               	movlw	0
  1138  0131  00D5               	movwf	(_M4^(0+128)+1)
  1139                           
  1140                           ;blynd.c: 145: st[0]='%'; st[10]='@';
  1141  0132  3025               	movlw	37
  1142  0133  0020               	movlb	0	; select bank0
  1143  0134  00C7               	movwf	??_main
  1144  0135  0847               	movf	??_main,w
  1145  0136  0021               	movlb	1	; select bank1
  1146  0137  00A0               	movwf	_st^(0+128)
  1147  0138  3040               	movlw	64
  1148  0139  0020               	movlb	0	; select bank0
  1149  013A  00C7               	movwf	??_main
  1150  013B  0847               	movf	??_main,w
  1151  013C  0021               	movlb	1	; select bank1
  1152  013D  00AA               	movwf	(_st^(0+128)+10)
  1153  013E                     l2186:	
  1154                           ;blynd.c: 147: while(1){
  1155                           
  1156                           
  1157                           ;blynd.c: 148: if(TX_FLAG==1)
  1158  013E  0020               	movlb	0	; select bank0
  1159  013F  0357               	decf	_TX_FLAG,w
  1160  0140  0458               	iorwf	_TX_FLAG+1,w
  1161  0141  1D03               	btfss	3,2
  1162  0142  2AAD               	goto	l2276
  1163                           
  1164                           ;blynd.c: 149: {
  1165                           ;blynd.c: 151: TX_FLAG=0;
  1166  0143  01D7               	clrf	_TX_FLAG
  1167  0144  01D8               	clrf	_TX_FLAG+1
  1168                           
  1169                           ;blynd.c: 152: start_flag = 0;
  1170  0145  0024               	movlb	4	; select bank4
  1171  0146  01B0               	clrf	main@start_flag^(0+512)
  1172  0147  01B1               	clrf	(main@start_flag+1)^(0+512)
  1173                           
  1174                           ;blynd.c: 153: end_flag = 0;
  1175  0148  01B2               	clrf	main@end_flag^(0+512)
  1176  0149  01B3               	clrf	(main@end_flag+1)^(0+512)
  1177                           
  1178                           ;blynd.c: 155: if(name[0]=='%' && name[1]=='%' && name[14]=='@' && name[15]=='@')
  1179  014A  3025               	movlw	37
  1180  014B  0022               	movlb	2	; select bank2
  1181  014C  0644               	xorwf	_name^(0+256),w
  1182  014D  1D03               	btfss	3,2
  1183  014E  2A05               	goto	l2240
  1184  014F  3025               	movlw	37
  1185  0150  0645               	xorwf	(_name^(0+256)+1),w
  1186  0151  1D03               	btfss	3,2
  1187  0152  2A05               	goto	l2240
  1188  0153  3040               	movlw	64
  1189  0154  0652               	xorwf	(_name^(0+256)+14),w
  1190  0155  1D03               	btfss	3,2
  1191  0156  2A05               	goto	l2240
  1192  0157  3040               	movlw	64
  1193  0158  0653               	xorwf	(_name^(0+256)+15),w
  1194  0159  1D03               	btfss	3,2
  1195  015A  2A05               	goto	l2240
  1196                           
  1197                           ;blynd.c: 156: {
  1198                           ;blynd.c: 157: for(k=0;k<16;k++)
  1199  015B  0020               	movlb	0	; select bank0
  1200  015C  01D5               	clrf	_k
  1201  015D  01D6               	clrf	_k+1
  1202  015E                     L3:	
  1203  015E  0856               	movf	_k+1,w
  1204  015F  3A80               	xorlw	128
  1205  0160  00C7               	movwf	??_main
  1206  0161  3080               	movlw	128
  1207  0162  0247               	subwf	??_main,w
  1208  0163  1D03               	skipz
  1209  0164  2967               	goto	u1715
  1210  0165  3010               	movlw	16
  1211  0166  0255               	subwf	_k,w
  1212  0167                     u1715:	
  1213  0167  1803               	btfsc	3,0
  1214  0168  2A57               	goto	l2264
  1215                           
  1216                           ;blynd.c: 158: {
  1217                           ;blynd.c: 159: if(name[k] == '%' && name[k+1] == '%' && start_flag == 0)
  1218  0169  0020               	movlb	0	; select bank0
  1219  016A  0855               	movf	_k,w
  1220  016B  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1221  016C  0086               	movwf	6
  1222  016D  3001               	movlw	1	; select bank2/3
  1223  016E  0087               	movwf	7
  1224  016F  3025               	movlw	37
  1225  0170  0601               	xorwf	1,w
  1226  0171  1D03               	btfss	3,2
  1227  0172  298F               	goto	l2212
  1228  0173  0855               	movf	_k,w
  1229  0174  3E01               	addlw	1
  1230  0175  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1231  0176  0086               	movwf	6
  1232  0177  3001               	movlw	1	; select bank2/3
  1233  0178  0087               	movwf	7
  1234  0179  3025               	movlw	37
  1235  017A  0601               	xorwf	1,w
  1236  017B  1D03               	btfss	3,2
  1237  017C  298F               	goto	l2212
  1238  017D  0024               	movlb	4	; select bank4
  1239  017E  0830               	movf	main@start_flag^(0+512),w
  1240  017F  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1241  0180  1D03               	btfss	3,2
  1242  0181  298F               	goto	l2212
  1243                           
  1244                           ;blynd.c: 160: {
  1245                           ;blynd.c: 161: RX_CHK_FLAG_start1 = k;
  1246  0182  0020               	movlb	0	; select bank0
  1247  0183  0856               	movf	_k+1,w
  1248  0184  0024               	movlb	4	; select bank4
  1249  0185  00A9               	movwf	(main@RX_CHK_FLAG_start1+1)^(0+512)
  1250  0186  0020               	movlb	0	; select bank0
  1251  0187  0855               	movf	_k,w
  1252  0188  0024               	movlb	4	; select bank4
  1253  0189  00A8               	movwf	main@RX_CHK_FLAG_start1^(0+512)
  1254                           
  1255                           ;blynd.c: 162: start_flag = 1;
  1256  018A  3001               	movlw	1
  1257  018B  00B0               	movwf	main@start_flag^(0+512)
  1258  018C  3000               	movlw	0
  1259  018D  00B1               	movwf	(main@start_flag^(0+512)+1)
  1260                           
  1261                           ;blynd.c: 163: }
  1262  018E  29FF               	goto	l2238
  1263  018F                     l2212:	
  1264                           
  1265                           ;blynd.c: 164: else if(name[k] == '%' && name[k+1] == '%' && start_flag == 1)
  1266  018F  0020               	movlb	0	; select bank0
  1267  0190  0855               	movf	_k,w
  1268  0191  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1269  0192  0086               	movwf	6
  1270  0193  3001               	movlw	1	; select bank2/3
  1271  0194  0087               	movwf	7
  1272  0195  3025               	movlw	37
  1273  0196  0601               	xorwf	1,w
  1274  0197  1D03               	btfss	3,2
  1275  0198  29B1               	goto	l2220
  1276  0199  0855               	movf	_k,w
  1277  019A  3E01               	addlw	1
  1278  019B  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1279  019C  0086               	movwf	6
  1280  019D  3001               	movlw	1	; select bank2/3
  1281  019E  0087               	movwf	7
  1282  019F  3025               	movlw	37
  1283  01A0  0601               	xorwf	1,w
  1284  01A1  1D03               	btfss	3,2
  1285  01A2  29B1               	goto	l2220
  1286  01A3  0024               	movlb	4	; select bank4
  1287  01A4  0330               	decf	main@start_flag^(0+512),w
  1288  01A5  0431               	iorwf	(main@start_flag+1)^(0+512),w
  1289  01A6  1D03               	btfss	3,2
  1290  01A7  29B1               	goto	l2220
  1291                           
  1292                           ;blynd.c: 165: {
  1293                           ;blynd.c: 166: RX_CHK_FLAG_start2 = k;
  1294  01A8  0020               	movlb	0	; select bank0
  1295  01A9  0856               	movf	_k+1,w
  1296  01AA  0024               	movlb	4	; select bank4
  1297  01AB  00AB               	movwf	(main@RX_CHK_FLAG_start2+1)^(0+512)
  1298  01AC  0020               	movlb	0	; select bank0
  1299  01AD  0855               	movf	_k,w
  1300  01AE  0024               	movlb	4	; select bank4
  1301  01AF  00AA               	movwf	main@RX_CHK_FLAG_start2^(0+512)
  1302                           
  1303                           ;blynd.c: 167: }
  1304  01B0  29FF               	goto	l2238
  1305  01B1                     l2220:	
  1306                           
  1307                           ;blynd.c: 168: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 0)
  1308  01B1  0020               	movlb	0	; select bank0
  1309  01B2  0855               	movf	_k,w
  1310  01B3  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1311  01B4  0086               	movwf	6
  1312  01B5  3001               	movlw	1	; select bank2/3
  1313  01B6  0087               	movwf	7
  1314  01B7  3040               	movlw	64
  1315  01B8  0601               	xorwf	1,w
  1316  01B9  1D03               	btfss	3,2
  1317  01BA  29D8               	goto	l2230
  1318  01BB  0855               	movf	_k,w
  1319  01BC  3E01               	addlw	1
  1320  01BD  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1321  01BE  0086               	movwf	6
  1322  01BF  3001               	movlw	1	; select bank2/3
  1323  01C0  0087               	movwf	7
  1324  01C1  3040               	movlw	64
  1325  01C2  0601               	xorwf	1,w
  1326  01C3  1D03               	btfss	3,2
  1327  01C4  29D8               	goto	l2230
  1328  01C5  0024               	movlb	4	; select bank4
  1329  01C6  0832               	movf	main@end_flag^(0+512),w
  1330  01C7  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1331  01C8  1D03               	btfss	3,2
  1332  01C9  29D8               	goto	l2230
  1333                           
  1334                           ;blynd.c: 169: {
  1335                           ;blynd.c: 170: RX_CHK_FLAG_end1 = k;
  1336  01CA  0020               	movlb	0	; select bank0
  1337  01CB  0856               	movf	_k+1,w
  1338  01CC  0024               	movlb	4	; select bank4
  1339  01CD  00AD               	movwf	(main@RX_CHK_FLAG_end1+1)^(0+512)
  1340  01CE  0020               	movlb	0	; select bank0
  1341  01CF  0855               	movf	_k,w
  1342  01D0  0024               	movlb	4	; select bank4
  1343  01D1  00AC               	movwf	main@RX_CHK_FLAG_end1^(0+512)
  1344                           
  1345                           ;blynd.c: 171: end_flag = 1;
  1346  01D2  3001               	movlw	1
  1347  01D3  00B2               	movwf	main@end_flag^(0+512)
  1348  01D4  3000               	movlw	0
  1349  01D5  00B3               	movwf	(main@end_flag^(0+512)+1)
  1350                           
  1351                           ;blynd.c: 172: COPY_FLAG=1;
  1352  01D6  3001               	movlw	1
  1353  01D7  29FA               	goto	L1
  1354  01D8                     l2230:	
  1355                           ;blynd.c: 174: }
  1356                           
  1357                           ;blynd.c: 173: break;
  1358                           
  1359                           
  1360                           ;blynd.c: 175: else if(name[k] == '@' && name[k+1] == '@' && end_flag == 1)
  1361  01D8  0020               	movlb	0	; select bank0
  1362  01D9  0855               	movf	_k,w
  1363  01DA  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1364  01DB  0086               	movwf	6
  1365  01DC  3001               	movlw	1	; select bank2/3
  1366  01DD  0087               	movwf	7
  1367  01DE  3040               	movlw	64
  1368  01DF  0601               	xorwf	1,w
  1369  01E0  1D03               	btfss	3,2
  1370  01E1  29FF               	goto	l2238
  1371  01E2  0855               	movf	_k,w
  1372  01E3  3E01               	addlw	1
  1373  01E4  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1374  01E5  0086               	movwf	6
  1375  01E6  3001               	movlw	1	; select bank2/3
  1376  01E7  0087               	movwf	7
  1377  01E8  3040               	movlw	64
  1378  01E9  0601               	xorwf	1,w
  1379  01EA  1D03               	btfss	3,2
  1380  01EB  29FF               	goto	l2238
  1381  01EC  0024               	movlb	4	; select bank4
  1382  01ED  0332               	decf	main@end_flag^(0+512),w
  1383  01EE  0433               	iorwf	(main@end_flag+1)^(0+512),w
  1384  01EF  1D03               	btfss	3,2
  1385  01F0  29FF               	goto	l2238
  1386                           
  1387                           ;blynd.c: 176: {
  1388                           ;blynd.c: 177: RX_CHK_FLAG_end2 = k;
  1389  01F1  0020               	movlb	0	; select bank0
  1390  01F2  0856               	movf	_k+1,w
  1391  01F3  0024               	movlb	4	; select bank4
  1392  01F4  00AF               	movwf	(main@RX_CHK_FLAG_end2+1)^(0+512)
  1393  01F5  0020               	movlb	0	; select bank0
  1394  01F6  0855               	movf	_k,w
  1395  01F7  0024               	movlb	4	; select bank4
  1396  01F8  00AE               	movwf	main@RX_CHK_FLAG_end2^(0+512)
  1397                           
  1398                           ;blynd.c: 178: COPY_FLAG=2;
  1399  01F9  3002               	movlw	2
  1400  01FA                     L1:	
  1401  01FA  0020               	movlb	0	; select bank0
  1402  01FB  00D1               	movwf	_COPY_FLAG
  1403  01FC  3000               	movlw	0
  1404  01FD  00D2               	movwf	_COPY_FLAG+1
  1405                           
  1406                           ;blynd.c: 179: break;
  1407  01FE  2A57               	goto	l2264
  1408  01FF                     l2238:	
  1409  01FF  3001               	movlw	1
  1410  0200  0020               	movlb	0	; select bank0
  1411  0201  07D5               	addwf	_k,f
  1412  0202  3000               	movlw	0
  1413  0203  3DD6               	addwfc	_k+1,f
  1414  0204  295E               	goto	L3
  1415  0205                     l2240:	
  1416                           ;blynd.c: 180: }
  1417                           ;blynd.c: 181: }
  1418                           ;blynd.c: 182: }
  1419                           
  1420                           
  1421                           ;blynd.c: 183: else
  1422                           ;blynd.c: 184: {
  1423                           ;blynd.c: 185: _delay((unsigned long)((10)*(16000000/4000.0))); TX1REG='P'; _delay((unsi
      +                          gned long)((1)*(16000000/4000.0))); TX1REG='K'; _delay((unsigned long)((1)*(16000000/400
      +                          0.0)));
  1424  0205  3034               	movlw	52
  1425  0206  0020               	movlb	0	; select bank0
  1426  0207  00C7               	movwf	??_main
  1427  0208  30F1               	movlw	241
  1428  0209                     u2067:	
  1429  0209  0B89               	decfsz	9,f
  1430  020A  2A09               	goto	u2067
  1431  020B  0BC7               	decfsz	??_main,f
  1432  020C  2A09               	goto	u2067
  1433  020D  3200               	nop2
  1434  020E  3050               	movlw	80
  1435  020F  0023               	movlb	3	; select bank3
  1436  0210  009A               	movwf	26	;volatile
  1437  0211  3006               	movlw	6
  1438  0212  0020               	movlb	0	; select bank0
  1439  0213  00C7               	movwf	??_main
  1440  0214  3030               	movlw	48
  1441  0215                     u2077:	
  1442  0215  0B89               	decfsz	9,f
  1443  0216  2A15               	goto	u2077
  1444  0217  0BC7               	decfsz	??_main,f
  1445  0218  2A15               	goto	u2077
  1446  0219  0000               	nop
  1447  021A  304B               	movlw	75
  1448  021B  0023               	movlb	3	; select bank3
  1449  021C  009A               	movwf	26	;volatile
  1450  021D  3006               	movlw	6
  1451  021E  0020               	movlb	0	; select bank0
  1452  021F  00C7               	movwf	??_main
  1453  0220  3030               	movlw	48
  1454  0221                     u2087:	
  1455  0221  0B89               	decfsz	9,f
  1456  0222  2A21               	goto	u2087
  1457  0223  0BC7               	decfsz	??_main,f
  1458  0224  2A21               	goto	u2087
  1459  0225  0000               	nop
  1460                           
  1461                           ;blynd.c: 186: i=0;
  1462  0226  01F2               	clrf	_i
  1463  0227  01F3               	clrf	_i+1
  1464                           
  1465                           ;blynd.c: 187: RC1STAbits.SPEN=0; RC1STAbits.SPEN=1;
  1466  0228  0023               	movlb	3	; select bank3
  1467  0229  139D               	bcf	29,7	;volatile
  1468  022A  179D               	bsf	29,7	;volatile
  1469                           
  1470                           ;blynd.c: 188: sw=0;
  1471  022B  0020               	movlb	0	; select bank0
  1472  022C  01D3               	clrf	_sw
  1473  022D  01D4               	clrf	_sw+1
  1474                           
  1475                           ;blynd.c: 189: for(k = 0; k< 15; k++)
  1476  022E  01D5               	clrf	_k
  1477  022F  01D6               	clrf	_k+1
  1478  0230  0856               	movf	_k+1,w
  1479  0231  3A80               	xorlw	128
  1480  0232  00C7               	movwf	??_main
  1481  0233  3080               	movlw	128
  1482  0234  0247               	subwf	??_main,w
  1483  0235  1D03               	skipz
  1484  0236  2A39               	goto	u1855
  1485  0237  300F               	movlw	15
  1486  0238  0255               	subwf	_k,w
  1487  0239                     u1855:	
  1488  0239  1803               	btfsc	3,0
  1489  023A  2A54               	goto	l2262
  1490  023B                     l2256:	
  1491                           
  1492                           ;blynd.c: 190: {
  1493                           ;blynd.c: 191: name[k] = '#';
  1494  023B  3023               	movlw	35
  1495  023C  0020               	movlb	0	; select bank0
  1496  023D  00C7               	movwf	??_main
  1497  023E  0855               	movf	_k,w
  1498  023F  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  1499  0240  0086               	movwf	6
  1500  0241  3001               	movlw	1	; select bank2/3
  1501  0242  0087               	movwf	7
  1502  0243  0847               	movf	??_main,w
  1503  0244  0081               	movwf	1
  1504  0245  3001               	movlw	1
  1505  0246  07D5               	addwf	_k,f
  1506  0247  3000               	movlw	0
  1507  0248  3DD6               	addwfc	_k+1,f
  1508  0249  0856               	movf	_k+1,w
  1509  024A  3A80               	xorlw	128
  1510  024B  00C7               	movwf	??_main
  1511  024C  3080               	movlw	128
  1512  024D  0247               	subwf	??_main,w
  1513  024E  1D03               	skipz
  1514  024F  2A52               	goto	u1865
  1515  0250  300F               	movlw	15
  1516  0251  0255               	subwf	_k,w
  1517  0252                     u1865:	
  1518  0252  1C03               	skipc
  1519  0253  2A3B               	goto	l2256
  1520  0254                     l2262:	
  1521                           
  1522                           ;blynd.c: 192: }
  1523                           ;blynd.c: 193: COPY_FLAG=0;
  1524  0254  0020               	movlb	0	; select bank0
  1525  0255  01D1               	clrf	_COPY_FLAG
  1526  0256  01D2               	clrf	_COPY_FLAG+1
  1527  0257                     l2264:	
  1528                           
  1529                           ;blynd.c: 194: }
  1530                           ;blynd.c: 197: if(COPY_FLAG==1)
  1531  0257  0020               	movlb	0	; select bank0
  1532  0258  0351               	decf	_COPY_FLAG,w
  1533  0259  0452               	iorwf	_COPY_FLAG+1,w
  1534  025A  1D03               	btfss	3,2
  1535  025B  2A6B               	goto	l2270
  1536                           
  1537                           ;blynd.c: 198: {
  1538                           ;blynd.c: 199: copy_frame(RX_CHK_FLAG_start1,RX_CHK_FLAG_end1);
  1539  025C  0024               	movlb	4	; select bank4
  1540  025D  0829               	movf	(main@RX_CHK_FLAG_start1+1)^(0+512),w
  1541  025E  0020               	movlb	0	; select bank0
  1542  025F  00A1               	movwf	copy_frame@start+1
  1543  0260  0024               	movlb	4	; select bank4
  1544  0261  0828               	movf	main@RX_CHK_FLAG_start1^(0+512),w
  1545  0262  0020               	movlb	0	; select bank0
  1546  0263  00A0               	movwf	copy_frame@start
  1547  0264  0024               	movlb	4	; select bank4
  1548  0265  082D               	movf	(main@RX_CHK_FLAG_end1+1)^(0+512),w
  1549  0266  0020               	movlb	0	; select bank0
  1550  0267  00A3               	movwf	copy_frame@end+1
  1551  0268  0024               	movlb	4	; select bank4
  1552  0269  082C               	movf	main@RX_CHK_FLAG_end1^(0+512),w
  1553  026A  2A7F               	goto	L2
  1554  026B                     l2270:	
  1555                           ;blynd.c: 203: }
  1556                           
  1557                           ;blynd.c: 202: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1558                           
  1559                           
  1560                           ;blynd.c: 204: else if(COPY_FLAG==2)
  1561  026B  3002               	movlw	2
  1562  026C  0020               	movlb	0	; select bank0
  1563  026D  0651               	xorwf	_COPY_FLAG,w
  1564  026E  0452               	iorwf	_COPY_FLAG+1,w
  1565  026F  1D03               	btfss	3,2
  1566  0270  2AAD               	goto	l2276
  1567                           
  1568                           ;blynd.c: 205: {
  1569                           ;blynd.c: 206: copy_frame(RX_CHK_FLAG_start2,RX_CHK_FLAG_end2);
  1570  0271  0024               	movlb	4	; select bank4
  1571  0272  082B               	movf	(main@RX_CHK_FLAG_start2+1)^(0+512),w
  1572  0273  0020               	movlb	0	; select bank0
  1573  0274  00A1               	movwf	copy_frame@start+1
  1574  0275  0024               	movlb	4	; select bank4
  1575  0276  082A               	movf	main@RX_CHK_FLAG_start2^(0+512),w
  1576  0277  0020               	movlb	0	; select bank0
  1577  0278  00A0               	movwf	copy_frame@start
  1578  0279  0024               	movlb	4	; select bank4
  1579  027A  082F               	movf	(main@RX_CHK_FLAG_end2+1)^(0+512),w
  1580  027B  0020               	movlb	0	; select bank0
  1581  027C  00A3               	movwf	copy_frame@end+1
  1582  027D  0024               	movlb	4	; select bank4
  1583  027E  082E               	movf	main@RX_CHK_FLAG_end2^(0+512),w
  1584  027F                     L2:	
  1585  027F  0020               	movlb	0	; select bank0
  1586  0280  00A2               	movwf	copy_frame@end
  1587  0281  3186  2601  3180   	fcall	_copy_frame
  1588                           
  1589                           ;blynd.c: 207: ACTION(copy[2], copy[3], copy[4], copy[5], copy[6], copy[7],copy[8]);
  1590  0284  0022               	movlb	2	; select bank2
  1591  0285  0823               	movf	(_copy^(0+256)+3),w
  1592  0286  0020               	movlb	0	; select bank0
  1593  0287  00C7               	movwf	??_main
  1594  0288  0847               	movf	??_main,w
  1595  0289  00AE               	movwf	ACTION@Switch_Num_1s
  1596  028A  0022               	movlb	2	; select bank2
  1597  028B  0824               	movf	(_copy^(0+256)+4),w
  1598  028C  0020               	movlb	0	; select bank0
  1599  028D  00C8               	movwf	??_main+1
  1600  028E  0848               	movf	??_main+1,w
  1601  028F  00AF               	movwf	ACTION@sw_status
  1602  0290  0022               	movlb	2	; select bank2
  1603  0291  0825               	movf	(_copy^(0+256)+5),w
  1604  0292  0020               	movlb	0	; select bank0
  1605  0293  00C9               	movwf	??_main+2
  1606  0294  0849               	movf	??_main+2,w
  1607  0295  00B0               	movwf	ACTION@speed_bit1
  1608  0296  0022               	movlb	2	; select bank2
  1609  0297  0826               	movf	(_copy^(0+256)+6),w
  1610  0298  0020               	movlb	0	; select bank0
  1611  0299  00CA               	movwf	??_main+3
  1612  029A  084A               	movf	??_main+3,w
  1613  029B  00B1               	movwf	ACTION@speed_bit2
  1614  029C  0022               	movlb	2	; select bank2
  1615  029D  0827               	movf	(_copy^(0+256)+7),w
  1616  029E  0020               	movlb	0	; select bank0
  1617  029F  00CB               	movwf	??_main+4
  1618  02A0  084B               	movf	??_main+4,w
  1619  02A1  00B2               	movwf	ACTION@parent
  1620  02A2  0022               	movlb	2	; select bank2
  1621  02A3  0828               	movf	(_copy^(0+256)+8),w
  1622  02A4  0020               	movlb	0	; select bank0
  1623  02A5  00CC               	movwf	??_main+5
  1624  02A6  084C               	movf	??_main+5,w
  1625  02A7  00B3               	movwf	ACTION@finalFrameStat
  1626  02A8  0022               	movlb	2	; select bank2
  1627  02A9  0822               	movf	(_copy^(0+256)+2),w
  1628  02AA  3183  23E4  3180   	fcall	_ACTION
  1629  02AD                     l2276:	
  1630                           
  1631                           ;blynd.c: 209: }
  1632                           ;blynd.c: 211: }
  1633                           ;blynd.c: 216: if(child_LOCK[1]==0 && RF7==0 && M1==0)
  1634  02AD  0023               	movlb	3	; select bank3
  1635  02AE  0822               	movf	(_child_LOCK^(0+384)+2),w
  1636  02AF  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1637  02B0  1D03               	btfss	3,2
  1638  02B1  2AE9               	goto	l2300
  1639  02B2  0025               	movlb	5	; select bank5
  1640  02B3  1B8C               	btfsc	12,7	;volatile
  1641  02B4  2AE9               	goto	l2300
  1642  02B5  0020               	movlb	0	; select bank0
  1643  02B6  084F               	movf	_M1,w
  1644  02B7  0450               	iorwf	_M1+1,w
  1645  02B8  1D03               	btfss	3,2
  1646  02B9  2AE9               	goto	l2300
  1647                           
  1648                           ;blynd.c: 217: {
  1649                           ;blynd.c: 218: if(man==1)
  1650  02BA  035B               	decf	_man,w
  1651  02BB  045C               	iorwf	_man+1,w
  1652  02BC  1D03               	btfss	3,2
  1653  02BD  2AE0               	goto	l2296
  1654                           
  1655                           ;blynd.c: 219: {
  1656                           ;blynd.c: 220: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1657  02BE  3052               	movlw	82
  1658  02BF  00C7               	movwf	??_main
  1659  02C0  0847               	movf	??_main,w
  1660  02C1  0021               	movlb	1	; select bank1
  1661  02C2  00A1               	movwf	(_st^(0+128)+1)
  1662  02C3  3030               	movlw	48
  1663  02C4  0020               	movlb	0	; select bank0
  1664  02C5  00C7               	movwf	??_main
  1665  02C6  0847               	movf	??_main,w
  1666  02C7  0021               	movlb	1	; select bank1
  1667  02C8  00A2               	movwf	(_st^(0+128)+2)
  1668  02C9  3030               	movlw	48
  1669  02CA  0020               	movlb	0	; select bank0
  1670  02CB  00C7               	movwf	??_main
  1671  02CC  0847               	movf	??_main,w
  1672  02CD  0021               	movlb	1	; select bank1
  1673  02CE  00A3               	movwf	(_st^(0+128)+3)
  1674  02CF  3031               	movlw	49
  1675  02D0  0020               	movlb	0	; select bank0
  1676  02D1  00C7               	movwf	??_main
  1677  02D2  0847               	movf	??_main,w
  1678  02D3  0021               	movlb	1	; select bank1
  1679  02D4  00A4               	movwf	(_st^(0+128)+4)
  1680  02D5  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1681  02D6  3186  26B0  3180   	fcall	_writeUART
  1682                           
  1683                           ;blynd.c: 221: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1684  02D9  0025               	movlb	5	; select bank5
  1685  02DA  100C               	bcf	12,0	;volatile
  1686  02DB  108C               	bcf	12,1	;volatile
  1687  02DC  01F4               	clrf	_curtFlag1
  1688  02DD  01F5               	clrf	_curtFlag1+1
  1689  02DE  01F0               	clrf	_TimerCounter1
  1690  02DF  01F1               	clrf	_TimerCounter1+1
  1691  02E0                     l2296:	
  1692                           
  1693                           ;blynd.c: 222: }
  1694                           ;blynd.c: 223: M1=1; man=1;
  1695  02E0  3001               	movlw	1
  1696  02E1  0020               	movlb	0	; select bank0
  1697  02E2  00CF               	movwf	_M1
  1698  02E3  3000               	movlw	0
  1699  02E4  00D0               	movwf	_M1+1
  1700  02E5  3001               	movlw	1
  1701  02E6  00DB               	movwf	_man
  1702  02E7  3000               	movlw	0
  1703  02E8  00DC               	movwf	_man+1
  1704  02E9                     l2300:	
  1705                           
  1706                           ;blynd.c: 224: }
  1707                           ;blynd.c: 226: if(child_LOCK[1]==0 && RF7==1 && M1==1)
  1708  02E9  0023               	movlb	3	; select bank3
  1709  02EA  0822               	movf	(_child_LOCK^(0+384)+2),w
  1710  02EB  0423               	iorwf	((_child_LOCK+1)^(0+384)+2),w
  1711  02EC  1D03               	btfss	3,2
  1712  02ED  2B48               	goto	l2338
  1713  02EE  0025               	movlb	5	; select bank5
  1714  02EF  1F8C               	btfss	12,7	;volatile
  1715  02F0  2B48               	goto	l2338
  1716  02F1  0020               	movlb	0	; select bank0
  1717  02F2  034F               	decf	_M1,w
  1718  02F3  0450               	iorwf	_M1+1,w
  1719  02F4  1D03               	btfss	3,2
  1720  02F5  2B48               	goto	l2338
  1721                           
  1722                           ;blynd.c: 227: {
  1723                           ;blynd.c: 228: if(man==1)
  1724  02F6  035B               	decf	_man,w
  1725  02F7  045C               	iorwf	_man+1,w
  1726  02F8  1D03               	btfss	3,2
  1727  02F9  2B42               	goto	l2336
  1728                           
  1729                           ;blynd.c: 229: {
  1730                           ;blynd.c: 230: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1731  02FA  3052               	movlw	82
  1732  02FB  00C7               	movwf	??_main
  1733  02FC  0847               	movf	??_main,w
  1734  02FD  0021               	movlb	1	; select bank1
  1735  02FE  00A5               	movwf	(_st^(0+128)+5)
  1736  02FF  3030               	movlw	48
  1737  0300  0020               	movlb	0	; select bank0
  1738  0301  00C7               	movwf	??_main
  1739  0302  0847               	movf	??_main,w
  1740  0303  0021               	movlb	1	; select bank1
  1741  0304  00A6               	movwf	(_st^(0+128)+6)
  1742  0305  3030               	movlw	48
  1743  0306  0020               	movlb	0	; select bank0
  1744  0307  00C7               	movwf	??_main
  1745  0308  0847               	movf	??_main,w
  1746  0309  0021               	movlb	1	; select bank1
  1747  030A  00A7               	movwf	(_st^(0+128)+7)
  1748  030B  3032               	movlw	50
  1749  030C  0020               	movlb	0	; select bank0
  1750  030D  00C7               	movwf	??_main
  1751  030E  0847               	movf	??_main,w
  1752  030F  0021               	movlb	1	; select bank1
  1753  0310  00A8               	movwf	(_st^(0+128)+8)
  1754  0311  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1755  0312  3186  26B0  3180   	fcall	_writeUART
  1756                           
  1757                           ;blynd.c: 231: RF0=0;
  1758  0315  0025               	movlb	5	; select bank5
  1759  0316  100C               	bcf	12,0	;volatile
  1760                           
  1761                           ;blynd.c: 232: st[1]='R'; st[2]='1'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1762  0317  3052               	movlw	82
  1763  0318  0020               	movlb	0	; select bank0
  1764  0319  00C7               	movwf	??_main
  1765  031A  0847               	movf	??_main,w
  1766  031B  0021               	movlb	1	; select bank1
  1767  031C  00A1               	movwf	(_st^(0+128)+1)
  1768  031D  3031               	movlw	49
  1769  031E  0020               	movlb	0	; select bank0
  1770  031F  00C7               	movwf	??_main
  1771  0320  0847               	movf	??_main,w
  1772  0321  0021               	movlb	1	; select bank1
  1773  0322  00A2               	movwf	(_st^(0+128)+2)
  1774  0323  3030               	movlw	48
  1775  0324  0020               	movlb	0	; select bank0
  1776  0325  00C7               	movwf	??_main
  1777  0326  0847               	movf	??_main,w
  1778  0327  0021               	movlb	1	; select bank1
  1779  0328  00A3               	movwf	(_st^(0+128)+3)
  1780  0329  3031               	movlw	49
  1781  032A  0020               	movlb	0	; select bank0
  1782  032B  00C7               	movwf	??_main
  1783  032C  0847               	movf	??_main,w
  1784  032D  0021               	movlb	1	; select bank1
  1785  032E  00A4               	movwf	(_st^(0+128)+4)
  1786  032F  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1787  0330  3186  26B0  3180   	fcall	_writeUART
  1788                           
  1789                           ;blynd.c: 233: RF1=1; curtFlag1=1; TimerCounter1=0;
  1790  0333  0025               	movlb	5	; select bank5
  1791  0334  148C               	bsf	12,1	;volatile
  1792  0335  3001               	movlw	1
  1793  0336  00F4               	movwf	_curtFlag1
  1794  0337  3000               	movlw	0
  1795  0338  00F5               	movwf	_curtFlag1+1
  1796  0339  01F0               	clrf	_TimerCounter1
  1797  033A  01F1               	clrf	_TimerCounter1+1
  1798                           
  1799                           ;blynd.c: 234: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1800  033B  300B               	movlw	11
  1801  033C  0020               	movlb	0	; select bank0
  1802  033D  0097               	movwf	23	;volatile
  1803  033E  30DC               	movlw	220
  1804  033F  0096               	movwf	22	;volatile
  1805  0340  1011               	bcf	17,0	;volatile
  1806  0341  1418               	bsf	24,0	;volatile
  1807  0342                     l2336:	
  1808                           
  1809                           ;blynd.c: 235: }
  1810                           ;blynd.c: 236: M1=0; man=1;
  1811  0342  01CF               	clrf	_M1
  1812  0343  01D0               	clrf	_M1+1
  1813  0344  3001               	movlw	1
  1814  0345  00DB               	movwf	_man
  1815  0346  3000               	movlw	0
  1816  0347  00DC               	movwf	_man+1
  1817  0348                     l2338:	
  1818                           
  1819                           ;blynd.c: 237: }
  1820                           ;blynd.c: 240: if(child_LOCK[3]==0 && RF5==0 && M2==0)
  1821  0348  0023               	movlb	3	; select bank3
  1822  0349  0826               	movf	(_child_LOCK^(0+384)+6),w
  1823  034A  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1824  034B  1D03               	btfss	3,2
  1825  034C  2B84               	goto	l2362
  1826  034D  0025               	movlb	5	; select bank5
  1827  034E  1A8C               	btfsc	12,5	;volatile
  1828  034F  2B84               	goto	l2362
  1829  0350  0020               	movlb	0	; select bank0
  1830  0351  084D               	movf	_M2,w
  1831  0352  044E               	iorwf	_M2+1,w
  1832  0353  1D03               	btfss	3,2
  1833  0354  2B84               	goto	l2362
  1834                           
  1835                           ;blynd.c: 241: {
  1836                           ;blynd.c: 242: if(man==1){
  1837  0355  035B               	decf	_man,w
  1838  0356  045C               	iorwf	_man+1,w
  1839  0357  1D03               	btfss	3,2
  1840  0358  2B7B               	goto	l2358
  1841                           
  1842                           ;blynd.c: 243: st[5]='R'; st[6]='0'; st[7]='0'; st[8]='2';
  1843  0359  3052               	movlw	82
  1844  035A  00C7               	movwf	??_main
  1845  035B  0847               	movf	??_main,w
  1846  035C  0021               	movlb	1	; select bank1
  1847  035D  00A5               	movwf	(_st^(0+128)+5)
  1848  035E  3030               	movlw	48
  1849  035F  0020               	movlb	0	; select bank0
  1850  0360  00C7               	movwf	??_main
  1851  0361  0847               	movf	??_main,w
  1852  0362  0021               	movlb	1	; select bank1
  1853  0363  00A6               	movwf	(_st^(0+128)+6)
  1854  0364  3030               	movlw	48
  1855  0365  0020               	movlb	0	; select bank0
  1856  0366  00C7               	movwf	??_main
  1857  0367  0847               	movf	??_main,w
  1858  0368  0021               	movlb	1	; select bank1
  1859  0369  00A7               	movwf	(_st^(0+128)+7)
  1860  036A  3032               	movlw	50
  1861  036B  0020               	movlb	0	; select bank0
  1862  036C  00C7               	movwf	??_main
  1863  036D  0847               	movf	??_main,w
  1864  036E  0021               	movlb	1	; select bank1
  1865  036F  00A8               	movwf	(_st^(0+128)+8)
  1866                           
  1867                           ;blynd.c: 244: writeUART(st+5);
  1868  0370  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1869  0371  3186  26B0  3180   	fcall	_writeUART
  1870                           
  1871                           ;blynd.c: 245: RF0=0; RF1=0; curtFlag1=0; TimerCounter1=0;
  1872  0374  0025               	movlb	5	; select bank5
  1873  0375  100C               	bcf	12,0	;volatile
  1874  0376  108C               	bcf	12,1	;volatile
  1875  0377  01F4               	clrf	_curtFlag1
  1876  0378  01F5               	clrf	_curtFlag1+1
  1877  0379  01F0               	clrf	_TimerCounter1
  1878  037A  01F1               	clrf	_TimerCounter1+1
  1879  037B                     l2358:	
  1880                           
  1881                           ;blynd.c: 246: }
  1882                           ;blynd.c: 247: M2=1; man=1;
  1883  037B  3001               	movlw	1
  1884  037C  0020               	movlb	0	; select bank0
  1885  037D  00CD               	movwf	_M2
  1886  037E  3000               	movlw	0
  1887  037F  00CE               	movwf	_M2+1
  1888  0380  3001               	movlw	1
  1889  0381  00DB               	movwf	_man
  1890  0382  3000               	movlw	0
  1891  0383  00DC               	movwf	_man+1
  1892  0384                     l2362:	
  1893                           
  1894                           ;blynd.c: 248: }
  1895                           ;blynd.c: 250: if(child_LOCK[3]==0 && RF5==1 && M2==1)
  1896  0384  0023               	movlb	3	; select bank3
  1897  0385  0826               	movf	(_child_LOCK^(0+384)+6),w
  1898  0386  0427               	iorwf	((_child_LOCK+1)^(0+384)+6),w
  1899  0387  1D03               	btfss	3,2
  1900  0388  293E               	goto	l2186
  1901  0389  0025               	movlb	5	; select bank5
  1902  038A  1E8C               	btfss	12,5	;volatile
  1903  038B  293E               	goto	l2186
  1904  038C  0020               	movlb	0	; select bank0
  1905  038D  034D               	decf	_M2,w
  1906  038E  044E               	iorwf	_M2+1,w
  1907  038F  1D03               	btfss	3,2
  1908  0390  293E               	goto	l2186
  1909                           
  1910                           ;blynd.c: 251: {
  1911                           ;blynd.c: 252: if(man==1){
  1912  0391  035B               	decf	_man,w
  1913  0392  045C               	iorwf	_man+1,w
  1914  0393  1D03               	btfss	3,2
  1915  0394  2BDD               	goto	l2398
  1916                           
  1917                           ;blynd.c: 253: st[1]='R'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  1918  0395  3052               	movlw	82
  1919  0396  00C7               	movwf	??_main
  1920  0397  0847               	movf	??_main,w
  1921  0398  0021               	movlb	1	; select bank1
  1922  0399  00A1               	movwf	(_st^(0+128)+1)
  1923  039A  3030               	movlw	48
  1924  039B  0020               	movlb	0	; select bank0
  1925  039C  00C7               	movwf	??_main
  1926  039D  0847               	movf	??_main,w
  1927  039E  0021               	movlb	1	; select bank1
  1928  039F  00A2               	movwf	(_st^(0+128)+2)
  1929  03A0  3030               	movlw	48
  1930  03A1  0020               	movlb	0	; select bank0
  1931  03A2  00C7               	movwf	??_main
  1932  03A3  0847               	movf	??_main,w
  1933  03A4  0021               	movlb	1	; select bank1
  1934  03A5  00A3               	movwf	(_st^(0+128)+3)
  1935  03A6  3031               	movlw	49
  1936  03A7  0020               	movlb	0	; select bank0
  1937  03A8  00C7               	movwf	??_main
  1938  03A9  0847               	movf	??_main,w
  1939  03AA  0021               	movlb	1	; select bank1
  1940  03AB  00A4               	movwf	(_st^(0+128)+4)
  1941  03AC  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  1942  03AD  3186  26B0  3180   	fcall	_writeUART
  1943                           
  1944                           ;blynd.c: 254: RF1=0;
  1945  03B0  0025               	movlb	5	; select bank5
  1946  03B1  108C               	bcf	12,1	;volatile
  1947                           
  1948                           ;blynd.c: 255: st[5]='R'; st[6]='1'; st[7]='0'; st[8]='2'; writeUART(st+5);
  1949  03B2  3052               	movlw	82
  1950  03B3  0020               	movlb	0	; select bank0
  1951  03B4  00C7               	movwf	??_main
  1952  03B5  0847               	movf	??_main,w
  1953  03B6  0021               	movlb	1	; select bank1
  1954  03B7  00A5               	movwf	(_st^(0+128)+5)
  1955  03B8  3031               	movlw	49
  1956  03B9  0020               	movlb	0	; select bank0
  1957  03BA  00C7               	movwf	??_main
  1958  03BB  0847               	movf	??_main,w
  1959  03BC  0021               	movlb	1	; select bank1
  1960  03BD  00A6               	movwf	(_st^(0+128)+6)
  1961  03BE  3030               	movlw	48
  1962  03BF  0020               	movlb	0	; select bank0
  1963  03C0  00C7               	movwf	??_main
  1964  03C1  0847               	movf	??_main,w
  1965  03C2  0021               	movlb	1	; select bank1
  1966  03C3  00A7               	movwf	(_st^(0+128)+7)
  1967  03C4  3032               	movlw	50
  1968  03C5  0020               	movlb	0	; select bank0
  1969  03C6  00C7               	movwf	??_main
  1970  03C7  0847               	movf	??_main,w
  1971  03C8  0021               	movlb	1	; select bank1
  1972  03C9  00A8               	movwf	(_st^(0+128)+8)
  1973  03CA  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  1974  03CB  3186  26B0  3180   	fcall	_writeUART
  1975                           
  1976                           ;blynd.c: 256: RF0=1; curtFlag1=1; TimerCounter1=0;
  1977  03CE  0025               	movlb	5	; select bank5
  1978  03CF  140C               	bsf	12,0	;volatile
  1979  03D0  3001               	movlw	1
  1980  03D1  00F4               	movwf	_curtFlag1
  1981  03D2  3000               	movlw	0
  1982  03D3  00F5               	movwf	_curtFlag1+1
  1983  03D4  01F0               	clrf	_TimerCounter1
  1984  03D5  01F1               	clrf	_TimerCounter1+1
  1985                           
  1986                           ;blynd.c: 257: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  1987  03D6  300B               	movlw	11
  1988  03D7  0020               	movlb	0	; select bank0
  1989  03D8  0097               	movwf	23	;volatile
  1990  03D9  30DC               	movlw	220
  1991  03DA  0096               	movwf	22	;volatile
  1992  03DB  1011               	bcf	17,0	;volatile
  1993  03DC  1418               	bsf	24,0	;volatile
  1994  03DD                     l2398:	
  1995                           
  1996                           ;blynd.c: 258: }
  1997                           ;blynd.c: 259: M2=0; man=1;
  1998  03DD  01CD               	clrf	_M2
  1999  03DE  01CE               	clrf	_M2+1
  2000  03DF  3001               	movlw	1
  2001  03E0  00DB               	movwf	_man
  2002  03E1  3000               	movlw	0
  2003  03E2  00DC               	movwf	_man+1
  2004  03E3  293E               	goto	l2186
  2005  03E4                     __end_of_main:	
  2006                           
  2007                           	psect	text1
  2008  066B                     __ptext1:	
  2009 ;; *************** function _pin_manager *****************
  2010 ;; Defined at:
  2011 ;;		line 466 in file "blynd.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2029 ;;Total ram usage:        0 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    2
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           
  2040                           ;psect for function _pin_manager
  2041  066B                     _pin_manager:	
  2042                           
  2043                           ;blynd.c: 470: ANSELG=0x00;
  2044                           
  2045                           ;incstack = 0
  2046                           ; Regs used in _pin_manager: [wreg+status,2]
  2047  066B  0028               	movlb	8	; select bank8
  2048  066C  018D               	clrf	13	;volatile
  2049                           
  2050                           ;blynd.c: 472: WPUG = 0;
  2051  066D  0029               	movlb	9	; select bank9
  2052  066E  018D               	clrf	13	;volatile
  2053                           
  2054                           ;blynd.c: 475: ANSELF=0x00;
  2055  066F  0028               	movlb	8	; select bank8
  2056  0670  018C               	clrf	12	;volatile
  2057                           
  2058                           ;blynd.c: 476: TRISFbits.TRISF0=0;
  2059  0671  0026               	movlb	6	; select bank6
  2060  0672  100C               	bcf	12,0	;volatile
  2061                           
  2062                           ;blynd.c: 477: TRISFbits.TRISF1=0;
  2063  0673  108C               	bcf	12,1	;volatile
  2064                           
  2065                           ;blynd.c: 478: TRISFbits.TRISF2=1;
  2066  0674  150C               	bsf	12,2	;volatile
  2067                           
  2068                           ;blynd.c: 479: TRISFbits.TRISF3=1;
  2069  0675  158C               	bsf	12,3	;volatile
  2070                           
  2071                           ;blynd.c: 480: TRISFbits.TRISF4=1;
  2072  0676  160C               	bsf	12,4	;volatile
  2073                           
  2074                           ;blynd.c: 481: TRISFbits.TRISF5=1;
  2075  0677  168C               	bsf	12,5	;volatile
  2076                           
  2077                           ;blynd.c: 482: TRISFbits.TRISF6=1;
  2078  0678  170C               	bsf	12,6	;volatile
  2079                           
  2080                           ;blynd.c: 483: TRISFbits.TRISF7=1;
  2081  0679  178C               	bsf	12,7	;volatile
  2082                           
  2083                           ;blynd.c: 486: WPUE=0x00;
  2084  067A  0024               	movlb	4	; select bank4
  2085  067B  0190               	clrf	16	;volatile
  2086                           
  2087                           ;blynd.c: 487: ANSELE=0x00;
  2088  067C  0023               	movlb	3	; select bank3
  2089  067D  0190               	clrf	16	;volatile
  2090                           
  2091                           ;blynd.c: 492: WPUD=0x00;
  2092  067E  0024               	movlb	4	; select bank4
  2093  067F  018F               	clrf	15	;volatile
  2094                           
  2095                           ;blynd.c: 493: ANSELD=0x00;
  2096  0680  0023               	movlb	3	; select bank3
  2097  0681  018F               	clrf	15	;volatile
  2098                           
  2099                           ;blynd.c: 494: TRISD=0xFF;
  2100  0682  30FF               	movlw	255
  2101  0683  0021               	movlb	1	; select bank1
  2102  0684  008F               	movwf	15	;volatile
  2103                           
  2104                           ;blynd.c: 501: ANSELB=0x00;
  2105  0685  0023               	movlb	3	; select bank3
  2106  0686  018D               	clrf	13	;volatile
  2107                           
  2108                           ;blynd.c: 504: WPUB = 0x00;
  2109  0687  0024               	movlb	4	; select bank4
  2110  0688  018D               	clrf	13	;volatile
  2111                           
  2112                           ;blynd.c: 507: ANSELA = 0x00;
  2113  0689  0023               	movlb	3	; select bank3
  2114  068A  018C               	clrf	12	;volatile
  2115                           
  2116                           ;blynd.c: 521: TRISCbits.TRISC6 = 0;
  2117  068B  0021               	movlb	1	; select bank1
  2118  068C  130E               	bcf	14,6	;volatile
  2119                           
  2120                           ;blynd.c: 522: TRISCbits.TRISC7 = 1;
  2121  068D  178E               	bsf	14,7	;volatile
  2122  068E  0008               	return
  2123  068F                     __end_of_pin_manager:	
  2124                           
  2125                           	psect	text2
  2126  0742                     __ptext2:	
  2127 ;; *************** function _periperal_init *****************
  2128 ;; Defined at:
  2129 ;;		line 127 in file "blynd.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0, pclath, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        0 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    3
  2150 ;; This function calls:
  2151 ;;		_EUSART_Initialize
  2152 ;;		_TMR1_Initialize
  2153 ;;		_TMR3_Initialize
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _periperal_init
  2161  0742                     _periperal_init:	
  2162                           
  2163                           ;blynd.c: 128: EUSART_Initialize();
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _periperal_init: [wreg+status,2+status,0+pclath+cstack]
  2167  0742  3187  2702  3187   	fcall	_EUSART_Initialize
  2168                           
  2169                           ;blynd.c: 129: TMR1_Initialize();
  2170  0745  3187  2736  3187   	fcall	_TMR1_Initialize
  2171                           
  2172                           ;blynd.c: 130: TMR3_Initialize();
  2173  0748  3187  2718         	fcall	_TMR3_Initialize
  2174  074A  0008               	return
  2175  074B                     __end_of_periperal_init:	
  2176                           
  2177                           	psect	text3
  2178  0718                     __ptext3:	
  2179 ;; *************** function _TMR3_Initialize *****************
  2180 ;; Defined at:
  2181 ;;		line 435 in file "blynd.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    2
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_periperal_init
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           
  2210                           ;psect for function _TMR3_Initialize
  2211  0718                     _TMR3_Initialize:	
  2212                           
  2213                           ;blynd.c: 439: T3CON = 0x30;
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _TMR3_Initialize: [wreg+status,2]
  2217  0718  3030               	movlw	48
  2218  0719  0028               	movlb	8	; select bank8
  2219  071A  0093               	movwf	19	;volatile
  2220                           
  2221                           ;blynd.c: 442: T3GCON = 0x00;
  2222  071B  0194               	clrf	20	;volatile
  2223                           
  2224                           ;blynd.c: 445: TMR3H = 0x00;
  2225  071C  0192               	clrf	18	;volatile
  2226                           
  2227                           ;blynd.c: 448: TMR3L = 0x00;
  2228  071D  0191               	clrf	17	;volatile
  2229                           
  2230                           ;blynd.c: 451: PIR3bits.TMR3IF = 0;
  2231  071E  0020               	movlb	0	; select bank0
  2232  071F  1013               	bcf	19,0	;volatile
  2233                           
  2234                           ;blynd.c: 454: PIE3bits.TMR3IE = 1;
  2235  0720  0021               	movlb	1	; select bank1
  2236  0721  1413               	bsf	19,0	;volatile
  2237                           
  2238                           ;blynd.c: 457: T1CONbits.TMR1ON = 1;
  2239  0722  0020               	movlb	0	; select bank0
  2240  0723  1418               	bsf	24,0	;volatile
  2241                           
  2242                           ;blynd.c: 460: GIE = 1;
  2243  0724  178B               	bsf	11,7	;volatile
  2244                           
  2245                           ;blynd.c: 463: PEIE = 1;
  2246  0725  170B               	bsf	11,6	;volatile
  2247  0726  0008               	return
  2248  0727                     __end_of_TMR3_Initialize:	
  2249                           
  2250                           	psect	text4
  2251  0736                     __ptext4:	
  2252 ;; *************** function _TMR1_Initialize *****************
  2253 ;; Defined at:
  2254 ;;		line 404 in file "blynd.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2272 ;;Total ram usage:        0 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    2
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_periperal_init
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           
  2283                           ;psect for function _TMR1_Initialize
  2284  0736                     _TMR1_Initialize:	
  2285                           
  2286                           ;blynd.c: 408: T1CON = 0x30;
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in _TMR1_Initialize: [wreg+status,2]
  2290  0736  3030               	movlw	48
  2291  0737  0020               	movlb	0	; select bank0
  2292  0738  0098               	movwf	24	;volatile
  2293                           
  2294                           ;blynd.c: 411: T1GCON = 0x00;
  2295  0739  0199               	clrf	25	;volatile
  2296                           
  2297                           ;blynd.c: 414: TMR1H = 0x00;
  2298  073A  0197               	clrf	23	;volatile
  2299                           
  2300                           ;blynd.c: 417: TMR1L = 0x00;
  2301  073B  0196               	clrf	22	;volatile
  2302                           
  2303                           ;blynd.c: 420: PIR1bits.TMR1IF = 0;
  2304  073C  1011               	bcf	17,0	;volatile
  2305                           
  2306                           ;blynd.c: 423: PIE1bits.TMR1IE = 1;
  2307  073D  0021               	movlb	1	; select bank1
  2308  073E  1411               	bsf	17,0	;volatile
  2309                           
  2310                           ;blynd.c: 426: T1CONbits.TMR1ON = 1;
  2311  073F  0020               	movlb	0	; select bank0
  2312  0740  1418               	bsf	24,0	;volatile
  2313  0741  0008               	return
  2314  0742                     __end_of_TMR1_Initialize:	
  2315                           
  2316                           	psect	text5
  2317  0702                     __ptext5:	
  2318 ;; *************** function _EUSART_Initialize *****************
  2319 ;; Defined at:
  2320 ;;		line 365 in file "blynd.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  2338 ;;Total ram usage:        0 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    2
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_periperal_init
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _EUSART_Initialize
  2350  0702                     _EUSART_Initialize:	
  2351                           
  2352                           ;blynd.c: 367: PIE1bits.RC1IE = 0;
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _EUSART_Initialize: [wreg]
  2356  0702  0021               	movlb	1	; select bank1
  2357  0703  1291               	bcf	17,5	;volatile
  2358                           
  2359                           ;blynd.c: 368: PIE1bits.TX1IE = 0;
  2360  0704  1211               	bcf	17,4	;volatile
  2361                           
  2362                           ;blynd.c: 373: BAUD1CON = 0x0A;
  2363  0705  300A               	movlw	10
  2364  0706  0023               	movlb	3	; select bank3
  2365  0707  009F               	movwf	31	;volatile
  2366                           
  2367                           ;blynd.c: 376: RC1STA = 0x90;
  2368  0708  3090               	movlw	144
  2369  0709  009D               	movwf	29	;volatile
  2370                           
  2371                           ;blynd.c: 379: TX1STA = 0x24;
  2372  070A  3024               	movlw	36
  2373  070B  009E               	movwf	30	;volatile
  2374                           
  2375                           ;blynd.c: 384: SP1BRGL = 0xA0;
  2376  070C  30A0               	movlw	160
  2377  070D  009B               	movwf	27	;volatile
  2378                           
  2379                           ;blynd.c: 386: SP1BRGH = 0x01;
  2380  070E  3001               	movlw	1
  2381  070F  009C               	movwf	28	;volatile
  2382                           
  2383                           ;blynd.c: 389: GIE = 1;
  2384  0710  178B               	bsf	11,7	;volatile
  2385                           
  2386                           ;blynd.c: 392: PEIE = 1;
  2387  0711  170B               	bsf	11,6	;volatile
  2388                           
  2389                           ;blynd.c: 395: PIE1bits.RC1IE = 1;
  2390  0712  0021               	movlb	1	; select bank1
  2391  0713  1691               	bsf	17,5	;volatile
  2392                           
  2393                           ;blynd.c: 398: TX1STAbits.TXEN = 1;
  2394  0714  0023               	movlb	3	; select bank3
  2395  0715  169E               	bsf	30,5	;volatile
  2396                           
  2397                           ;blynd.c: 401: RC1STAbits.SPEN = 1;
  2398  0716  179D               	bsf	29,7	;volatile
  2399  0717  0008               	return
  2400  0718                     __end_of_EUSART_Initialize:	
  2401                           
  2402                           	psect	text6
  2403  0601                     __ptext6:	
  2404 ;; *************** function _copy_frame *****************
  2405 ;; Defined at:
  2406 ;;		line 266 in file "blynd.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  start           2    0[BANK0 ] int 
  2409 ;;  end             2    2[BANK0 ] int 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  2422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  2423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2424 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2425 ;;Total ram usage:        5 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    2
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _copy_frame
  2437  0601                     _copy_frame:	
  2438                           
  2439                           ;blynd.c: 267: sw=0;
  2440                           
  2441                           ;incstack = 0
  2442                           ; Regs used in _copy_frame: [wreg+fsr1l+fsr1h+status,2+status,0]
  2443  0601  0020               	movlb	0	; select bank0
  2444  0602  01D3               	clrf	_sw
  2445  0603  01D4               	clrf	_sw+1
  2446                           
  2447                           ;blynd.c: 268: for(k = start; k< end; k++)
  2448  0604  0821               	movf	copy_frame@start+1,w
  2449  0605  00D6               	movwf	_k+1
  2450  0606  0820               	movf	copy_frame@start,w
  2451  0607  00D5               	movwf	_k
  2452  0608                     l224:	
  2453  0608  0856               	movf	_k+1,w
  2454  0609  3A80               	xorlw	128
  2455  060A  00A4               	movwf	??_copy_frame
  2456  060B  0823               	movf	copy_frame@end+1,w
  2457  060C  3A80               	xorlw	128
  2458  060D  0224               	subwf	??_copy_frame,w
  2459  060E  1D03               	skipz
  2460  060F  2E12               	goto	u1615
  2461  0610  0822               	movf	copy_frame@end,w
  2462  0611  0255               	subwf	_k,w
  2463  0612                     u1615:	
  2464  0612  1803               	btfsc	3,0
  2465  0613  2E35               	goto	l2044
  2466                           
  2467                           ;blynd.c: 269: {
  2468                           ;blynd.c: 270: copy[sw]=name[k];
  2469  0614  0020               	movlb	0	; select bank0
  2470  0615  0855               	movf	_k,w
  2471  0616  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2472  0617  0086               	movwf	6
  2473  0618  3001               	movlw	1	; select bank2/3
  2474  0619  0087               	movwf	7
  2475  061A  0801               	movf	1,w
  2476  061B  00A4               	movwf	??_copy_frame
  2477  061C  0853               	movf	_sw,w
  2478  061D  3E20               	addlw	(low (_copy| (0+256)))& (0+255)
  2479  061E  0086               	movwf	6
  2480  061F  3001               	movlw	1	; select bank2/3
  2481  0620  0087               	movwf	7
  2482  0621  0824               	movf	??_copy_frame,w
  2483  0622  0081               	movwf	1
  2484                           
  2485                           ;blynd.c: 271: sw++;
  2486  0623  3001               	movlw	1
  2487  0624  07D3               	addwf	_sw,f
  2488  0625  3000               	movlw	0
  2489  0626  3DD4               	addwfc	_sw+1,f
  2490                           
  2491                           ;blynd.c: 272: name[k] = '#';
  2492  0627  3023               	movlw	35
  2493  0628  00A4               	movwf	??_copy_frame
  2494  0629  0855               	movf	_k,w
  2495  062A  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  2496  062B  0086               	movwf	6
  2497  062C  3001               	movlw	1	; select bank2/3
  2498  062D  0087               	movwf	7
  2499  062E  0824               	movf	??_copy_frame,w
  2500  062F  0081               	movwf	1
  2501  0630  3001               	movlw	1
  2502  0631  07D5               	addwf	_k,f
  2503  0632  3000               	movlw	0
  2504  0633  3DD6               	addwfc	_k+1,f
  2505  0634  2E08               	goto	l224
  2506  0635                     l2044:	
  2507                           
  2508                           ;blynd.c: 273: }
  2509                           ;blynd.c: 278: COPY_FLAG=0;
  2510  0635  0020               	movlb	0	; select bank0
  2511  0636  01D1               	clrf	_COPY_FLAG
  2512  0637  01D2               	clrf	_COPY_FLAG+1
  2513  0638  0008               	return
  2514  0639                     __end_of_copy_frame:	
  2515                           
  2516                           	psect	text7
  2517  03E4                     __ptext7:	
  2518 ;; *************** function _ACTION *****************
  2519 ;; Defined at:
  2520 ;;		line 281 in file "blynd.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  Switch_Num_1    1    wreg     unsigned char 
  2523 ;;  Switch_Num_1    1   14[BANK0 ] unsigned char 
  2524 ;;  sw_status       1   15[BANK0 ] unsigned char 
  2525 ;;  speed_bit1      1   16[BANK0 ] unsigned char 
  2526 ;;  speed_bit2      1   17[BANK0 ] unsigned char 
  2527 ;;  parent          1   18[BANK0 ] unsigned char 
  2528 ;;  finalFrameSt    1   19[BANK0 ] unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  Switch_Num_1    1   28[BANK0 ] unsigned char 
  2531 ;;  SwNumString     2   31[BANK0 ] unsigned char [2]
  2532 ;;  FanSpeedStri    2   29[BANK0 ] unsigned char [2]
  2533 ;;  child_lock_n    2   26[BANK0 ] int 
  2534 ;;  children        2   24[BANK0 ] int 
  2535 ;;  FanSpeed        2   22[BANK0 ] int 
  2536 ;;  response_sta    2   37[BANK0 ] int 
  2537 ;;  switch_statu    2   35[BANK0 ] int 
  2538 ;;  SwNum           2   33[BANK0 ] int 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2548 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  2549 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0
  2550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  2551 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0
  2552 ;;Total ram usage:       25 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    4
  2555 ;; This function calls:
  2556 ;;		_atoi
  2557 ;;		_writeUART
  2558 ;; This function is called by:
  2559 ;;		_main
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           
  2564                           ;psect for function _ACTION
  2565  03E4                     _ACTION:	
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _ACTION: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2569                           ;ACTION@Switch_Num_10s stored from wreg
  2570  03E4  0020               	movlb	0	; select bank0
  2571  03E5  00BC               	movwf	ACTION@Switch_Num_10s
  2572                           
  2573                           ;blynd.c: 283: int response_starts=0;
  2574  03E6  01C5               	clrf	ACTION@response_starts
  2575  03E7  01C6               	clrf	ACTION@response_starts+1
  2576                           
  2577                           ;blynd.c: 284: int switch_status=0;
  2578  03E8  01C3               	clrf	ACTION@switch_status
  2579  03E9  01C4               	clrf	ACTION@switch_status+1
  2580                           
  2581                           ;blynd.c: 285: int SwNum=0;
  2582  03EA  01C1               	clrf	ACTION@SwNum
  2583  03EB  01C2               	clrf	ACTION@SwNum+1
  2584                           
  2585                           ;blynd.c: 287: if(Switch_Num_1s != 'T')
  2586  03EC  3054               	movlw	84
  2587  03ED  062E               	xorwf	ACTION@Switch_Num_1s,w
  2588  03EE  1903               	btfsc	3,2
  2589  03EF  2D00               	goto	l2150
  2590                           
  2591                           ;blynd.c: 288: {
  2592                           ;blynd.c: 289: unsigned char FanSpeedString[2], SwNumString[2];
  2593                           ;blynd.c: 290: int FanSpeed=0;
  2594  03F0  01B6               	clrf	ACTION@FanSpeed
  2595  03F1  01B7               	clrf	ACTION@FanSpeed+1
  2596                           
  2597                           ;blynd.c: 292: switch_status=sw_status - '0';
  2598  03F2  082F               	movf	ACTION@sw_status,w
  2599  03F3  3ED0               	addlw	208
  2600  03F4  00C3               	movwf	ACTION@switch_status
  2601  03F5  30FF               	movlw	255
  2602  03F6  1803               	skipnc
  2603  03F7  3000               	movlw	0
  2604  03F8  00C4               	movwf	ACTION@switch_status+1
  2605                           
  2606                           ;blynd.c: 294: SwNumString[0]=Switch_Num_10s;
  2607  03F9  083C               	movf	ACTION@Switch_Num_10s,w
  2608  03FA  00B4               	movwf	??_ACTION
  2609  03FB  0834               	movf	??_ACTION,w
  2610  03FC  00BF               	movwf	ACTION@SwNumString
  2611                           
  2612                           ;blynd.c: 295: SwNumString[1]=Switch_Num_1s;
  2613  03FD  082E               	movf	ACTION@Switch_Num_1s,w
  2614  03FE  00B4               	movwf	??_ACTION
  2615  03FF  0834               	movf	??_ACTION,w
  2616  0400  00C0               	movwf	ACTION@SwNumString+1
  2617                           
  2618                           ;blynd.c: 296: SwNum=atoi(SwNumString);
  2619  0401  303F               	movlw	(low (ACTION@SwNumString| 0))& (0+255)
  2620  0402  3185  250E  3183   	fcall	_atoi
  2621  0405  0020               	movlb	0	; select bank0
  2622  0406  0827               	movf	?_atoi+1,w
  2623  0407  00C2               	movwf	ACTION@SwNum+1
  2624  0408  0826               	movf	?_atoi,w
  2625  0409  00C1               	movwf	ACTION@SwNum
  2626                           
  2627                           ;blynd.c: 298: FanSpeedString[0] = speed_bit1;
  2628  040A  0830               	movf	ACTION@speed_bit1,w
  2629  040B  00B4               	movwf	??_ACTION
  2630  040C  0834               	movf	??_ACTION,w
  2631  040D  00BD               	movwf	ACTION@FanSpeedString
  2632                           
  2633                           ;blynd.c: 299: FanSpeedString[1] = speed_bit2;
  2634  040E  0831               	movf	ACTION@speed_bit2,w
  2635  040F  00B4               	movwf	??_ACTION
  2636  0410  0834               	movf	??_ACTION,w
  2637  0411  00BE               	movwf	ACTION@FanSpeedString+1
  2638                           
  2639                           ;blynd.c: 300: FanSpeed = atoi(FanSpeedString);
  2640  0412  303D               	movlw	(low (ACTION@FanSpeedString| 0))& (0+255)
  2641  0413  3185  250E  3183   	fcall	_atoi
  2642  0416  0020               	movlb	0	; select bank0
  2643  0417  0827               	movf	?_atoi+1,w
  2644  0418  00B7               	movwf	ACTION@FanSpeed+1
  2645  0419  0826               	movf	?_atoi,w
  2646  041A  00B6               	movwf	ACTION@FanSpeed
  2647                           
  2648                           ;blynd.c: 302: int children=parent - '0';
  2649  041B  0832               	movf	ACTION@parent,w
  2650  041C  3ED0               	addlw	208
  2651  041D  00B8               	movwf	ACTION@children
  2652  041E  30FF               	movlw	255
  2653  041F  1803               	skipnc
  2654  0420  3000               	movlw	0
  2655  0421  00B9               	movwf	ACTION@children+1
  2656                           
  2657                           ;blynd.c: 303: int child_lock_num=(2*(SwNum)-1);
  2658  0422  0842               	movf	ACTION@SwNum+1,w
  2659  0423  00B5               	movwf	??_ACTION+1
  2660  0424  0841               	movf	ACTION@SwNum,w
  2661  0425  00B4               	movwf	??_ACTION
  2662  0426  35B4               	lslf	??_ACTION,f
  2663  0427  0DB5               	rlf	??_ACTION+1,f
  2664  0428  0834               	movf	??_ACTION,w
  2665  0429  3EFF               	addlw	255
  2666  042A  00BA               	movwf	ACTION@child_lock_num
  2667  042B  30FF               	movlw	255
  2668  042C  3D35               	addwfc	??_ACTION+1,w
  2669  042D  00BB               	movwf	ACTION@child_lock_num+1
  2670                           
  2671                           ;blynd.c: 304: child_LOCK[child_lock_num]=children;
  2672  042E  353A               	lslf	ACTION@child_lock_num,w
  2673  042F  3EA0               	addlw	(low (_child_LOCK| (0+256)))& (0+255)
  2674  0430  0086               	movwf	6
  2675  0431  3001               	movlw	1	; select bank3/4
  2676  0432  0087               	movwf	7
  2677  0433  0838               	movf	ACTION@children,w
  2678  0434  3FC0               	movwi [0]fsr1
  2679  0435  0839               	movf	ACTION@children+1,w
  2680  0436  3FC1               	movwi [1]fsr1
  2681                           
  2682                           ;blynd.c: 306: response_starts=((1+4*(SwNum))-4);
  2683  0437  0842               	movf	ACTION@SwNum+1,w
  2684  0438  00B5               	movwf	??_ACTION+1
  2685  0439  0841               	movf	ACTION@SwNum,w
  2686  043A  00B4               	movwf	??_ACTION
  2687  043B  35B4               	lslf	??_ACTION,f
  2688  043C  0DB5               	rlf	??_ACTION+1,f
  2689  043D  35B4               	lslf	??_ACTION,f
  2690  043E  0DB5               	rlf	??_ACTION+1,f
  2691  043F  0834               	movf	??_ACTION,w
  2692  0440  3EFD               	addlw	253
  2693  0441  00C5               	movwf	ACTION@response_starts
  2694  0442  30FF               	movlw	255
  2695  0443  3D35               	addwfc	??_ACTION+1,w
  2696  0444  00C6               	movwf	ACTION@response_starts+1
  2697                           
  2698                           ;blynd.c: 307: st[response_starts++]='G';
  2699  0445  3047               	movlw	71
  2700  0446  00B4               	movwf	??_ACTION
  2701  0447  0845               	movf	ACTION@response_starts,w
  2702  0448  3EA0               	addlw	(low (_st| 0))& (0+255)
  2703  0449  0086               	movwf	6
  2704  044A  0187               	clrf	7
  2705  044B  0834               	movf	??_ACTION,w
  2706  044C  0081               	movwf	1
  2707  044D  3001               	movlw	1
  2708  044E  07C5               	addwf	ACTION@response_starts,f
  2709  044F  3000               	movlw	0
  2710  0450  3DC6               	addwfc	ACTION@response_starts+1,f
  2711                           
  2712                           ;blynd.c: 308: st[response_starts++]=sw_status;
  2713  0451  082F               	movf	ACTION@sw_status,w
  2714  0452  00B4               	movwf	??_ACTION
  2715  0453  0845               	movf	ACTION@response_starts,w
  2716  0454  3EA0               	addlw	(low (_st| 0))& (0+255)
  2717  0455  0086               	movwf	6
  2718  0456  0187               	clrf	7
  2719  0457  0834               	movf	??_ACTION,w
  2720  0458  0081               	movwf	1
  2721  0459  3001               	movlw	1
  2722  045A  07C5               	addwf	ACTION@response_starts,f
  2723  045B  3000               	movlw	0
  2724  045C  3DC6               	addwfc	ACTION@response_starts+1,f
  2725                           
  2726                           ;blynd.c: 309: st[response_starts++]=Switch_Num_10s;
  2727  045D  083C               	movf	ACTION@Switch_Num_10s,w
  2728  045E  00B4               	movwf	??_ACTION
  2729  045F  0845               	movf	ACTION@response_starts,w
  2730  0460  3EA0               	addlw	(low (_st| 0))& (0+255)
  2731  0461  0086               	movwf	6
  2732  0462  0187               	clrf	7
  2733  0463  0834               	movf	??_ACTION,w
  2734  0464  0081               	movwf	1
  2735  0465  3001               	movlw	1
  2736  0466  07C5               	addwf	ACTION@response_starts,f
  2737  0467  3000               	movlw	0
  2738  0468  3DC6               	addwfc	ACTION@response_starts+1,f
  2739                           
  2740                           ;blynd.c: 310: st[response_starts]=Switch_Num_1s;
  2741  0469  082E               	movf	ACTION@Switch_Num_1s,w
  2742  046A  00B4               	movwf	??_ACTION
  2743  046B  0845               	movf	ACTION@response_starts,w
  2744  046C  3EA0               	addlw	(low (_st| 0))& (0+255)
  2745  046D  0086               	movwf	6
  2746  046E  0187               	clrf	7
  2747  046F  0834               	movf	??_ACTION,w
  2748  0470  0081               	movwf	1
  2749                           
  2750                           ;blynd.c: 312: response_starts-=3;
  2751  0471  30FD               	movlw	253
  2752  0472  07C5               	addwf	ACTION@response_starts,f
  2753  0473  30FF               	movlw	255
  2754  0474  3DC6               	addwfc	ACTION@response_starts+1,f
  2755                           
  2756                           ;blynd.c: 313: if(finalFrameStat=='1')
  2757  0475  3031               	movlw	49
  2758  0476  0633               	xorwf	ACTION@finalFrameStat,w
  2759  0477  1D03               	btfss	3,2
  2760  0478  2C7E               	goto	l2094
  2761                           
  2762                           ;blynd.c: 314: {
  2763                           ;blynd.c: 315: writeUART(st+response_starts);
  2764  0479  0845               	movf	ACTION@response_starts,w
  2765  047A  3EA0               	addlw	(low (_st| 0))& (0+255)
  2766  047B  3186  26B0  3183   	fcall	_writeUART
  2767  047E                     l2094:	
  2768                           
  2769                           ;blynd.c: 316: }
  2770                           ;blynd.c: 317: man=0;
  2771  047E  0020               	movlb	0	; select bank0
  2772  047F  01DB               	clrf	_man
  2773  0480  01DC               	clrf	_man+1
  2774                           
  2775                           ;blynd.c: 318: }
  2776                           ;blynd.c: 320: switch(SwNum)
  2777  0481  2D00               	goto	l2150
  2778  0482                     l2096:	
  2779                           ;blynd.c: 321: {
  2780                           ;blynd.c: 322: case 1:
  2781                           
  2782                           
  2783                           ;blynd.c: 323: M1=switch_status;
  2784  0482  0844               	movf	ACTION@switch_status+1,w
  2785  0483  00D0               	movwf	_M1+1
  2786  0484  0843               	movf	ACTION@switch_status,w
  2787  0485  00CF               	movwf	_M1
  2788                           
  2789                           ;blynd.c: 324: if(switch_status==1){
  2790  0486  0343               	decf	ACTION@switch_status,w
  2791  0487  0444               	iorwf	ACTION@switch_status+1,w
  2792  0488  1D03               	btfss	3,2
  2793  0489  2CB7               	goto	l234
  2794                           
  2795                           ;blynd.c: 325: RF0=0;
  2796  048A  0025               	movlb	5	; select bank5
  2797  048B  100C               	bcf	12,0	;volatile
  2798                           
  2799                           ;blynd.c: 326: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  2800  048C  3047               	movlw	71
  2801  048D  0020               	movlb	0	; select bank0
  2802  048E  00B4               	movwf	??_ACTION
  2803  048F  0834               	movf	??_ACTION,w
  2804  0490  0021               	movlb	1	; select bank1
  2805  0491  00A5               	movwf	(_st^(0+128)+5)
  2806  0492  3030               	movlw	48
  2807  0493  0020               	movlb	0	; select bank0
  2808  0494  00B4               	movwf	??_ACTION
  2809  0495  0834               	movf	??_ACTION,w
  2810  0496  0021               	movlb	1	; select bank1
  2811  0497  00A6               	movwf	(_st^(0+128)+6)
  2812  0498  3030               	movlw	48
  2813  0499  0020               	movlb	0	; select bank0
  2814  049A  00B4               	movwf	??_ACTION
  2815  049B  0834               	movf	??_ACTION,w
  2816  049C  0021               	movlb	1	; select bank1
  2817  049D  00A7               	movwf	(_st^(0+128)+7)
  2818  049E  3032               	movlw	50
  2819  049F  0020               	movlb	0	; select bank0
  2820  04A0  00B4               	movwf	??_ACTION
  2821  04A1  0834               	movf	??_ACTION,w
  2822  04A2  0021               	movlb	1	; select bank1
  2823  04A3  00A8               	movwf	(_st^(0+128)+8)
  2824  04A4  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  2825  04A5  3186  26B0         	fcall	_writeUART
  2826                           
  2827                           ;blynd.c: 327: RF1=1; curtFlag1=1; TimerCounter1=0;
  2828  04A7  0025               	movlb	5	; select bank5
  2829  04A8  148C               	bsf	12,1	;volatile
  2830  04A9  3001               	movlw	1
  2831  04AA  00F4               	movwf	_curtFlag1
  2832  04AB  3000               	movlw	0
  2833  04AC  00F5               	movwf	_curtFlag1+1
  2834  04AD  01F0               	clrf	_TimerCounter1
  2835  04AE  01F1               	clrf	_TimerCounter1+1
  2836                           
  2837                           ;blynd.c: 328: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  2838  04AF  300B               	movlw	11
  2839  04B0  0020               	movlb	0	; select bank0
  2840  04B1  0097               	movwf	23	;volatile
  2841  04B2  30DC               	movlw	220
  2842  04B3  0096               	movwf	22	;volatile
  2843  04B4  1011               	bcf	17,0	;volatile
  2844  04B5  1418               	bsf	24,0	;volatile
  2845                           
  2846                           ;blynd.c: 329: }
  2847  04B6  0008               	return
  2848  04B7                     l234:	
  2849                           
  2850                           ;blynd.c: 330: else{
  2851                           ;blynd.c: 331: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  2852  04B7  0025               	movlb	5	; select bank5
  2853  04B8  100C               	bcf	12,0	;volatile
  2854  04B9  108C               	bcf	12,1	;volatile
  2855  04BA  0020               	movlb	0	; select bank0
  2856  04BB  1018               	bcf	24,0	;volatile
  2857  04BC  01F4               	clrf	_curtFlag1
  2858  04BD  01F5               	clrf	_curtFlag1+1
  2859  04BE  01F0               	clrf	_TimerCounter1
  2860  04BF  01F1               	clrf	_TimerCounter1+1
  2861                           
  2862                           ;blynd.c: 332: }
  2863                           ;blynd.c: 333: break;
  2864  04C0  0008               	return
  2865  04C1                     l2122:	
  2866                           ;blynd.c: 334: case 2:
  2867                           
  2868                           
  2869                           ;blynd.c: 335: M2=switch_status;
  2870  04C1  0844               	movf	ACTION@switch_status+1,w
  2871  04C2  00CE               	movwf	_M2+1
  2872  04C3  0843               	movf	ACTION@switch_status,w
  2873  04C4  00CD               	movwf	_M2
  2874                           
  2875                           ;blynd.c: 336: if(switch_status==1){
  2876  04C5  0343               	decf	ACTION@switch_status,w
  2877  04C6  0444               	iorwf	ACTION@switch_status+1,w
  2878  04C7  1D03               	btfss	3,2
  2879  04C8  2CF6               	goto	l238
  2880                           
  2881                           ;blynd.c: 337: RF1=0;
  2882  04C9  0025               	movlb	5	; select bank5
  2883  04CA  108C               	bcf	12,1	;volatile
  2884                           
  2885                           ;blynd.c: 338: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  2886  04CB  3047               	movlw	71
  2887  04CC  0020               	movlb	0	; select bank0
  2888  04CD  00B4               	movwf	??_ACTION
  2889  04CE  0834               	movf	??_ACTION,w
  2890  04CF  0021               	movlb	1	; select bank1
  2891  04D0  00A1               	movwf	(_st^(0+128)+1)
  2892  04D1  3030               	movlw	48
  2893  04D2  0020               	movlb	0	; select bank0
  2894  04D3  00B4               	movwf	??_ACTION
  2895  04D4  0834               	movf	??_ACTION,w
  2896  04D5  0021               	movlb	1	; select bank1
  2897  04D6  00A2               	movwf	(_st^(0+128)+2)
  2898  04D7  3030               	movlw	48
  2899  04D8  0020               	movlb	0	; select bank0
  2900  04D9  00B4               	movwf	??_ACTION
  2901  04DA  0834               	movf	??_ACTION,w
  2902  04DB  0021               	movlb	1	; select bank1
  2903  04DC  00A3               	movwf	(_st^(0+128)+3)
  2904  04DD  3031               	movlw	49
  2905  04DE  0020               	movlb	0	; select bank0
  2906  04DF  00B4               	movwf	??_ACTION
  2907  04E0  0834               	movf	??_ACTION,w
  2908  04E1  0021               	movlb	1	; select bank1
  2909  04E2  00A4               	movwf	(_st^(0+128)+4)
  2910  04E3  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  2911  04E4  3186  26B0         	fcall	_writeUART
  2912                           
  2913                           ;blynd.c: 339: RF0=1; curtFlag1=1; TimerCounter1=0;
  2914  04E6  0025               	movlb	5	; select bank5
  2915  04E7  140C               	bsf	12,0	;volatile
  2916  04E8  3001               	movlw	1
  2917  04E9  00F4               	movwf	_curtFlag1
  2918  04EA  3000               	movlw	0
  2919  04EB  00F5               	movwf	_curtFlag1+1
  2920  04EC  01F0               	clrf	_TimerCounter1
  2921  04ED  01F1               	clrf	_TimerCounter1+1
  2922                           
  2923                           ;blynd.c: 340: TMR1H=0x0B; TMR1L=0xDC; PIR1bits.TMR1IF=0; T1CONbits.TMR1ON = 1;
  2924  04EE  300B               	movlw	11
  2925  04EF  0020               	movlb	0	; select bank0
  2926  04F0  0097               	movwf	23	;volatile
  2927  04F1  30DC               	movlw	220
  2928  04F2  0096               	movwf	22	;volatile
  2929  04F3  1011               	bcf	17,0	;volatile
  2930  04F4  1418               	bsf	24,0	;volatile
  2931                           
  2932                           ;blynd.c: 341: }
  2933  04F5  0008               	return
  2934  04F6                     l238:	
  2935                           
  2936                           ;blynd.c: 342: else{
  2937                           ;blynd.c: 343: RF0=0; RF1=0; T1CONbits.TMR1ON = 0; curtFlag1=0; TimerCounter1=0;
  2938  04F6  0025               	movlb	5	; select bank5
  2939  04F7  100C               	bcf	12,0	;volatile
  2940  04F8  108C               	bcf	12,1	;volatile
  2941  04F9  0020               	movlb	0	; select bank0
  2942  04FA  1018               	bcf	24,0	;volatile
  2943  04FB  01F4               	clrf	_curtFlag1
  2944  04FC  01F5               	clrf	_curtFlag1+1
  2945  04FD  01F0               	clrf	_TimerCounter1
  2946  04FE  01F1               	clrf	_TimerCounter1+1
  2947                           
  2948                           ;blynd.c: 349: }
  2949                           
  2950                           ;blynd.c: 348: break;
  2951                           
  2952                           ;blynd.c: 347: default:
  2953                           
  2954                           ;blynd.c: 344: }
  2955                           ;blynd.c: 345: break;
  2956  04FF  0008               	return
  2957  0500                     l2150:	
  2958                           
  2959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2960                           ; Switch size 1, requested type "space"
  2961                           ; Number of cases is 1, Range of values is 0 to 0
  2962                           ; switch strategies available:
  2963                           ; Name         Instructions Cycles
  2964                           ; simple_byte            4     3 (average)
  2965                           ; direct_byte            8     6 (fixed)
  2966                           ; jumptable            260     6 (fixed)
  2967                           ;	Chosen strategy is simple_byte
  2968  0500  0842               	movf	ACTION@SwNum+1,w
  2969  0501  3A00               	xorlw	0	; case 0
  2970  0502  1903               	skipnz
  2971  0503  2D05               	goto	l2420
  2972  0504  2D0D               	goto	l241
  2973  0505                     l2420:	
  2974                           
  2975                           ; Switch size 1, requested type "space"
  2976                           ; Number of cases is 2, Range of values is 1 to 2
  2977                           ; switch strategies available:
  2978                           ; Name         Instructions Cycles
  2979                           ; simple_byte            7     4 (average)
  2980                           ; direct_byte           13     9 (fixed)
  2981                           ; jumptable            263     9 (fixed)
  2982                           ;	Chosen strategy is simple_byte
  2983  0505  0841               	movf	ACTION@SwNum,w
  2984  0506  3A01               	xorlw	1	; case 1
  2985  0507  1903               	skipnz
  2986  0508  2C82               	goto	l2096
  2987  0509  3A03               	xorlw	3	; case 2
  2988  050A  1903               	skipnz
  2989  050B  2CC1               	goto	l2122
  2990  050C  2D0D               	goto	l241
  2991  050D                     l241:	
  2992  050D  0008               	return
  2993  050E                     __end_of_ACTION:	
  2994                           
  2995                           	psect	text8
  2996  06B0                     __ptext8:	
  2997 ;; *************** function _writeUART *****************
  2998 ;; Defined at:
  2999 ;;		line 352 in file "blynd.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  str2Write       1    wreg     PTR unsigned char 
  3002 ;;		 -> st(50), 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  str2Write       1    3[BANK0 ] PTR unsigned char 
  3005 ;;		 -> st(50), 
  3006 ;;  Tx_count        2    1[BANK0 ] int 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3017 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  3019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  3020 ;;Total ram usage:        4 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    2
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;;		_ACTION
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _writeUART
  3033  06B0                     _writeUART:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  3037                           ;writeUART@str2Write stored from wreg
  3038  06B0  0020               	movlb	0	; select bank0
  3039  06B1  00A3               	movwf	writeUART@str2Write
  3040                           
  3041                           ;blynd.c: 353: int Tx_count=0;
  3042  06B2  01A1               	clrf	writeUART@Tx_count
  3043  06B3  01A2               	clrf	writeUART@Tx_count+1
  3044  06B4                     l1920:	
  3045                           ;blynd.c: 355: while(Tx_count!=4)
  3046                           
  3047  06B4  3004               	movlw	4
  3048  06B5  0621               	xorwf	writeUART@Tx_count,w
  3049  06B6  0422               	iorwf	writeUART@Tx_count+1,w
  3050  06B7  1903               	btfsc	3,2
  3051  06B8  0008               	return
  3052  06B9                     l246:	
  3053                           ;blynd.c: 356: {
  3054                           ;blynd.c: 358: while (!TX1STAbits.TRMT);
  3055                           
  3056  06B9  0023               	movlb	3	; select bank3
  3057  06BA  1C9E               	btfss	30,1	;volatile
  3058  06BB  2EB9               	goto	l246
  3059                           
  3060                           ;blynd.c: 359: TX1REG = *str2Write;
  3061  06BC  0020               	movlb	0	; select bank0
  3062  06BD  0823               	movf	writeUART@str2Write,w
  3063  06BE  0086               	movwf	6
  3064  06BF  0187               	clrf	7
  3065  06C0  0801               	movf	1,w
  3066  06C1  0023               	movlb	3	; select bank3
  3067  06C2  009A               	movwf	26	;volatile
  3068                           
  3069                           ;blynd.c: 360: *str2Write++;
  3070  06C3  3001               	movlw	1
  3071  06C4  0020               	movlb	0	; select bank0
  3072  06C5  00A0               	movwf	??_writeUART
  3073  06C6  0820               	movf	??_writeUART,w
  3074  06C7  07A3               	addwf	writeUART@str2Write,f
  3075                           
  3076                           ;blynd.c: 361: Tx_count++;
  3077  06C8  3001               	movlw	1
  3078  06C9  07A1               	addwf	writeUART@Tx_count,f
  3079  06CA  3000               	movlw	0
  3080  06CB  3DA2               	addwfc	writeUART@Tx_count+1,f
  3081  06CC  2EB4               	goto	l1920
  3082  06CD                     __end_of_writeUART:	
  3083                           
  3084                           	psect	text9
  3085  050E                     __ptext9:	
  3086 ;; *************** function _atoi *****************
  3087 ;; Defined at:
  3088 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  s               1    wreg     PTR const unsigned char 
  3091 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3094 ;;		 -> ACTION@FanSpeedString(2), ACTION@SwNumString(2), 
  3095 ;;  a               2   11[BANK0 ] int 
  3096 ;;  sign            1   10[BANK0 ] unsigned char 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2    6[BANK0 ] int 
  3099 ;; Registers used:
  3100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3107 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
  3108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3109 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  3110 ;;Total ram usage:        8 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    3
  3113 ;; This function calls:
  3114 ;;		___wmul
  3115 ;;		_isdigit
  3116 ;; This function is called by:
  3117 ;;		_ACTION
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           
  3122                           ;psect for function _atoi
  3123  050E                     _atoi:	
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3127                           ;atoi@s stored from wreg
  3128  050E  0020               	movlb	0	; select bank0
  3129  050F  00AD               	movwf	atoi@s
  3130  0510                     l1972:	
  3131  0510  082D               	movf	atoi@s,w
  3132  0511  0086               	movwf	6
  3133  0512  0187               	clrf	7
  3134  0513  3020               	movlw	32
  3135  0514  0601               	xorwf	1,w
  3136  0515  1D03               	btfss	3,2
  3137  0516  2D1C               	goto	l1974
  3138  0517                     l1970:	
  3139  0517  3001               	movlw	1
  3140  0518  00A8               	movwf	??_atoi
  3141  0519  0828               	movf	??_atoi,w
  3142  051A  07AD               	addwf	atoi@s,f
  3143  051B  2D10               	goto	l1972
  3144  051C                     l1974:	
  3145  051C  082D               	movf	atoi@s,w
  3146  051D  0086               	movwf	6
  3147  051E  0187               	clrf	7
  3148  051F  3009               	movlw	9
  3149  0520  0601               	xorwf	1,w
  3150  0521  1903               	btfsc	3,2
  3151  0522  2D17               	goto	l1970
  3152  0523  01AB               	clrf	atoi@a
  3153  0524  01AC               	clrf	atoi@a+1
  3154  0525  01AA               	clrf	atoi@sign
  3155  0526  082D               	movf	atoi@s,w
  3156  0527  0086               	movwf	6
  3157  0528  0187               	clrf	7
  3158  0529  302D               	movlw	45
  3159  052A  0601               	xorwf	1,w
  3160  052B  1D03               	btfss	3,2
  3161  052C  2D32               	goto	l1982
  3162  052D  3001               	movlw	1
  3163  052E  00A8               	movwf	??_atoi
  3164  052F  0828               	movf	??_atoi,w
  3165  0530  07AA               	addwf	atoi@sign,f
  3166  0531  2D39               	goto	l1988
  3167  0532                     l1982:	
  3168  0532  082D               	movf	atoi@s,w
  3169  0533  0086               	movwf	6
  3170  0534  0187               	clrf	7
  3171  0535  302B               	movlw	43
  3172  0536  0601               	xorwf	1,w
  3173  0537  1D03               	btfss	3,2
  3174  0538  2D3D               	goto	l1990
  3175  0539                     l1988:	
  3176  0539  3001               	movlw	1
  3177  053A  00A8               	movwf	??_atoi
  3178  053B  0828               	movf	??_atoi,w
  3179  053C  07AD               	addwf	atoi@s,f
  3180  053D                     l1990:	
  3181  053D  082D               	movf	atoi@s,w
  3182  053E  0086               	movwf	6
  3183  053F  0187               	clrf	7
  3184  0540  0801               	movf	1,w
  3185  0541  3187  2727  3185   	fcall	_isdigit
  3186  0544  1C03               	btfss	3,0
  3187  0545  2D64               	goto	l1992
  3188  0546  0020               	movlb	0	; select bank0
  3189  0547  082C               	movf	atoi@a+1,w
  3190  0548  00A1               	movwf	___wmul@multiplier+1
  3191  0549  082B               	movf	atoi@a,w
  3192  054A  00A0               	movwf	___wmul@multiplier
  3193  054B  300A               	movlw	10
  3194  054C  00A2               	movwf	___wmul@multiplicand
  3195  054D  3000               	movlw	0
  3196  054E  00A3               	movwf	___wmul@multiplicand+1
  3197  054F  3186  26CD  3185   	fcall	___wmul
  3198  0552  0020               	movlb	0	; select bank0
  3199  0553  082D               	movf	atoi@s,w
  3200  0554  0086               	movwf	6
  3201  0555  0187               	clrf	7
  3202  0556  0801               	movf	1,w
  3203  0557  0720               	addwf	?___wmul,w
  3204  0558  00A8               	movwf	??_atoi
  3205  0559  0821               	movf	?___wmul+1,w
  3206  055A  1803               	skipnc
  3207  055B  0A21               	incf	?___wmul+1,w
  3208  055C  00A9               	movwf	??_atoi+1
  3209  055D  0828               	movf	??_atoi,w
  3210  055E  3ED0               	addlw	208
  3211  055F  00AB               	movwf	atoi@a
  3212  0560  30FF               	movlw	255
  3213  0561  3D29               	addwfc	??_atoi+1,w
  3214  0562  00AC               	movwf	atoi@a+1
  3215  0563  2D39               	goto	l1988
  3216  0564                     l1992:	
  3217  0564  0020               	movlb	0	; select bank0
  3218  0565  082A               	movf	atoi@sign,w
  3219  0566  1903               	btfsc	3,2
  3220  0567  2D74               	goto	l1998
  3221  0568  092B               	comf	atoi@a,w
  3222  0569  00A8               	movwf	??_atoi
  3223  056A  092C               	comf	atoi@a+1,w
  3224  056B  00A9               	movwf	??_atoi+1
  3225  056C  0AA8               	incf	??_atoi,f
  3226  056D  1903               	skipnz
  3227  056E  0AA9               	incf	??_atoi+1,f
  3228  056F  0828               	movf	??_atoi,w
  3229  0570  00A6               	movwf	?_atoi
  3230  0571  0829               	movf	??_atoi+1,w
  3231  0572  00A7               	movwf	?_atoi+1
  3232  0573  0008               	return
  3233  0574                     l1998:	
  3234  0574  082C               	movf	atoi@a+1,w
  3235  0575  00A7               	movwf	?_atoi+1
  3236  0576  082B               	movf	atoi@a,w
  3237  0577  00A6               	movwf	?_atoi
  3238  0578  0008               	return
  3239  0579                     __end_of_atoi:	
  3240                           
  3241                           	psect	text10
  3242  0727                     __ptext10:	
  3243 ;; *************** function _isdigit *****************
  3244 ;; Defined at:
  3245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  c               1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  c               1    1[BANK0 ] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  3263 ;;Total ram usage:        2 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    2
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_atoi
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _isdigit
  3275  0727                     _isdigit:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3279                           ;isdigit@c stored from wreg
  3280  0727  0020               	movlb	0	; select bank0
  3281  0728  00A1               	movwf	isdigit@c
  3282  0729  01A0               	clrf	_isdigit$611
  3283  072A  303A               	movlw	58
  3284  072B  0221               	subwf	isdigit@c,w
  3285  072C  1803               	skipnc
  3286  072D  2F34               	goto	l1908
  3287  072E  3030               	movlw	48
  3288  072F  0221               	subwf	isdigit@c,w
  3289  0730  1C03               	skipc
  3290  0731  2F34               	goto	l1908
  3291  0732  01A0               	clrf	_isdigit$611
  3292  0733  0AA0               	incf	_isdigit$611,f
  3293  0734                     l1908:	
  3294  0734  0C20               	rrf	_isdigit$611,w
  3295  0735  0008               	return
  3296  0736                     __end_of_isdigit:	
  3297                           
  3298                           	psect	text11
  3299  06CD                     __ptext11:	
  3300 ;; *************** function ___wmul *****************
  3301 ;; Defined at:
  3302 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3305 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  product         2    4[BANK0 ] unsigned int 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  2    0[BANK0 ] unsigned int 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3317 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  3318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3321 ;;Total ram usage:        6 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_atoi
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function ___wmul
  3333  06CD                     ___wmul:	
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3337  06CD  0020               	movlb	0	; select bank0
  3338  06CE  01A4               	clrf	___wmul@product
  3339  06CF  01A5               	clrf	___wmul@product+1
  3340  06D0                     l1888:	
  3341  06D0  1C20               	btfss	___wmul@multiplier,0
  3342  06D1  2ED6               	goto	l266
  3343  06D2  0822               	movf	___wmul@multiplicand,w
  3344  06D3  07A4               	addwf	___wmul@product,f
  3345  06D4  0823               	movf	___wmul@multiplicand+1,w
  3346  06D5  3DA5               	addwfc	___wmul@product+1,f
  3347  06D6                     l266:	
  3348  06D6  3001               	movlw	1
  3349  06D7                     u1485:	
  3350  06D7  35A2               	lslf	___wmul@multiplicand,f
  3351  06D8  0DA3               	rlf	___wmul@multiplicand+1,f
  3352  06D9  0B89               	decfsz	9,f
  3353  06DA  2ED7               	goto	u1485
  3354  06DB  3001               	movlw	1
  3355  06DC                     u1495:	
  3356  06DC  36A1               	lsrf	___wmul@multiplier+1,f
  3357  06DD  0CA0               	rrf	___wmul@multiplier,f
  3358  06DE  0B89               	decfsz	9,f
  3359  06DF  2EDC               	goto	u1495
  3360  06E0  0820               	movf	___wmul@multiplier,w
  3361  06E1  0421               	iorwf	___wmul@multiplier+1,w
  3362  06E2  1D03               	btfss	3,2
  3363  06E3  2ED0               	goto	l1888
  3364  06E4  0825               	movf	___wmul@product+1,w
  3365  06E5  00A1               	movwf	?___wmul+1
  3366  06E6  0824               	movf	___wmul@product,w
  3367  06E7  00A0               	movwf	?___wmul
  3368  06E8  0008               	return
  3369  06E9                     __end_of___wmul:	
  3370                           
  3371                           	psect	intentry
  3372  0004                     __pintentry:	
  3373 ;; *************** function _isr *****************
  3374 ;; Defined at:
  3375 ;;		line 72 in file "blynd.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
  3392 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
  3393 ;;Total ram usage:        2 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    1
  3396 ;; This function calls:
  3397 ;;		i1_writeUART
  3398 ;; This function is called by:
  3399 ;;		Interrupt level 1
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403  0004                     _isr:	
  3404                           
  3405                           ;incstack = 0
  3406  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3407                           
  3408                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3409  0005  3180               	pagesel	$
  3410  0006  0020               	movlb	0	; select bank0
  3411  0007  087F               	movf	127,w
  3412  0008  00FB               	movwf	??_isr+1
  3413                           
  3414                           ;blynd.c: 74: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
  3415  0009  0021               	movlb	1	; select bank1
  3416  000A  1C11               	btfss	17,0	;volatile
  3417  000B  285B               	goto	i1l1590
  3418  000C  0020               	movlb	0	; select bank0
  3419  000D  1C11               	btfss	17,0	;volatile
  3420  000E  285B               	goto	i1l1590
  3421                           
  3422                           ;blynd.c: 75: {
  3423                           ;blynd.c: 76: PIR1bits.TMR1IF=0;
  3424  000F  1011               	bcf	17,0	;volatile
  3425                           
  3426                           ;blynd.c: 77: if(TimerCounter1>=108){
  3427  0010  0871               	movf	_TimerCounter1+1,w
  3428  0011  3A80               	xorlw	128
  3429  0012  00FA               	movwf	??_isr
  3430  0013  3080               	movlw	128
  3431  0014  027A               	subwf	??_isr,w
  3432  0015  1D03               	skipz
  3433  0016  2819               	goto	u97_25
  3434  0017  306C               	movlw	108
  3435  0018  0270               	subwf	_TimerCounter1,w
  3436  0019                     u97_25:	
  3437  0019  1C03               	skipc
  3438  001A  284B               	goto	i1l1580
  3439                           
  3440                           ;blynd.c: 78: RF1=0; RF0=0;
  3441  001B  0025               	movlb	5	; select bank5
  3442  001C  108C               	bcf	12,1	;volatile
  3443  001D  100C               	bcf	12,0	;volatile
  3444                           
  3445                           ;blynd.c: 79: st[1]='G'; st[2]='0'; st[3]='0'; st[4]='1'; writeUART(st+1);
  3446  001E  3047               	movlw	71
  3447  001F  00FA               	movwf	??_isr
  3448  0020  087A               	movf	??_isr,w
  3449  0021  0021               	movlb	1	; select bank1
  3450  0022  00A1               	movwf	(_st^(0+128)+1)
  3451  0023  3030               	movlw	48
  3452  0024  00FA               	movwf	??_isr
  3453  0025  087A               	movf	??_isr,w
  3454  0026  00A2               	movwf	(_st^(0+128)+2)
  3455  0027  3030               	movlw	48
  3456  0028  00FA               	movwf	??_isr
  3457  0029  087A               	movf	??_isr,w
  3458  002A  00A3               	movwf	(_st^(0+128)+3)
  3459  002B  3031               	movlw	49
  3460  002C  00FA               	movwf	??_isr
  3461  002D  087A               	movf	??_isr,w
  3462  002E  00A4               	movwf	(_st^(0+128)+4)
  3463  002F  30A1               	movlw	(low ((_st| 0+1)))& (0+255)
  3464  0030  3186  26E9  3180   	fcall	i1_writeUART
  3465                           
  3466                           ;blynd.c: 80: T1CONbits.TMR1ON = 0;
  3467  0033  0020               	movlb	0	; select bank0
  3468  0034  1018               	bcf	24,0	;volatile
  3469                           
  3470                           ;blynd.c: 81: st[5]='G'; st[6]='0'; st[7]='0'; st[8]='2'; writeUART(st+5);
  3471  0035  3047               	movlw	71
  3472  0036  00FA               	movwf	??_isr
  3473  0037  087A               	movf	??_isr,w
  3474  0038  0021               	movlb	1	; select bank1
  3475  0039  00A5               	movwf	(_st^(0+128)+5)
  3476  003A  3030               	movlw	48
  3477  003B  00FA               	movwf	??_isr
  3478  003C  087A               	movf	??_isr,w
  3479  003D  00A6               	movwf	(_st^(0+128)+6)
  3480  003E  3030               	movlw	48
  3481  003F  00FA               	movwf	??_isr
  3482  0040  087A               	movf	??_isr,w
  3483  0041  00A7               	movwf	(_st^(0+128)+7)
  3484  0042  3032               	movlw	50
  3485  0043  00FA               	movwf	??_isr
  3486  0044  087A               	movf	??_isr,w
  3487  0045  00A8               	movwf	(_st^(0+128)+8)
  3488  0046  30A5               	movlw	(low ((_st| 0+5)))& (0+255)
  3489  0047  3186  26E9  3180   	fcall	i1_writeUART
  3490                           
  3491                           ;blynd.c: 82: }
  3492  004A  285B               	goto	i1l1590
  3493  004B                     i1l1580:	
  3494                           
  3495                           ;blynd.c: 83: else if(curtFlag1){
  3496  004B  0874               	movf	_curtFlag1,w
  3497  004C  0475               	iorwf	_curtFlag1+1,w
  3498  004D  1903               	btfsc	3,2
  3499  004E  285B               	goto	i1l1590
  3500                           
  3501                           ;blynd.c: 84: TimerCounter1=TimerCounter1+1;
  3502  004F  0870               	movf	_TimerCounter1,w
  3503  0050  3E01               	addlw	1
  3504  0051  00F0               	movwf	_TimerCounter1
  3505  0052  3000               	movlw	0
  3506  0053  3D71               	addwfc	_TimerCounter1+1,w
  3507  0054  00F1               	movwf	_TimerCounter1+1
  3508                           
  3509                           ;blynd.c: 85: TMR1H=0x0B; TMR1L=0xDC; T1CONbits.TMR1ON = 1;
  3510  0055  300B               	movlw	11
  3511  0056  0020               	movlb	0	; select bank0
  3512  0057  0097               	movwf	23	;volatile
  3513  0058  30DC               	movlw	220
  3514  0059  0096               	movwf	22	;volatile
  3515  005A  1418               	bsf	24,0	;volatile
  3516  005B                     i1l1590:	
  3517                           
  3518                           ;blynd.c: 87: }
  3519                           ;blynd.c: 88: }
  3520                           ;blynd.c: 91: if(RC1IF==1){
  3521  005B  0020               	movlb	0	; select bank0
  3522  005C  1E91               	btfss	17,5	;volatile
  3523  005D  28AA               	goto	i1l185
  3524                           
  3525                           ;blynd.c: 92: if(RC1STAbits.OERR)
  3526  005E  0023               	movlb	3	; select bank3
  3527  005F  1C9D               	btfss	29,1	;volatile
  3528  0060  286C               	goto	i1l1598
  3529                           
  3530                           ;blynd.c: 93: {
  3531                           ;blynd.c: 94: RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  3532  0061  121D               	bcf	29,4	;volatile
  3533  0062  161D               	bsf	29,4	;volatile
  3534  0063                     i1l167:	
  3535                           ;blynd.c: 95: while(PIR1bits.TXIF==0); TX1REG='F'; while(PIR1bits.TXIF==0);
  3536                           
  3537  0063  0020               	movlb	0	; select bank0
  3538  0064  1E11               	btfss	17,4	;volatile
  3539  0065  2863               	goto	i1l167
  3540  0066  3046               	movlw	70
  3541  0067  0023               	movlb	3	; select bank3
  3542  0068  009A               	movwf	26	;volatile
  3543  0069                     i1l170:	
  3544  0069  0020               	movlb	0	; select bank0
  3545  006A  1E11               	btfss	17,4	;volatile
  3546  006B  2869               	goto	i1l170
  3547  006C                     i1l1598:	
  3548                           
  3549                           ;blynd.c: 96: }
  3550                           ;blynd.c: 97: name[i]=RC1REG;
  3551  006C  0023               	movlb	3	; select bank3
  3552  006D  0819               	movf	25,w	;volatile
  3553  006E  00FA               	movwf	??_isr
  3554  006F  0872               	movf	_i,w
  3555  0070  3E44               	addlw	(low (_name| (0+256)))& (0+255)
  3556  0071  0086               	movwf	6
  3557  0072  3001               	movlw	1	; select bank2/3
  3558  0073  0087               	movwf	7
  3559  0074  087A               	movf	??_isr,w
  3560  0075  0081               	movwf	1
  3561                           
  3562                           ;blynd.c: 99: if(name[0]=='%')
  3563  0076  3025               	movlw	37
  3564  0077  0022               	movlb	2	; select bank2
  3565  0078  0644               	xorwf	_name^(0+256),w
  3566  0079  1D03               	btfss	3,2
  3567  007A  2893               	goto	i1l1610
  3568                           
  3569                           ;blynd.c: 100: {
  3570                           ;blynd.c: 101: i++;
  3571  007B  3001               	movlw	1
  3572  007C  07F2               	addwf	_i,f
  3573  007D  3000               	movlw	0
  3574  007E  3DF3               	addwfc	_i+1,f
  3575                           
  3576                           ;blynd.c: 102: if(i>15)
  3577  007F  0873               	movf	_i+1,w
  3578  0080  3A80               	xorlw	128
  3579  0081  00FA               	movwf	??_isr
  3580  0082  3080               	movlw	128
  3581  0083  027A               	subwf	??_isr,w
  3582  0084  1D03               	skipz
  3583  0085  2888               	goto	u104_25
  3584  0086  3010               	movlw	16
  3585  0087  0272               	subwf	_i,w
  3586  0088                     u104_25:	
  3587  0088  1C03               	skipc
  3588  0089  28AA               	goto	i1l185
  3589                           
  3590                           ;blynd.c: 103: {
  3591                           ;blynd.c: 104: i=0; TX_FLAG = 1; RC1IF=0;
  3592  008A  01F2               	clrf	_i
  3593  008B  01F3               	clrf	_i+1
  3594  008C  3001               	movlw	1
  3595  008D  0020               	movlb	0	; select bank0
  3596  008E  00D7               	movwf	_TX_FLAG
  3597  008F  3000               	movlw	0
  3598  0090  00D8               	movwf	_TX_FLAG+1
  3599  0091  1291               	bcf	17,5	;volatile
  3600                           
  3601                           ;blynd.c: 105: }
  3602                           ;blynd.c: 106: }
  3603  0092  28AA               	goto	i1l185
  3604  0093                     i1l1610:	
  3605                           
  3606                           ;blynd.c: 107: else
  3607                           ;blynd.c: 108: {
  3608                           ;blynd.c: 109: i=0; RC1STAbits.CREN = 0; RC1STAbits.CREN = 1;
  3609  0093  01F2               	clrf	_i
  3610  0094  01F3               	clrf	_i+1
  3611  0095  0023               	movlb	3	; select bank3
  3612  0096  121D               	bcf	29,4	;volatile
  3613  0097  161D               	bsf	29,4	;volatile
  3614  0098                     i1l176:	
  3615                           ;blynd.c: 110: while(PIR1bits.TX1IF==0); TX1REG='F';
  3616                           
  3617  0098  0020               	movlb	0	; select bank0
  3618  0099  1E11               	btfss	17,4	;volatile
  3619  009A  2898               	goto	i1l176
  3620  009B  3046               	movlw	70
  3621  009C  0023               	movlb	3	; select bank3
  3622  009D  009A               	movwf	26	;volatile
  3623  009E                     i1l179:	
  3624                           ;blynd.c: 111: while(PIR1bits.TX1IF==0); TX1REG='R';
  3625                           
  3626  009E  0020               	movlb	0	; select bank0
  3627  009F  1E11               	btfss	17,4	;volatile
  3628  00A0  289E               	goto	i1l179
  3629  00A1  3052               	movlw	82
  3630  00A2  0023               	movlb	3	; select bank3
  3631  00A3  009A               	movwf	26	;volatile
  3632  00A4                     i1l182:	
  3633                           ;blynd.c: 112: while(PIR1bits.TX1IF==0); TX1REG='R';
  3634                           
  3635  00A4  0020               	movlb	0	; select bank0
  3636  00A5  1E11               	btfss	17,4	;volatile
  3637  00A6  28A4               	goto	i1l182
  3638  00A7  3052               	movlw	82
  3639  00A8  0023               	movlb	3	; select bank3
  3640  00A9  009A               	movwf	26	;volatile
  3641  00AA                     i1l185:	
  3642  00AA  087B               	movf	??_isr+1,w
  3643  00AB  0020               	movlb	0	; select bank0
  3644  00AC  00FF               	movwf	127
  3645  00AD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3646  00AE  0009               	retfie
  3647  00AF                     __end_of_isr:	
  3648                           
  3649                           	psect	text13
  3650  06E9                     __ptext13:	
  3651 ;; *************** function i1_writeUART *****************
  3652 ;; Defined at:
  3653 ;;		line 352 in file "blynd.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  str2Write       1    wreg     PTR unsigned char 
  3656 ;;		 -> st(50), 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  str2Write       1    1[COMMON] PTR unsigned char 
  3659 ;;		 -> st(50), 
  3660 ;;  writeUART       2    2[COMMON] int 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0
  3672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0
  3673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
  3674 ;;Total ram usage:        4 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_isr
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function i1_writeUART
  3685  06E9                     i1_writeUART:	
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in i1_writeUART: [wreg+fsr1l+fsr1h+status,2+status,0]
  3689                           ;i1writeUART@str2Write stored from wreg
  3690  06E9  00F7               	movwf	i1writeUART@str2Write
  3691                           
  3692                           ;blynd.c: 353: int Tx_count=0;
  3693  06EA  01F8               	clrf	i1writeUART@Tx_count
  3694  06EB  01F9               	clrf	i1writeUART@Tx_count+1
  3695  06EC                     i1l1552:	
  3696                           ;blynd.c: 355: while(Tx_count!=4)
  3697                           
  3698  06EC  3004               	movlw	4
  3699  06ED  0678               	xorwf	i1writeUART@Tx_count,w
  3700  06EE  0479               	iorwf	i1writeUART@Tx_count+1,w
  3701  06EF  1903               	btfsc	3,2
  3702  06F0  0008               	return
  3703  06F1                     i1l246:	
  3704                           ;blynd.c: 356: {
  3705                           ;blynd.c: 358: while (!TX1STAbits.TRMT);
  3706                           
  3707  06F1  0023               	movlb	3	; select bank3
  3708  06F2  1C9E               	btfss	30,1	;volatile
  3709  06F3  2EF1               	goto	i1l246
  3710                           
  3711                           ;blynd.c: 359: TX1REG = *str2Write;
  3712  06F4  0877               	movf	i1writeUART@str2Write,w
  3713  06F5  0086               	movwf	6
  3714  06F6  0187               	clrf	7
  3715  06F7  0801               	movf	1,w
  3716  06F8  009A               	movwf	26	;volatile
  3717                           
  3718                           ;blynd.c: 360: *str2Write++;
  3719  06F9  3001               	movlw	1
  3720  06FA  00F6               	movwf	??i1_writeUART
  3721  06FB  0876               	movf	??i1_writeUART,w
  3722  06FC  07F7               	addwf	i1writeUART@str2Write,f
  3723                           
  3724                           ;blynd.c: 361: Tx_count++;
  3725  06FD  3001               	movlw	1
  3726  06FE  07F8               	addwf	i1writeUART@Tx_count,f
  3727  06FF  3000               	movlw	0
  3728  0700  3DF9               	addwfc	i1writeUART@Tx_count+1,f
  3729  0701  2EEC               	goto	i1l1552
  3730  0702                     __end_ofi1_writeUART:	
  3731  007E                     btemp	set	126	;btemp
  3732  007E                     int$flags	set	126
  3733  007E                     wtemp0	set	126


Data Sizes:
    Strings     33
    Constant    0
    Data        188
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     45      61
    BANK1            80      0      74
    BANK2            80      0      72
    BANK3            80      0      64
    BANK4            80     20      20
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 2
		 -> ACTION@FanSpeedString(BANK0[2]), ACTION@SwNumString(BANK0[2]), 

    writeUART@str2Write	PTR unsigned char  size(1) Largest target is 50
		 -> st(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_writeUART

Critical Paths under _main in BANK0

    _main->_ACTION
    _ACTION->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    3960
                                             39 BANK0      6     6      0
                                              0 BANK4     20    20      0
                             _ACTION
                         _copy_frame
                     _periperal_init
                        _pin_manager
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _pin_manager                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _periperal_init                                       0     0      0       0
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _copy_frame                                           5     1      4     322
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _ACTION                                              25    19      6    2935
                                             14 BANK0     25    19      6
                               _atoi
                          _writeUART
 ---------------------------------------------------------------------------------
 (1) _writeUART                                            4     4      0     401
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     759
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      47
                                              4 COMMON     2     2      0
                        i1_writeUART
 ---------------------------------------------------------------------------------
 (5) i1_writeUART                                          4     4      0      47
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ACTION
     _atoi
       ___wmul
       _isdigit
     _writeUART
   _copy_frame
   _periperal_init
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR3_Initialize
   _pin_manager
   _writeUART

 _isr (ROOT)
   i1_writeUART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     12F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4A       8       92.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      48      10       90.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     14      14      14       25.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     12F      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Dec 07 14:29:48 2018

   __size_of_periperal_init 0009                           _i 0072                           _j 00E6  
                         _k 0055                 __CFG_CP$OFF 0000                          _M1 004F  
                        _M2 004D                          _M3 00D6                          _M4 00D4  
                        _st 00A0                          _sw 0053         ___wmul@multiplicand 0022  
                       l224 0608                         l241 050D                         l234 04B7  
                       l246 06B9                         l238 04F6                         l266 06D6  
                       _GIE 005F                         _RF0 1460                         _RF1 1461  
                       _RF5 1465                         _RF7 1467                         _cnt 00E4  
                       _man 005B                         _isr 0004                         _sum 00D8  
              __CFG_BORV$LO 0000                         wreg 0009                __CFG_FOSC$HS 0000  
       __end_ofi1_writeUART 0702                __CFG_LVP$OFF 0000                        l2122 04C1  
                      l2044 0635                        l2300 02E9                        l2220 01B1  
                      l2212 018F                        l2150 0500                        l2230 01D8  
                      l2240 0205                        l2420 0505                        l2094 047E  
                      l2270 026B                        l2262 0254                        l2238 01FF  
                      l2096 0482                        l2336 0342                        l2256 023B  
                      l2264 0257                        l2362 0384                        l2338 0348  
                      l2186 013E                        l2276 02AD                        l2358 037B  
                      l1920 06B4                        l2296 02E0                        l1908 0734  
                      l2398 03DD                        l1970 0517                        l1972 0510  
                      l1990 053D                        l1982 0532                        l1974 051C  
                      l1888 06D0                        l1992 0564                        l1988 0539  
                      l1998 0574                        ?_isr 0076                        STR_1 068F  
                      u2057 00FC                        u2067 0209                        u2077 0215  
                      u1615 0612                        u2087 0221                        u1715 0167  
                      u1485 06D7                        u1495 06DC                        u1855 0239  
                      u1865 0252                        _PEIE 005E                        _WPUB 020D  
                      _WPUD 020F                        _WPUE 0210                        _WPUG 048D  
              __CFG_WRT$OFF 0000           ACTION@SwNumString 003F                        _len1 00DA  
                      _len2 00DC                        _atoi 050E           writeUART@Tx_count 0021  
                      _main 00F6                        _copy 0120                        _name 0144  
                      fsr0h 0005                        fsr1h 0007                        indf0 0000  
                      fsr0l 0004                        indf1 0001                        fsr1l 0006  
                      btemp 007E                        start 00AF               __CFG_IESO$OFF 0000  
           _TMR3_Initialize 0718                       ??_isr 007A                main@end_flag 0232  
                     ?_atoi 0026                       ?_main 0076               __CFG_WDTE$OFF 0000  
                     _T1CON 0018                       _T3CON 0413                       _RC1IF 008D  
                     i1l170 0069                       i1l246 06F1                       i1l182 00A4  
                     i1l167 0063                       i1l176 0098                       i1l185 00AA  
                     i1l179 009E                       _TMR1H 0017                       _TMR3H 0412  
                     _TMR1L 0016                       _TMR3L 0411                       _TRISD 008F  
                     u97_25 0019              __CFG_FCMEN$OFF 0000             __end_of_isdigit 0736  
                     atoi@a 002B                       atoi@s 002D     __end_of_TMR1_Initialize 0742  
            __CFG_BOREN$OFF 0000                       status 0003                       wtemp0 007E  
            __CFG_MCLRE$OFF 0000             __initialization 00B1                __end_of_atoi 0579  
              __end_of_main 03E4              __CFG_LPBOR$OFF 0000                      ??_atoi 0028  
                    ??_main 0047                 i1_writeUART 06E9                ?_pin_manager 0076  
           ACTION@sw_status 002F               main@frame_end 0222                      _ACTION 03E4  
                    _ANSELA 018C                      _ANSELB 018D                      _ANSELD 018F  
                    _ANSELE 0190                      _ANSELF 040C                      _ANSELG 040D  
                    _T1GCON 0019                      _T3GCON 0414                      _RC1REG 0199  
                    _RC1STA 019D                      i1l1610 0093                      u104_25 0088  
                    i1l1552 06EC                      i1l1580 004B                      i1l1590 005B  
   __end_of_TMR3_Initialize 0727                      i1l1598 006C                      _TX1REG 019A  
                    _TX1STA 019E              __CFG_PWRTE$OFF 0000              _periperal_init 0742  
                    ___wmul 06CD      main@RX_CHK_FLAG_start1 0228      main@RX_CHK_FLAG_start2 022A  
        writeUART@str2Write 0023        ACTION@Switch_Num_10s 003C                   ??_isdigit 0020  
          ?_TMR1_Initialize 0076     __end_of__initialization 00F2      __end_of_periperal_init 074B  
            __pcstackCOMMON 0076        ACTION@child_lock_num 003A                __pidataBANK0 0757  
              __pidataBANK1 0639                __pidataBANK2 0579                __pidataBANK3 05C1  
          ACTION@speed_bit1 0030            ACTION@speed_bit2 0031                     ?_ACTION 002E  
                __pbssBANK0 004D                  __pbssBANK1 00D2            ?_TMR3_Initialize 0076  
           __CFG_VCAPEN$OFF 0000                  _child_LOCK 01A0             ?_periperal_init 0076  
                __pmaintext 00F6       ACTION@response_starts 0045                     ?___wmul 0020  
                __pintentry 0004                     _SP1BRGH 019C                     _SP1BRGL 019B  
      __size_of_pin_manager 0024             __size_of_ACTION 012A                     _TX_FLAG 0057  
                _copy_frame 0601          __size_of_writeUART 001D                ACTION@parent 0032  
           __size_of___wmul 001C                   _FAN_SPEED 00E2             __CFG_STVREN$OFF 0000  
       i1writeUART@Tx_count 0078                     __ptext1 066B                     __ptext2 0742  
                   __ptext3 0718                     __ptext4 0736                     __ptext5 0702  
                   __ptext6 0601                     __ptext7 03E4                     __ptext8 06B0  
                   __ptext9 050E                ?i1_writeUART 0076                   _T1CONbits 0018  
                   _isdigit 0727                __size_of_isr 00AB                   _COPY_FLAG 0051  
                   clrloop0 0752        end_of_initialization 00F2               copy_frame@end 0022  
                   init_ram 074B                     initloop 074C           _EUSART_Initialize 0702  
            ACTION@FanSpeed 0036          ?_EUSART_Initialize 0076              main@start_flag 0230  
       ??_EUSART_Initialize 0020           __end_of_writeUART 06CD                   _TRISCbits 008E  
                 _TRISFbits 030C              __end_of_ACTION 050E   __end_of_EUSART_Initialize 0718  
               ?_copy_frame 0020              ACTION@children 0038              __end_of___wmul 06E9  
      main@RX_CHK_FLAG_end1 022C        main@RX_CHK_FLAG_end2 022E         start_initialization 00B1  
               __end_of_isr 00AF                    ??_ACTION 0034            ??_periperal_init 0020  
  __size_of_TMR1_Initialize 000C                    ??___wmul 0024                 __pdataBANK0 005B  
               __pdataBANK1 00A0                 __pdataBANK2 0120                 __pdataBANK3 01A0  
       ACTION@Switch_Num_1s 002E         __size_of_copy_frame 0038        __size_ofi1_writeUART 0019  
               __pbssCOMMON 0070                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK4 0220  __size_of_EUSART_Initialize 0016    __size_of_TMR3_Initialize 000F  
             _TimerCounter1 0070               _TimerCounter2 00D2               ??_pin_manager 0020  
               ACTION@SwNum 0041        ACTION@finalFrameStat 0033                    _BAUD1CON 019F  
                  ?_isdigit 0076                   _curtFlag1 0074                   _curtFlag2 0059  
           main@frame_start 0220                    _FAN_FLAG 00DE        ACTION@FanSpeedString 003D  
            ___wmul@product 0024                   clear_ram0 0751                    _PIE1bits 0091  
                  _PIE3bits 0093                    _PIR1bits 0011                    _PIR3bits 0013  
         ??_TMR1_Initialize 0020           ___wmul@multiplier 0020                   _writeUART 06B0  
       __end_of_pin_manager 068F                ??_copy_frame 0024             copy_frame@start 0020  
       ACTION@switch_status 0043           ??_TMR3_Initialize 0020                 _isdigit$611 0020  
                _FAN_SPEED1 00E0          __end_of_copy_frame 0639            __size_of_isdigit 000F  
                ?_writeUART 0076                    __ptext10 0727                    __ptext11 06CD  
                  __ptext13 06E9                    _curtFlag 00E8               __size_of_atoi 006B  
             __size_of_main 02EE                  _RC1STAbits 019D                    int$flags 007E  
                  atoi@sign 002A                    main@cnt1 0224                    main@cnt2 0226  
               _pin_manager 066B                    isdigit@c 0021                    intlevel1 0000  
         __CFG_CLKOUTEN$OFF 0000        i1writeUART@str2Write 0077               ??i1_writeUART 0076  
             __pstringtext1 068F               __pstringtext2 0000                 ??_writeUART 0020  
                _TX1STAbits 019E             _TMR1_Initialize 0736  
